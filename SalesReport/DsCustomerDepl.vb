'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet2
    Inherits DataSet
    
    Private table_Table As _TableDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Table")) Is Nothing) Then
                Me.Tables.Add(New _TableDataTable(ds.Tables("Table")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Table As _TableDataTable
        Get
            Return Me.table_Table
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet2 = CType(MyBase.Clone,DataSet2)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Table")) Is Nothing) Then
            Me.Tables.Add(New _TableDataTable(ds.Tables("Table")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.table_Table = CType(Me.Tables("Table"),_TableDataTable)
        If (Not (Me.table_Table) Is Nothing) Then
            Me.table_Table.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet2.xsd"
        Me.Locale = New System.Globalization.CultureInfo("pt-PT")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.table_Table = New _TableDataTable
        Me.Tables.Add(Me.table_Table)
    End Sub
    
    Private Function ShouldSerialize_Table() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub _TableRowChangeEventHandler(ByVal sender As Object, ByVal e As _TableRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _TableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columndirect As DataColumn
        
        Private columnccli As DataColumn
        
        Private columnnomc As DataColumn
        
        Private columndatav As DataColumn
        
        Private columndataf As DataColumn
        
        Private columntipo As DataColumn
        
        Private columnnumd As DataColumn
        
        Private columnveur As DataColumn
        
        Friend Sub New()
            MyBase.New("Table")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property directColumn As DataColumn
            Get
                Return Me.columndirect
            End Get
        End Property
        
        Friend ReadOnly Property ccliColumn As DataColumn
            Get
                Return Me.columnccli
            End Get
        End Property
        
        Friend ReadOnly Property nomcColumn As DataColumn
            Get
                Return Me.columnnomc
            End Get
        End Property
        
        Friend ReadOnly Property datavColumn As DataColumn
            Get
                Return Me.columndatav
            End Get
        End Property
        
        Friend ReadOnly Property datafColumn As DataColumn
            Get
                Return Me.columndataf
            End Get
        End Property
        
        Friend ReadOnly Property tipoColumn As DataColumn
            Get
                Return Me.columntipo
            End Get
        End Property
        
        Friend ReadOnly Property numdColumn As DataColumn
            Get
                Return Me.columnnumd
            End Get
        End Property
        
        Friend ReadOnly Property veurColumn As DataColumn
            Get
                Return Me.columnveur
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _TableRow
            Get
                Return CType(Me.Rows(index),_TableRow)
            End Get
        End Property
        
        Public Event _TableRowChanged As _TableRowChangeEventHandler
        
        Public Event _TableRowChanging As _TableRowChangeEventHandler
        
        Public Event _TableRowDeleted As _TableRowChangeEventHandler
        
        Public Event _TableRowDeleting As _TableRowChangeEventHandler
        
        Public Overloads Sub Add_TableRow(ByVal row As _TableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_TableRow(ByVal direct As String, ByVal ccli As Double, ByVal nomc As String, ByVal datav As Date, ByVal dataf As Date, ByVal tipo As String, ByVal numd As Double, ByVal veur As Double) As _TableRow
            Dim row_TableRow As _TableRow = CType(Me.NewRow,_TableRow)
            row_TableRow.ItemArray = New Object() {Nothing, direct, ccli, nomc, datav, dataf, tipo, numd, veur}
            Me.Rows.Add(row_TableRow)
            Return row_TableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _TableDataTable = CType(MyBase.Clone,_TableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _TableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columndirect = Me.Columns("direct")
            Me.columnccli = Me.Columns("ccli")
            Me.columnnomc = Me.Columns("nomc")
            Me.columndatav = Me.Columns("datav")
            Me.columndataf = Me.Columns("dataf")
            Me.columntipo = Me.Columns("tipo")
            Me.columnnumd = Me.Columns("numd")
            Me.columnveur = Me.Columns("veur")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columndirect = New DataColumn("direct", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndirect)
            Me.columnccli = New DataColumn("ccli", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccli)
            Me.columnnomc = New DataColumn("nomc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnomc)
            Me.columndatav = New DataColumn("datav", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndatav)
            Me.columndataf = New DataColumn("dataf", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndataf)
            Me.columntipo = New DataColumn("tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntipo)
            Me.columnnumd = New DataColumn("numd", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnumd)
            Me.columnveur = New DataColumn("veur", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveur)
            Me.columnID.AutoIncrement = true
            Me.columndatav.ReadOnly = true
            Me.columndataf.ReadOnly = true
        End Sub
        
        Public Function New_TableRow() As _TableRow
            Return CType(Me.NewRow,_TableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _TableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_TableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._TableRowChangedEvent) Is Nothing) Then
                RaiseEvent _TableRowChanged(Me, New _TableRowChangeEvent(CType(e.Row,_TableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._TableRowChangingEvent) Is Nothing) Then
                RaiseEvent _TableRowChanging(Me, New _TableRowChangeEvent(CType(e.Row,_TableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._TableRowDeletedEvent) Is Nothing) Then
                RaiseEvent _TableRowDeleted(Me, New _TableRowChangeEvent(CType(e.Row,_TableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._TableRowDeletingEvent) Is Nothing) Then
                RaiseEvent _TableRowDeleting(Me, New _TableRowChangeEvent(CType(e.Row,_TableRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_TableRow(ByVal row As _TableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _TableRow
        Inherits DataRow
        
        Private table_Table As _TableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Table = CType(Me.Table,_TableDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.table_Table.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.IDColumn) = value
            End Set
        End Property
        
        Public Property direct As String
            Get
                Try 
                    Return CType(Me(Me.table_Table.directColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.directColumn) = value
            End Set
        End Property
        
        Public Property ccli As Double
            Get
                Try 
                    Return CType(Me(Me.table_Table.ccliColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.ccliColumn) = value
            End Set
        End Property
        
        Public Property nomc As String
            Get
                Try 
                    Return CType(Me(Me.table_Table.nomcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.nomcColumn) = value
            End Set
        End Property
        
        Public Property datav As Date
            Get
                Try 
                    Return CType(Me(Me.table_Table.datavColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.datavColumn) = value
            End Set
        End Property
        
        Public Property dataf As Date
            Get
                Try 
                    Return CType(Me(Me.table_Table.datafColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.datafColumn) = value
            End Set
        End Property
        
        Public Property tipo As String
            Get
                Try 
                    Return CType(Me(Me.table_Table.tipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.tipoColumn) = value
            End Set
        End Property
        
        Public Property numd As Double
            Get
                Try 
                    Return CType(Me(Me.table_Table.numdColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.numdColumn) = value
            End Set
        End Property
        
        Public Property veur As Double
            Get
                Try 
                    Return CType(Me(Me.table_Table.veurColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Table.veurColumn) = value
            End Set
        End Property
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.table_Table.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.table_Table.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdirectNull() As Boolean
            Return Me.IsNull(Me.table_Table.directColumn)
        End Function
        
        Public Sub SetdirectNull()
            Me(Me.table_Table.directColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsccliNull() As Boolean
            Return Me.IsNull(Me.table_Table.ccliColumn)
        End Function
        
        Public Sub SetccliNull()
            Me(Me.table_Table.ccliColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnomcNull() As Boolean
            Return Me.IsNull(Me.table_Table.nomcColumn)
        End Function
        
        Public Sub SetnomcNull()
            Me(Me.table_Table.nomcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdatavNull() As Boolean
            Return Me.IsNull(Me.table_Table.datavColumn)
        End Function
        
        Public Sub SetdatavNull()
            Me(Me.table_Table.datavColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdatafNull() As Boolean
            Return Me.IsNull(Me.table_Table.datafColumn)
        End Function
        
        Public Sub SetdatafNull()
            Me(Me.table_Table.datafColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstipoNull() As Boolean
            Return Me.IsNull(Me.table_Table.tipoColumn)
        End Function
        
        Public Sub SettipoNull()
            Me(Me.table_Table.tipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnumdNull() As Boolean
            Return Me.IsNull(Me.table_Table.numdColumn)
        End Function
        
        Public Sub SetnumdNull()
            Me(Me.table_Table.numdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsveurNull() As Boolean
            Return Me.IsNull(Me.table_Table.veurColumn)
        End Function
        
        Public Sub SetveurNull()
            Me(Me.table_Table.veurColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _TableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _TableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _TableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _TableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
