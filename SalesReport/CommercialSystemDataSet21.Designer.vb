'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CommercialSystemDataSet2"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CommercialSystemDataSet2
    Inherits Global.System.Data.DataSet
    
    Private tableSapSales As SapSalesDataTable
    
    Private tableSapSalesAmostras As SapSalesAmostrasDataTable
    
    Private tableSapSalesCompostos As SapSalesCompostosDataTable
    
    Private tableSapTipoListaPrecos As SapTipoListaPrecosDataTable
    
    Private tableSapSalesOldReserves As SapSalesOldReservesDataTable
    
    Private tableSapSalesGermanWarehouse As SapSalesGermanWarehouseDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SapSales")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesDataTable(ds.Tables("SapSales")))
            End If
            If (Not (ds.Tables("SapSalesAmostras")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesAmostrasDataTable(ds.Tables("SapSalesAmostras")))
            End If
            If (Not (ds.Tables("SapSalesCompostos")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesCompostosDataTable(ds.Tables("SapSalesCompostos")))
            End If
            If (Not (ds.Tables("SapTipoListaPrecos")) Is Nothing) Then
                MyBase.Tables.Add(New SapTipoListaPrecosDataTable(ds.Tables("SapTipoListaPrecos")))
            End If
            If (Not (ds.Tables("SapSalesOldReserves")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesOldReservesDataTable(ds.Tables("SapSalesOldReserves")))
            End If
            If (Not (ds.Tables("SapSalesGermanWarehouse")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesGermanWarehouseDataTable(ds.Tables("SapSalesGermanWarehouse")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SapSales() As SapSalesDataTable
        Get
            Return Me.tableSapSales
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SapSalesAmostras() As SapSalesAmostrasDataTable
        Get
            Return Me.tableSapSalesAmostras
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SapSalesCompostos() As SapSalesCompostosDataTable
        Get
            Return Me.tableSapSalesCompostos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SapTipoListaPrecos() As SapTipoListaPrecosDataTable
        Get
            Return Me.tableSapTipoListaPrecos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SapSalesOldReserves() As SapSalesOldReservesDataTable
        Get
            Return Me.tableSapSalesOldReserves
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SapSalesGermanWarehouse() As SapSalesGermanWarehouseDataTable
        Get
            Return Me.tableSapSalesGermanWarehouse
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CommercialSystemDataSet2 = CType(MyBase.Clone,CommercialSystemDataSet2)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("SapSales")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesDataTable(ds.Tables("SapSales")))
            End If
            If (Not (ds.Tables("SapSalesAmostras")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesAmostrasDataTable(ds.Tables("SapSalesAmostras")))
            End If
            If (Not (ds.Tables("SapSalesCompostos")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesCompostosDataTable(ds.Tables("SapSalesCompostos")))
            End If
            If (Not (ds.Tables("SapTipoListaPrecos")) Is Nothing) Then
                MyBase.Tables.Add(New SapTipoListaPrecosDataTable(ds.Tables("SapTipoListaPrecos")))
            End If
            If (Not (ds.Tables("SapSalesOldReserves")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesOldReservesDataTable(ds.Tables("SapSalesOldReserves")))
            End If
            If (Not (ds.Tables("SapSalesGermanWarehouse")) Is Nothing) Then
                MyBase.Tables.Add(New SapSalesGermanWarehouseDataTable(ds.Tables("SapSalesGermanWarehouse")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSapSales = CType(MyBase.Tables("SapSales"),SapSalesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSapSales) Is Nothing) Then
                Me.tableSapSales.InitVars
            End If
        End If
        Me.tableSapSalesAmostras = CType(MyBase.Tables("SapSalesAmostras"),SapSalesAmostrasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSapSalesAmostras) Is Nothing) Then
                Me.tableSapSalesAmostras.InitVars
            End If
        End If
        Me.tableSapSalesCompostos = CType(MyBase.Tables("SapSalesCompostos"),SapSalesCompostosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSapSalesCompostos) Is Nothing) Then
                Me.tableSapSalesCompostos.InitVars
            End If
        End If
        Me.tableSapTipoListaPrecos = CType(MyBase.Tables("SapTipoListaPrecos"),SapTipoListaPrecosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSapTipoListaPrecos) Is Nothing) Then
                Me.tableSapTipoListaPrecos.InitVars
            End If
        End If
        Me.tableSapSalesOldReserves = CType(MyBase.Tables("SapSalesOldReserves"),SapSalesOldReservesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSapSalesOldReserves) Is Nothing) Then
                Me.tableSapSalesOldReserves.InitVars
            End If
        End If
        Me.tableSapSalesGermanWarehouse = CType(MyBase.Tables("SapSalesGermanWarehouse"),SapSalesGermanWarehouseDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSapSalesGermanWarehouse) Is Nothing) Then
                Me.tableSapSalesGermanWarehouse.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "CommercialSystemDataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSapSales = New SapSalesDataTable()
        MyBase.Tables.Add(Me.tableSapSales)
        Me.tableSapSalesAmostras = New SapSalesAmostrasDataTable()
        MyBase.Tables.Add(Me.tableSapSalesAmostras)
        Me.tableSapSalesCompostos = New SapSalesCompostosDataTable()
        MyBase.Tables.Add(Me.tableSapSalesCompostos)
        Me.tableSapTipoListaPrecos = New SapTipoListaPrecosDataTable()
        MyBase.Tables.Add(Me.tableSapTipoListaPrecos)
        Me.tableSapSalesOldReserves = New SapSalesOldReservesDataTable()
        MyBase.Tables.Add(Me.tableSapSalesOldReserves)
        Me.tableSapSalesGermanWarehouse = New SapSalesGermanWarehouseDataTable()
        MyBase.Tables.Add(Me.tableSapSalesGermanWarehouse)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeSapSales() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeSapSalesAmostras() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeSapSalesCompostos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeSapTipoListaPrecos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeSapSalesOldReserves() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeSapSalesGermanWarehouse() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CommercialSystemDataSet2 = New CommercialSystemDataSet2()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub SapSalesRowChangeEventHandler(ByVal sender As Object, ByVal e As SapSalesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub SapSalesAmostrasRowChangeEventHandler(ByVal sender As Object, ByVal e As SapSalesAmostrasRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub SapSalesCompostosRowChangeEventHandler(ByVal sender As Object, ByVal e As SapSalesCompostosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub SapTipoListaPrecosRowChangeEventHandler(ByVal sender As Object, ByVal e As SapTipoListaPrecosRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub SapSalesOldReservesRowChangeEventHandler(ByVal sender As Object, ByVal e As SapSalesOldReservesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub SapSalesGermanWarehouseRowChangeEventHandler(ByVal sender As Object, ByVal e As SapSalesGermanWarehouseRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SapSalesDataTable
        Inherits Global.System.Data.TypedTableBase(Of SapSalesRow)
        
        Private columnMD As Global.System.Data.DataColumn
        
        Private columnMM As Global.System.Data.DataColumn
        
        Private columnMA As Global.System.Data.DataColumn
        
        Private columnStatsClientNum As Global.System.Data.DataColumn
        
        Private columnStatsClient As Global.System.Data.DataColumn
        
        Private columnStatsMarket As Global.System.Data.DataColumn
        
        Private columnInvClientNum As Global.System.Data.DataColumn
        
        Private columnInvClient As Global.System.Data.DataColumn
        
        Private columnInvMarket As Global.System.Data.DataColumn
        
        Private columnFinalClientNum As Global.System.Data.DataColumn
        
        Private columnFinalClient As Global.System.Data.DataColumn
        
        Private columnFinalMarket As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnTrademark As Global.System.Data.DataColumn
        
        Private columnNIV1 As Global.System.Data.DataColumn
        
        Private columnNIV2 As Global.System.Data.DataColumn
        
        Private columnNIV3 As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        Private columnFAMILIA As Global.System.Data.DataColumn
        
        Private columnCATEGORIA As Global.System.Data.DataColumn
        
        Private columnVINTAGEYEAR As Global.System.Data.DataColumn
        
        Private columnPrice_List As Global.System.Data.DataColumn
        
        Private columnPACKID As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnSales_Organization As Global.System.Data.DataColumn
        
        Private columnBill_of_material As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnOrder_Document As Global.System.Data.DataColumn
        
        Private columnSales_Unit As Global.System.Data.DataColumn
        
        Private columnMaterial_Name As Global.System.Data.DataColumn
        
        Private columnMaterial_Number As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnRANGE As Global.System.Data.DataColumn
        
        Private columnInHand As Global.System.Data.DataColumn
        
        Private columnShipped As Global.System.Data.DataColumn
        
        Private columnShipHand As Global.System.Data.DataColumn
        
        Private columnValueInHand As Global.System.Data.DataColumn
        
        Private columnValueShipHand As Global.System.Data.DataColumn
        
        Private columnValueShipped As Global.System.Data.DataColumn
        
        Private columnInHandUnit As Global.System.Data.DataColumn
        
        Private columnShippedUnit As Global.System.Data.DataColumn
        
        Private columnShipHandUnit As Global.System.Data.DataColumn
        
        Private columnForeca As Global.System.Data.DataColumn
        
        Private columnForecm As Global.System.Data.DataColumn
        
        Private columnMarketClass As Global.System.Data.DataColumn
        
        Private columnBilling_Document As Global.System.Data.DataColumn
        
        Private columnImmaterial As Global.System.Data.DataColumn
        
        Private columnPPMD As Global.System.Data.DataColumn
        
        Private columnPO_INVCLI As Global.System.Data.DataColumn
        
        Private columnPO_FINCLI As Global.System.Data.DataColumn
        
        Private columnVINTAGEYESNO As Global.System.Data.DataColumn
        
        Private columnBIGTYPE As Global.System.Data.DataColumn
        
        Private columnBIGCAT As Global.System.Data.DataColumn
        
        Private columnBIGFAMILIES As Global.System.Data.DataColumn
        
        Private columnBIGCOMPANIES As Global.System.Data.DataColumn
        
        Private columnForecurrent As Global.System.Data.DataColumn
        
        Private columnTargetValue As Global.System.Data.DataColumn
        
        Private columnBOM As Global.System.Data.DataColumn
        
        Private columnForecaValue As Global.System.Data.DataColumn
        
        Private columnTARGETEDFAMILY As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SapSales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TrademarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrademark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FAMILIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CATEGORIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATEGORIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Price_ListColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice_List
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PACKIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPACKID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Organization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Bill_of_materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBill_of_material
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Order_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueInHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShippedUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MarketClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Billing_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ImmaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PPMDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_INVCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_INVCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_FINCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_FINCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYESNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYESNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGFAMILIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGFAMILIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCOMPANIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCOMPANIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecurrent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TargetValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTargetValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecaValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TARGETEDFAMILYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETEDFAMILY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SapSalesRow
            Get
                Return CType(Me.Rows(index),SapSalesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesRowChanging As SapSalesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesRowChanged As SapSalesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesRowDeleting As SapSalesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesRowDeleted As SapSalesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddSapSalesRow(ByVal row As SapSalesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddSapSalesRow( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Date,  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Decimal,  _
                    ByVal Shipped As Decimal,  _
                    ByVal ShipHand As Decimal,  _
                    ByVal ValueInHand As Decimal,  _
                    ByVal ValueShipHand As Decimal,  _
                    ByVal ValueShipped As Decimal,  _
                    ByVal InHandUnit As Decimal,  _
                    ByVal ShippedUnit As Decimal,  _
                    ByVal ShipHandUnit As Decimal,  _
                    ByVal Foreca As Decimal,  _
                    ByVal Forecm As Decimal,  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Decimal,  _
                    ByVal TargetValue As Decimal,  _
                    ByVal BOM As Boolean,  _
                    ByVal ForecaValue As Decimal,  _
                    ByVal TARGETEDFAMILY As String,  _
                    ByVal _Region As String) As SapSalesRow
            Dim rowSapSalesRow As SapSalesRow = CType(Me.NewRow,SapSalesRow)
            Dim columnValuesArray() As Object = New Object() {MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum, InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Trademark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, VINTAGEYEAR, Price_List, PACKID, Package, Year, _Date, Sales_Organization, Bill_of_material, Division, Order_Document, Sales_Unit, Material_Name, Material_Number, Currency, RANGE, InHand, Shipped, ShipHand, ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, ShipHandUnit, Foreca, Forecm, MarketClass, Billing_Document, Immaterial, PPMD, PO_INVCLI, PO_FINCLI, VINTAGEYESNO, BIGTYPE, BIGCAT, BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDFAMILY, _Region}
            rowSapSalesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSapSalesRow)
            Return rowSapSalesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SapSalesDataTable = CType(MyBase.Clone,SapSalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SapSalesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMD = MyBase.Columns("MD")
            Me.columnMM = MyBase.Columns("MM")
            Me.columnMA = MyBase.Columns("MA")
            Me.columnStatsClientNum = MyBase.Columns("StatsClientNum")
            Me.columnStatsClient = MyBase.Columns("StatsClient")
            Me.columnStatsMarket = MyBase.Columns("StatsMarket")
            Me.columnInvClientNum = MyBase.Columns("InvClientNum")
            Me.columnInvClient = MyBase.Columns("InvClient")
            Me.columnInvMarket = MyBase.Columns("InvMarket")
            Me.columnFinalClientNum = MyBase.Columns("FinalClientNum")
            Me.columnFinalClient = MyBase.Columns("FinalClient")
            Me.columnFinalMarket = MyBase.Columns("FinalMarket")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnTrademark = MyBase.Columns("Trademark")
            Me.columnNIV1 = MyBase.Columns("NIV1")
            Me.columnNIV2 = MyBase.Columns("NIV2")
            Me.columnNIV3 = MyBase.Columns("NIV3")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnGRUPO = MyBase.Columns("GRUPO")
            Me.columnFAMILIA = MyBase.Columns("FAMILIA")
            Me.columnCATEGORIA = MyBase.Columns("CATEGORIA")
            Me.columnVINTAGEYEAR = MyBase.Columns("VINTAGEYEAR")
            Me.columnPrice_List = MyBase.Columns("Price List")
            Me.columnPACKID = MyBase.Columns("PACKID")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnSales_Organization = MyBase.Columns("Sales Organization")
            Me.columnBill_of_material = MyBase.Columns("Bill of material")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnOrder_Document = MyBase.Columns("Order Document")
            Me.columnSales_Unit = MyBase.Columns("Sales Unit")
            Me.columnMaterial_Name = MyBase.Columns("Material Name")
            Me.columnMaterial_Number = MyBase.Columns("Material Number")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnRANGE = MyBase.Columns("RANGE")
            Me.columnInHand = MyBase.Columns("InHand")
            Me.columnShipped = MyBase.Columns("Shipped")
            Me.columnShipHand = MyBase.Columns("ShipHand")
            Me.columnValueInHand = MyBase.Columns("ValueInHand")
            Me.columnValueShipHand = MyBase.Columns("ValueShipHand")
            Me.columnValueShipped = MyBase.Columns("ValueShipped")
            Me.columnInHandUnit = MyBase.Columns("InHandUnit")
            Me.columnShippedUnit = MyBase.Columns("ShippedUnit")
            Me.columnShipHandUnit = MyBase.Columns("ShipHandUnit")
            Me.columnForeca = MyBase.Columns("Foreca")
            Me.columnForecm = MyBase.Columns("Forecm")
            Me.columnMarketClass = MyBase.Columns("MarketClass")
            Me.columnBilling_Document = MyBase.Columns("Billing Document")
            Me.columnImmaterial = MyBase.Columns("Immaterial")
            Me.columnPPMD = MyBase.Columns("PPMD")
            Me.columnPO_INVCLI = MyBase.Columns("PO_INVCLI")
            Me.columnPO_FINCLI = MyBase.Columns("PO_FINCLI")
            Me.columnVINTAGEYESNO = MyBase.Columns("VINTAGEYESNO")
            Me.columnBIGTYPE = MyBase.Columns("BIGTYPE")
            Me.columnBIGCAT = MyBase.Columns("BIGCAT")
            Me.columnBIGFAMILIES = MyBase.Columns("BIGFAMILIES")
            Me.columnBIGCOMPANIES = MyBase.Columns("BIGCOMPANIES")
            Me.columnForecurrent = MyBase.Columns("Forecurrent")
            Me.columnTargetValue = MyBase.Columns("TargetValue")
            Me.columnBOM = MyBase.Columns("BOM")
            Me.columnForecaValue = MyBase.Columns("ForecaValue")
            Me.columnTARGETEDFAMILY = MyBase.Columns("TARGETEDFAMILY")
            Me.columnRegion = MyBase.Columns("Region")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMD = New Global.System.Data.DataColumn("MD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMD)
            Me.columnMM = New Global.System.Data.DataColumn("MM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMM)
            Me.columnMA = New Global.System.Data.DataColumn("MA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMA)
            Me.columnStatsClientNum = New Global.System.Data.DataColumn("StatsClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClientNum)
            Me.columnStatsClient = New Global.System.Data.DataColumn("StatsClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClient)
            Me.columnStatsMarket = New Global.System.Data.DataColumn("StatsMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsMarket)
            Me.columnInvClientNum = New Global.System.Data.DataColumn("InvClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClientNum)
            Me.columnInvClient = New Global.System.Data.DataColumn("InvClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClient)
            Me.columnInvMarket = New Global.System.Data.DataColumn("InvMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvMarket)
            Me.columnFinalClientNum = New Global.System.Data.DataColumn("FinalClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClientNum)
            Me.columnFinalClient = New Global.System.Data.DataColumn("FinalClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClient)
            Me.columnFinalMarket = New Global.System.Data.DataColumn("FinalMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalMarket)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnTrademark = New Global.System.Data.DataColumn("Trademark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrademark)
            Me.columnNIV1 = New Global.System.Data.DataColumn("NIV1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV1)
            Me.columnNIV2 = New Global.System.Data.DataColumn("NIV2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV2)
            Me.columnNIV3 = New Global.System.Data.DataColumn("NIV3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV3)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnFAMILIA = New Global.System.Data.DataColumn("FAMILIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILIA)
            Me.columnCATEGORIA = New Global.System.Data.DataColumn("CATEGORIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATEGORIA)
            Me.columnVINTAGEYEAR = New Global.System.Data.DataColumn("VINTAGEYEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYEAR)
            Me.columnPrice_List = New Global.System.Data.DataColumn("Price List", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice_List)
            Me.columnPACKID = New Global.System.Data.DataColumn("PACKID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPACKID)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnSales_Organization = New Global.System.Data.DataColumn("Sales Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Organization)
            Me.columnBill_of_material = New Global.System.Data.DataColumn("Bill of material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBill_of_material)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnOrder_Document = New Global.System.Data.DataColumn("Order Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Document)
            Me.columnSales_Unit = New Global.System.Data.DataColumn("Sales Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Unit)
            Me.columnMaterial_Name = New Global.System.Data.DataColumn("Material Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Name)
            Me.columnMaterial_Number = New Global.System.Data.DataColumn("Material Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Number)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnRANGE = New Global.System.Data.DataColumn("RANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGE)
            Me.columnInHand = New Global.System.Data.DataColumn("InHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHand)
            Me.columnShipped = New Global.System.Data.DataColumn("Shipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipped)
            Me.columnShipHand = New Global.System.Data.DataColumn("ShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHand)
            Me.columnValueInHand = New Global.System.Data.DataColumn("ValueInHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueInHand)
            Me.columnValueShipHand = New Global.System.Data.DataColumn("ValueShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipHand)
            Me.columnValueShipped = New Global.System.Data.DataColumn("ValueShipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipped)
            Me.columnInHandUnit = New Global.System.Data.DataColumn("InHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHandUnit)
            Me.columnShippedUnit = New Global.System.Data.DataColumn("ShippedUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShippedUnit)
            Me.columnShipHandUnit = New Global.System.Data.DataColumn("ShipHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHandUnit)
            Me.columnForeca = New Global.System.Data.DataColumn("Foreca", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeca)
            Me.columnForecm = New Global.System.Data.DataColumn("Forecm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecm)
            Me.columnMarketClass = New Global.System.Data.DataColumn("MarketClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketClass)
            Me.columnBilling_Document = New Global.System.Data.DataColumn("Billing Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Document)
            Me.columnImmaterial = New Global.System.Data.DataColumn("Immaterial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImmaterial)
            Me.columnPPMD = New Global.System.Data.DataColumn("PPMD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPMD)
            Me.columnPO_INVCLI = New Global.System.Data.DataColumn("PO_INVCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_INVCLI)
            Me.columnPO_FINCLI = New Global.System.Data.DataColumn("PO_FINCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_FINCLI)
            Me.columnVINTAGEYESNO = New Global.System.Data.DataColumn("VINTAGEYESNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYESNO)
            Me.columnBIGTYPE = New Global.System.Data.DataColumn("BIGTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGTYPE)
            Me.columnBIGCAT = New Global.System.Data.DataColumn("BIGCAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCAT)
            Me.columnBIGFAMILIES = New Global.System.Data.DataColumn("BIGFAMILIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGFAMILIES)
            Me.columnBIGCOMPANIES = New Global.System.Data.DataColumn("BIGCOMPANIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCOMPANIES)
            Me.columnForecurrent = New Global.System.Data.DataColumn("Forecurrent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecurrent)
            Me.columnTargetValue = New Global.System.Data.DataColumn("TargetValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTargetValue)
            Me.columnBOM = New Global.System.Data.DataColumn("BOM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOM)
            Me.columnForecaValue = New Global.System.Data.DataColumn("ForecaValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecaValue)
            Me.columnTARGETEDFAMILY = New Global.System.Data.DataColumn("TARGETEDFAMILY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETEDFAMILY)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnMD.MaxLength = 50
            Me.columnMM.MaxLength = 50
            Me.columnMA.MaxLength = 50
            Me.columnStatsClientNum.MaxLength = 50
            Me.columnStatsClient.MaxLength = 50
            Me.columnStatsMarket.MaxLength = 50
            Me.columnInvClientNum.MaxLength = 50
            Me.columnInvClient.MaxLength = 50
            Me.columnInvMarket.MaxLength = 50
            Me.columnFinalClientNum.MaxLength = 50
            Me.columnFinalClient.MaxLength = 50
            Me.columnFinalMarket.MaxLength = 50
            Me.columnCompany.MaxLength = 50
            Me.columnTrademark.MaxLength = 50
            Me.columnNIV1.MaxLength = 50
            Me.columnNIV2.MaxLength = 50
            Me.columnNIV3.MaxLength = 50
            Me.columnTIPO.MaxLength = 101
            Me.columnGRUPO.MaxLength = 50
            Me.columnFAMILIA.MaxLength = 50
            Me.columnCATEGORIA.MaxLength = 50
            Me.columnVINTAGEYEAR.MaxLength = 50
            Me.columnPrice_List.MaxLength = 50
            Me.columnPACKID.MaxLength = 50
            Me.columnPackage.MaxLength = 50
            Me.columnYear.MaxLength = 4
            Me.columnSales_Organization.MaxLength = 50
            Me.columnBill_of_material.MaxLength = 50
            Me.columnDivision.MaxLength = 50
            Me.columnOrder_Document.MaxLength = 50
            Me.columnSales_Unit.MaxLength = 50
            Me.columnMaterial_Name.MaxLength = 50
            Me.columnMaterial_Number.MaxLength = 50
            Me.columnCurrency.MaxLength = 50
            Me.columnRANGE.MaxLength = 50
            Me.columnMarketClass.MaxLength = 50
            Me.columnBilling_Document.MaxLength = 50
            Me.columnImmaterial.MaxLength = 50
            Me.columnPPMD.MaxLength = 20
            Me.columnPO_INVCLI.MaxLength = 35
            Me.columnPO_FINCLI.MaxLength = 35
            Me.columnVINTAGEYESNO.MaxLength = 11
            Me.columnBIGTYPE.MaxLength = 50
            Me.columnBIGCAT.MaxLength = 50
            Me.columnBIGFAMILIES.MaxLength = 50
            Me.columnBIGCOMPANIES.MaxLength = 50
            Me.columnTARGETEDFAMILY.MaxLength = 50
            Me.columnRegion.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewSapSalesRow() As SapSalesRow
            Return CType(Me.NewRow,SapSalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SapSalesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SapSalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SapSalesRowChangedEvent) Is Nothing) Then
                RaiseEvent SapSalesRowChanged(Me, New SapSalesRowChangeEvent(CType(e.Row,SapSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SapSalesRowChangingEvent) Is Nothing) Then
                RaiseEvent SapSalesRowChanging(Me, New SapSalesRowChangeEvent(CType(e.Row,SapSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SapSalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SapSalesRowDeleted(Me, New SapSalesRowChangeEvent(CType(e.Row,SapSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SapSalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SapSalesRowDeleting(Me, New SapSalesRowChangeEvent(CType(e.Row,SapSalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveSapSalesRow(ByVal row As SapSalesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CommercialSystemDataSet2 = New CommercialSystemDataSet2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SapSalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SapSalesAmostrasDataTable
        Inherits Global.System.Data.TypedTableBase(Of SapSalesAmostrasRow)
        
        Private columnMD As Global.System.Data.DataColumn
        
        Private columnMM As Global.System.Data.DataColumn
        
        Private columnMA As Global.System.Data.DataColumn
        
        Private columnStatsClientNum As Global.System.Data.DataColumn
        
        Private columnStatsClient As Global.System.Data.DataColumn
        
        Private columnStatsMarket As Global.System.Data.DataColumn
        
        Private columnInvClientNum As Global.System.Data.DataColumn
        
        Private columnInvClient As Global.System.Data.DataColumn
        
        Private columnInvMarket As Global.System.Data.DataColumn
        
        Private columnFinalClientNum As Global.System.Data.DataColumn
        
        Private columnFinalClient As Global.System.Data.DataColumn
        
        Private columnFinalMarket As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnTrademark As Global.System.Data.DataColumn
        
        Private columnNIV1 As Global.System.Data.DataColumn
        
        Private columnNIV2 As Global.System.Data.DataColumn
        
        Private columnNIV3 As Global.System.Data.DataColumn
        
        Private columnFAMILIA As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        Private columnCATEGORIA As Global.System.Data.DataColumn
        
        Private columnVINTAGEYEAR As Global.System.Data.DataColumn
        
        Private columnPrice_List As Global.System.Data.DataColumn
        
        Private columnPACKID As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnSales_Organization As Global.System.Data.DataColumn
        
        Private columnBill_of_material As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnOrder_Document As Global.System.Data.DataColumn
        
        Private columnBilling_Document As Global.System.Data.DataColumn
        
        Private columnSales_Unit As Global.System.Data.DataColumn
        
        Private columnMaterial_Name As Global.System.Data.DataColumn
        
        Private columnMaterial_Number As Global.System.Data.DataColumn
        
        Private columnImmaterial As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnRANGE As Global.System.Data.DataColumn
        
        Private columnZZORDLSTPRECO As Global.System.Data.DataColumn
        
        Private columnZZGROUP As Global.System.Data.DataColumn
        
        Private columncategoriaid As Global.System.Data.DataColumn
        
        Private columnInHand As Global.System.Data.DataColumn
        
        Private columnShipped As Global.System.Data.DataColumn
        
        Private columnShipHand As Global.System.Data.DataColumn
        
        Private columnValueInHand As Global.System.Data.DataColumn
        
        Private columnValueShipped As Global.System.Data.DataColumn
        
        Private columnValueShipHand As Global.System.Data.DataColumn
        
        Private columnInHandUnit As Global.System.Data.DataColumn
        
        Private columnShippedUnit As Global.System.Data.DataColumn
        
        Private columnShipHandUnit As Global.System.Data.DataColumn
        
        Private columnMarketClass As Global.System.Data.DataColumn
        
        Private columnMTART As Global.System.Data.DataColumn
        
        Private columnAUART As Global.System.Data.DataColumn
        
        Private columnPPMD As Global.System.Data.DataColumn
        
        Private columnPO_INVCLI As Global.System.Data.DataColumn
        
        Private columnPO_FINCLI As Global.System.Data.DataColumn
        
        Private columnVINTAGEYESNO As Global.System.Data.DataColumn
        
        Private columnBIGTYPE As Global.System.Data.DataColumn
        
        Private columnBIGCAT As Global.System.Data.DataColumn
        
        Private columnBIGFAMILIES As Global.System.Data.DataColumn
        
        Private columnBIGCOMPANIES As Global.System.Data.DataColumn
        
        Private columnForecurrent As Global.System.Data.DataColumn
        
        Private columnTargetValue As Global.System.Data.DataColumn
        
        Private columnBOM As Global.System.Data.DataColumn
        
        Private columnForecaValue As Global.System.Data.DataColumn
        
        Private columnTARGETEDFAMILY As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SapSalesAmostras"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TrademarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrademark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FAMILIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CATEGORIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATEGORIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Price_ListColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice_List
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PACKIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPACKID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Organization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Bill_of_materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBill_of_material
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Order_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Billing_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ImmaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ZZORDLSTPRECOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZZORDLSTPRECO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ZZGROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZZGROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property categoriaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncategoriaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueInHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShippedUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MarketClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property AUARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PPMDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_INVCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_INVCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_FINCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_FINCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYESNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYESNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGFAMILIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGFAMILIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCOMPANIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCOMPANIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecurrent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TargetValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTargetValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecaValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TARGETEDFAMILYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETEDFAMILY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SapSalesAmostrasRow
            Get
                Return CType(Me.Rows(index),SapSalesAmostrasRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesAmostrasRowChanging As SapSalesAmostrasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesAmostrasRowChanged As SapSalesAmostrasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesAmostrasRowDeleting As SapSalesAmostrasRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesAmostrasRowDeleted As SapSalesAmostrasRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddSapSalesAmostrasRow(ByVal row As SapSalesAmostrasRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddSapSalesAmostrasRow( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Date,  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Immaterial As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal ZZORDLSTPRECO As String,  _
                    ByVal ZZGROUP As String,  _
                    ByVal categoriaid As String,  _
                    ByVal InHand As Decimal,  _
                    ByVal Shipped As Decimal,  _
                    ByVal ShipHand As Decimal,  _
                    ByVal ValueInHand As Decimal,  _
                    ByVal ValueShipped As Decimal,  _
                    ByVal ValueShipHand As Decimal,  _
                    ByVal InHandUnit As Decimal,  _
                    ByVal ShippedUnit As Decimal,  _
                    ByVal ShipHandUnit As Decimal,  _
                    ByVal MarketClass As String,  _
                    ByVal MTART As String,  _
                    ByVal AUART As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Decimal,  _
                    ByVal TargetValue As Decimal,  _
                    ByVal BOM As Boolean,  _
                    ByVal ForecaValue As Decimal,  _
                    ByVal TARGETEDFAMILY As String,  _
                    ByVal _Region As String) As SapSalesAmostrasRow
            Dim rowSapSalesAmostrasRow As SapSalesAmostrasRow = CType(Me.NewRow,SapSalesAmostrasRow)
            Dim columnValuesArray() As Object = New Object() {MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum, InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Trademark, NIV1, NIV2, NIV3, FAMILIA, TIPO, GRUPO, CATEGORIA, VINTAGEYEAR, Price_List, PACKID, Package, Year, _Date, Sales_Organization, Bill_of_material, Division, Order_Document, Billing_Document, Sales_Unit, Material_Name, Material_Number, Immaterial, Currency, RANGE, ZZORDLSTPRECO, ZZGROUP, categoriaid, InHand, Shipped, ShipHand, ValueInHand, ValueShipped, ValueShipHand, InHandUnit, ShippedUnit, ShipHandUnit, MarketClass, MTART, AUART, PPMD, PO_INVCLI, PO_FINCLI, VINTAGEYESNO, BIGTYPE, BIGCAT, BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDFAMILY, _Region}
            rowSapSalesAmostrasRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSapSalesAmostrasRow)
            Return rowSapSalesAmostrasRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SapSalesAmostrasDataTable = CType(MyBase.Clone,SapSalesAmostrasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SapSalesAmostrasDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMD = MyBase.Columns("MD")
            Me.columnMM = MyBase.Columns("MM")
            Me.columnMA = MyBase.Columns("MA")
            Me.columnStatsClientNum = MyBase.Columns("StatsClientNum")
            Me.columnStatsClient = MyBase.Columns("StatsClient")
            Me.columnStatsMarket = MyBase.Columns("StatsMarket")
            Me.columnInvClientNum = MyBase.Columns("InvClientNum")
            Me.columnInvClient = MyBase.Columns("InvClient")
            Me.columnInvMarket = MyBase.Columns("InvMarket")
            Me.columnFinalClientNum = MyBase.Columns("FinalClientNum")
            Me.columnFinalClient = MyBase.Columns("FinalClient")
            Me.columnFinalMarket = MyBase.Columns("FinalMarket")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnTrademark = MyBase.Columns("Trademark")
            Me.columnNIV1 = MyBase.Columns("NIV1")
            Me.columnNIV2 = MyBase.Columns("NIV2")
            Me.columnNIV3 = MyBase.Columns("NIV3")
            Me.columnFAMILIA = MyBase.Columns("FAMILIA")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnGRUPO = MyBase.Columns("GRUPO")
            Me.columnCATEGORIA = MyBase.Columns("CATEGORIA")
            Me.columnVINTAGEYEAR = MyBase.Columns("VINTAGEYEAR")
            Me.columnPrice_List = MyBase.Columns("Price List")
            Me.columnPACKID = MyBase.Columns("PACKID")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnSales_Organization = MyBase.Columns("Sales Organization")
            Me.columnBill_of_material = MyBase.Columns("Bill of material")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnOrder_Document = MyBase.Columns("Order Document")
            Me.columnBilling_Document = MyBase.Columns("Billing Document")
            Me.columnSales_Unit = MyBase.Columns("Sales Unit")
            Me.columnMaterial_Name = MyBase.Columns("Material Name")
            Me.columnMaterial_Number = MyBase.Columns("Material Number")
            Me.columnImmaterial = MyBase.Columns("Immaterial")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnRANGE = MyBase.Columns("RANGE")
            Me.columnZZORDLSTPRECO = MyBase.Columns("ZZORDLSTPRECO")
            Me.columnZZGROUP = MyBase.Columns("ZZGROUP")
            Me.columncategoriaid = MyBase.Columns("categoriaid")
            Me.columnInHand = MyBase.Columns("InHand")
            Me.columnShipped = MyBase.Columns("Shipped")
            Me.columnShipHand = MyBase.Columns("ShipHand")
            Me.columnValueInHand = MyBase.Columns("ValueInHand")
            Me.columnValueShipped = MyBase.Columns("ValueShipped")
            Me.columnValueShipHand = MyBase.Columns("ValueShipHand")
            Me.columnInHandUnit = MyBase.Columns("InHandUnit")
            Me.columnShippedUnit = MyBase.Columns("ShippedUnit")
            Me.columnShipHandUnit = MyBase.Columns("ShipHandUnit")
            Me.columnMarketClass = MyBase.Columns("MarketClass")
            Me.columnMTART = MyBase.Columns("MTART")
            Me.columnAUART = MyBase.Columns("AUART")
            Me.columnPPMD = MyBase.Columns("PPMD")
            Me.columnPO_INVCLI = MyBase.Columns("PO_INVCLI")
            Me.columnPO_FINCLI = MyBase.Columns("PO_FINCLI")
            Me.columnVINTAGEYESNO = MyBase.Columns("VINTAGEYESNO")
            Me.columnBIGTYPE = MyBase.Columns("BIGTYPE")
            Me.columnBIGCAT = MyBase.Columns("BIGCAT")
            Me.columnBIGFAMILIES = MyBase.Columns("BIGFAMILIES")
            Me.columnBIGCOMPANIES = MyBase.Columns("BIGCOMPANIES")
            Me.columnForecurrent = MyBase.Columns("Forecurrent")
            Me.columnTargetValue = MyBase.Columns("TargetValue")
            Me.columnBOM = MyBase.Columns("BOM")
            Me.columnForecaValue = MyBase.Columns("ForecaValue")
            Me.columnTARGETEDFAMILY = MyBase.Columns("TARGETEDFAMILY")
            Me.columnRegion = MyBase.Columns("Region")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMD = New Global.System.Data.DataColumn("MD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMD)
            Me.columnMM = New Global.System.Data.DataColumn("MM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMM)
            Me.columnMA = New Global.System.Data.DataColumn("MA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMA)
            Me.columnStatsClientNum = New Global.System.Data.DataColumn("StatsClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClientNum)
            Me.columnStatsClient = New Global.System.Data.DataColumn("StatsClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClient)
            Me.columnStatsMarket = New Global.System.Data.DataColumn("StatsMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsMarket)
            Me.columnInvClientNum = New Global.System.Data.DataColumn("InvClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClientNum)
            Me.columnInvClient = New Global.System.Data.DataColumn("InvClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClient)
            Me.columnInvMarket = New Global.System.Data.DataColumn("InvMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvMarket)
            Me.columnFinalClientNum = New Global.System.Data.DataColumn("FinalClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClientNum)
            Me.columnFinalClient = New Global.System.Data.DataColumn("FinalClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClient)
            Me.columnFinalMarket = New Global.System.Data.DataColumn("FinalMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalMarket)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnTrademark = New Global.System.Data.DataColumn("Trademark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrademark)
            Me.columnNIV1 = New Global.System.Data.DataColumn("NIV1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV1)
            Me.columnNIV2 = New Global.System.Data.DataColumn("NIV2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV2)
            Me.columnNIV3 = New Global.System.Data.DataColumn("NIV3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV3)
            Me.columnFAMILIA = New Global.System.Data.DataColumn("FAMILIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILIA)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnCATEGORIA = New Global.System.Data.DataColumn("CATEGORIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATEGORIA)
            Me.columnVINTAGEYEAR = New Global.System.Data.DataColumn("VINTAGEYEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYEAR)
            Me.columnPrice_List = New Global.System.Data.DataColumn("Price List", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice_List)
            Me.columnPACKID = New Global.System.Data.DataColumn("PACKID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPACKID)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnSales_Organization = New Global.System.Data.DataColumn("Sales Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Organization)
            Me.columnBill_of_material = New Global.System.Data.DataColumn("Bill of material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBill_of_material)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnOrder_Document = New Global.System.Data.DataColumn("Order Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Document)
            Me.columnBilling_Document = New Global.System.Data.DataColumn("Billing Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Document)
            Me.columnSales_Unit = New Global.System.Data.DataColumn("Sales Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Unit)
            Me.columnMaterial_Name = New Global.System.Data.DataColumn("Material Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Name)
            Me.columnMaterial_Number = New Global.System.Data.DataColumn("Material Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Number)
            Me.columnImmaterial = New Global.System.Data.DataColumn("Immaterial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImmaterial)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnRANGE = New Global.System.Data.DataColumn("RANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGE)
            Me.columnZZORDLSTPRECO = New Global.System.Data.DataColumn("ZZORDLSTPRECO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZZORDLSTPRECO)
            Me.columnZZGROUP = New Global.System.Data.DataColumn("ZZGROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZZGROUP)
            Me.columncategoriaid = New Global.System.Data.DataColumn("categoriaid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncategoriaid)
            Me.columnInHand = New Global.System.Data.DataColumn("InHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHand)
            Me.columnShipped = New Global.System.Data.DataColumn("Shipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipped)
            Me.columnShipHand = New Global.System.Data.DataColumn("ShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHand)
            Me.columnValueInHand = New Global.System.Data.DataColumn("ValueInHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueInHand)
            Me.columnValueShipped = New Global.System.Data.DataColumn("ValueShipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipped)
            Me.columnValueShipHand = New Global.System.Data.DataColumn("ValueShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipHand)
            Me.columnInHandUnit = New Global.System.Data.DataColumn("InHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHandUnit)
            Me.columnShippedUnit = New Global.System.Data.DataColumn("ShippedUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShippedUnit)
            Me.columnShipHandUnit = New Global.System.Data.DataColumn("ShipHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHandUnit)
            Me.columnMarketClass = New Global.System.Data.DataColumn("MarketClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketClass)
            Me.columnMTART = New Global.System.Data.DataColumn("MTART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTART)
            Me.columnAUART = New Global.System.Data.DataColumn("AUART", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUART)
            Me.columnPPMD = New Global.System.Data.DataColumn("PPMD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPMD)
            Me.columnPO_INVCLI = New Global.System.Data.DataColumn("PO_INVCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_INVCLI)
            Me.columnPO_FINCLI = New Global.System.Data.DataColumn("PO_FINCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_FINCLI)
            Me.columnVINTAGEYESNO = New Global.System.Data.DataColumn("VINTAGEYESNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYESNO)
            Me.columnBIGTYPE = New Global.System.Data.DataColumn("BIGTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGTYPE)
            Me.columnBIGCAT = New Global.System.Data.DataColumn("BIGCAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCAT)
            Me.columnBIGFAMILIES = New Global.System.Data.DataColumn("BIGFAMILIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGFAMILIES)
            Me.columnBIGCOMPANIES = New Global.System.Data.DataColumn("BIGCOMPANIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCOMPANIES)
            Me.columnForecurrent = New Global.System.Data.DataColumn("Forecurrent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecurrent)
            Me.columnTargetValue = New Global.System.Data.DataColumn("TargetValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTargetValue)
            Me.columnBOM = New Global.System.Data.DataColumn("BOM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOM)
            Me.columnForecaValue = New Global.System.Data.DataColumn("ForecaValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecaValue)
            Me.columnTARGETEDFAMILY = New Global.System.Data.DataColumn("TARGETEDFAMILY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETEDFAMILY)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnMD.MaxLength = 50
            Me.columnMM.MaxLength = 50
            Me.columnMA.MaxLength = 50
            Me.columnStatsClientNum.MaxLength = 50
            Me.columnStatsClient.MaxLength = 50
            Me.columnStatsMarket.MaxLength = 50
            Me.columnInvClientNum.MaxLength = 50
            Me.columnInvClient.MaxLength = 50
            Me.columnInvMarket.MaxLength = 50
            Me.columnFinalClientNum.MaxLength = 50
            Me.columnFinalClient.MaxLength = 50
            Me.columnFinalMarket.MaxLength = 50
            Me.columnCompany.MaxLength = 50
            Me.columnTrademark.MaxLength = 50
            Me.columnNIV1.MaxLength = 40
            Me.columnNIV2.MaxLength = 40
            Me.columnNIV3.MaxLength = 40
            Me.columnFAMILIA.MaxLength = 40
            Me.columnTIPO.MaxLength = 81
            Me.columnGRUPO.MaxLength = 13
            Me.columnCATEGORIA.MaxLength = 50
            Me.columnVINTAGEYEAR.MaxLength = 50
            Me.columnPrice_List.MaxLength = 50
            Me.columnPACKID.MaxLength = 50
            Me.columnPackage.MaxLength = 50
            Me.columnYear.MaxLength = 4
            Me.columnSales_Organization.MaxLength = 50
            Me.columnBill_of_material.MaxLength = 50
            Me.columnDivision.MaxLength = 50
            Me.columnOrder_Document.MaxLength = 50
            Me.columnBilling_Document.MaxLength = 50
            Me.columnSales_Unit.MaxLength = 50
            Me.columnMaterial_Name.MaxLength = 50
            Me.columnMaterial_Number.MaxLength = 50
            Me.columnImmaterial.MaxLength = 50
            Me.columnCurrency.MaxLength = 50
            Me.columnRANGE.MaxLength = 50
            Me.columnZZORDLSTPRECO.MaxLength = 2
            Me.columnZZGROUP.MaxLength = 2
            Me.columncategoriaid.MaxLength = 2
            Me.columnMarketClass.MaxLength = 50
            Me.columnMTART.MaxLength = 50
            Me.columnAUART.MaxLength = 50
            Me.columnPPMD.MaxLength = 20
            Me.columnPO_INVCLI.MaxLength = 35
            Me.columnPO_FINCLI.MaxLength = 35
            Me.columnVINTAGEYESNO.MaxLength = 11
            Me.columnBIGTYPE.MaxLength = 50
            Me.columnBIGCAT.MaxLength = 50
            Me.columnBIGFAMILIES.MaxLength = 50
            Me.columnBIGCOMPANIES.MaxLength = 50
            Me.columnTARGETEDFAMILY.MaxLength = 50
            Me.columnRegion.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewSapSalesAmostrasRow() As SapSalesAmostrasRow
            Return CType(Me.NewRow,SapSalesAmostrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SapSalesAmostrasRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SapSalesAmostrasRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SapSalesAmostrasRowChangedEvent) Is Nothing) Then
                RaiseEvent SapSalesAmostrasRowChanged(Me, New SapSalesAmostrasRowChangeEvent(CType(e.Row,SapSalesAmostrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SapSalesAmostrasRowChangingEvent) Is Nothing) Then
                RaiseEvent SapSalesAmostrasRowChanging(Me, New SapSalesAmostrasRowChangeEvent(CType(e.Row,SapSalesAmostrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SapSalesAmostrasRowDeletedEvent) Is Nothing) Then
                RaiseEvent SapSalesAmostrasRowDeleted(Me, New SapSalesAmostrasRowChangeEvent(CType(e.Row,SapSalesAmostrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SapSalesAmostrasRowDeletingEvent) Is Nothing) Then
                RaiseEvent SapSalesAmostrasRowDeleting(Me, New SapSalesAmostrasRowChangeEvent(CType(e.Row,SapSalesAmostrasRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveSapSalesAmostrasRow(ByVal row As SapSalesAmostrasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CommercialSystemDataSet2 = New CommercialSystemDataSet2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SapSalesAmostrasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SapSalesCompostosDataTable
        Inherits Global.System.Data.TypedTableBase(Of SapSalesCompostosRow)
        
        Private columnMD As Global.System.Data.DataColumn
        
        Private columnMM As Global.System.Data.DataColumn
        
        Private columnMA As Global.System.Data.DataColumn
        
        Private columnStatsClientNum As Global.System.Data.DataColumn
        
        Private columnStatsClient As Global.System.Data.DataColumn
        
        Private columnStatsMarket As Global.System.Data.DataColumn
        
        Private columnInvClientNum As Global.System.Data.DataColumn
        
        Private columnInvClient As Global.System.Data.DataColumn
        
        Private columnInvMarket As Global.System.Data.DataColumn
        
        Private columnFinalClientNum As Global.System.Data.DataColumn
        
        Private columnFinalClient As Global.System.Data.DataColumn
        
        Private columnFinalMarket As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnTrademark As Global.System.Data.DataColumn
        
        Private columnNIV1 As Global.System.Data.DataColumn
        
        Private columnNIV2 As Global.System.Data.DataColumn
        
        Private columnNIV3 As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        Private columnFAMILIA As Global.System.Data.DataColumn
        
        Private columnCATEGORIA As Global.System.Data.DataColumn
        
        Private columnVINTAGEYEAR As Global.System.Data.DataColumn
        
        Private columnPrice_List As Global.System.Data.DataColumn
        
        Private columnPACKID As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnSales_Organization As Global.System.Data.DataColumn
        
        Private columnBill_of_material As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnOrder_Document As Global.System.Data.DataColumn
        
        Private columnSales_Unit As Global.System.Data.DataColumn
        
        Private columnMaterial_Name As Global.System.Data.DataColumn
        
        Private columnMaterial_Number As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnRANGE As Global.System.Data.DataColumn
        
        Private columnInHand As Global.System.Data.DataColumn
        
        Private columnShipped As Global.System.Data.DataColumn
        
        Private columnShipHand As Global.System.Data.DataColumn
        
        Private columnValueInHand As Global.System.Data.DataColumn
        
        Private columnValueShipHand As Global.System.Data.DataColumn
        
        Private columnValueShipped As Global.System.Data.DataColumn
        
        Private columnInHandUnit As Global.System.Data.DataColumn
        
        Private columnShippedUnit As Global.System.Data.DataColumn
        
        Private columnShipHandUnit As Global.System.Data.DataColumn
        
        Private columnForeca As Global.System.Data.DataColumn
        
        Private columnForecm As Global.System.Data.DataColumn
        
        Private columnMarketClass As Global.System.Data.DataColumn
        
        Private columnBilling_Document As Global.System.Data.DataColumn
        
        Private columnImmaterial As Global.System.Data.DataColumn
        
        Private columnPPMD As Global.System.Data.DataColumn
        
        Private columnPO_INVCLI As Global.System.Data.DataColumn
        
        Private columnPO_FINCLI As Global.System.Data.DataColumn
        
        Private columnVINTAGEYESNO As Global.System.Data.DataColumn
        
        Private columnBIGTYPE As Global.System.Data.DataColumn
        
        Private columnBIGCAT As Global.System.Data.DataColumn
        
        Private columnBIGFAMILIES As Global.System.Data.DataColumn
        
        Private columnBIGCOMPANIES As Global.System.Data.DataColumn
        
        Private columnForecurrent As Global.System.Data.DataColumn
        
        Private columnTargetValue As Global.System.Data.DataColumn
        
        Private columnBOM As Global.System.Data.DataColumn
        
        Private columnForecaValue As Global.System.Data.DataColumn
        
        Private columnTARGETEDFAMILY As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SapSalesCompostos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TrademarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrademark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FAMILIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CATEGORIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATEGORIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Price_ListColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice_List
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PACKIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPACKID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Organization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Bill_of_materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBill_of_material
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Order_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueInHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShippedUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MarketClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Billing_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ImmaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PPMDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_INVCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_INVCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_FINCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_FINCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYESNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYESNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGFAMILIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGFAMILIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCOMPANIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCOMPANIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecurrent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TargetValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTargetValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecaValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TARGETEDFAMILYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETEDFAMILY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SapSalesCompostosRow
            Get
                Return CType(Me.Rows(index),SapSalesCompostosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesCompostosRowChanging As SapSalesCompostosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesCompostosRowChanged As SapSalesCompostosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesCompostosRowDeleting As SapSalesCompostosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesCompostosRowDeleted As SapSalesCompostosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddSapSalesCompostosRow(ByVal row As SapSalesCompostosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddSapSalesCompostosRow( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Date,  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Decimal,  _
                    ByVal Shipped As Decimal,  _
                    ByVal ShipHand As Decimal,  _
                    ByVal ValueInHand As Decimal,  _
                    ByVal ValueShipHand As Decimal,  _
                    ByVal ValueShipped As Decimal,  _
                    ByVal InHandUnit As Decimal,  _
                    ByVal ShippedUnit As Decimal,  _
                    ByVal ShipHandUnit As Decimal,  _
                    ByVal Foreca As Decimal,  _
                    ByVal Forecm As Decimal,  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Decimal,  _
                    ByVal TargetValue As Decimal,  _
                    ByVal BOM As Boolean,  _
                    ByVal ForecaValue As Decimal,  _
                    ByVal TARGETEDFAMILY As String,  _
                    ByVal _Region As String) As SapSalesCompostosRow
            Dim rowSapSalesCompostosRow As SapSalesCompostosRow = CType(Me.NewRow,SapSalesCompostosRow)
            Dim columnValuesArray() As Object = New Object() {MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum, InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Trademark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, VINTAGEYEAR, Price_List, PACKID, Package, Year, _Date, Sales_Organization, Bill_of_material, Division, Order_Document, Sales_Unit, Material_Name, Material_Number, Currency, RANGE, InHand, Shipped, ShipHand, ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, ShipHandUnit, Foreca, Forecm, MarketClass, Billing_Document, Immaterial, PPMD, PO_INVCLI, PO_FINCLI, VINTAGEYESNO, BIGTYPE, BIGCAT, BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDFAMILY, _Region}
            rowSapSalesCompostosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSapSalesCompostosRow)
            Return rowSapSalesCompostosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SapSalesCompostosDataTable = CType(MyBase.Clone,SapSalesCompostosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SapSalesCompostosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMD = MyBase.Columns("MD")
            Me.columnMM = MyBase.Columns("MM")
            Me.columnMA = MyBase.Columns("MA")
            Me.columnStatsClientNum = MyBase.Columns("StatsClientNum")
            Me.columnStatsClient = MyBase.Columns("StatsClient")
            Me.columnStatsMarket = MyBase.Columns("StatsMarket")
            Me.columnInvClientNum = MyBase.Columns("InvClientNum")
            Me.columnInvClient = MyBase.Columns("InvClient")
            Me.columnInvMarket = MyBase.Columns("InvMarket")
            Me.columnFinalClientNum = MyBase.Columns("FinalClientNum")
            Me.columnFinalClient = MyBase.Columns("FinalClient")
            Me.columnFinalMarket = MyBase.Columns("FinalMarket")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnTrademark = MyBase.Columns("Trademark")
            Me.columnNIV1 = MyBase.Columns("NIV1")
            Me.columnNIV2 = MyBase.Columns("NIV2")
            Me.columnNIV3 = MyBase.Columns("NIV3")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnGRUPO = MyBase.Columns("GRUPO")
            Me.columnFAMILIA = MyBase.Columns("FAMILIA")
            Me.columnCATEGORIA = MyBase.Columns("CATEGORIA")
            Me.columnVINTAGEYEAR = MyBase.Columns("VINTAGEYEAR")
            Me.columnPrice_List = MyBase.Columns("Price List")
            Me.columnPACKID = MyBase.Columns("PACKID")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnSales_Organization = MyBase.Columns("Sales Organization")
            Me.columnBill_of_material = MyBase.Columns("Bill of material")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnOrder_Document = MyBase.Columns("Order Document")
            Me.columnSales_Unit = MyBase.Columns("Sales Unit")
            Me.columnMaterial_Name = MyBase.Columns("Material Name")
            Me.columnMaterial_Number = MyBase.Columns("Material Number")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnRANGE = MyBase.Columns("RANGE")
            Me.columnInHand = MyBase.Columns("InHand")
            Me.columnShipped = MyBase.Columns("Shipped")
            Me.columnShipHand = MyBase.Columns("ShipHand")
            Me.columnValueInHand = MyBase.Columns("ValueInHand")
            Me.columnValueShipHand = MyBase.Columns("ValueShipHand")
            Me.columnValueShipped = MyBase.Columns("ValueShipped")
            Me.columnInHandUnit = MyBase.Columns("InHandUnit")
            Me.columnShippedUnit = MyBase.Columns("ShippedUnit")
            Me.columnShipHandUnit = MyBase.Columns("ShipHandUnit")
            Me.columnForeca = MyBase.Columns("Foreca")
            Me.columnForecm = MyBase.Columns("Forecm")
            Me.columnMarketClass = MyBase.Columns("MarketClass")
            Me.columnBilling_Document = MyBase.Columns("Billing Document")
            Me.columnImmaterial = MyBase.Columns("Immaterial")
            Me.columnPPMD = MyBase.Columns("PPMD")
            Me.columnPO_INVCLI = MyBase.Columns("PO_INVCLI")
            Me.columnPO_FINCLI = MyBase.Columns("PO_FINCLI")
            Me.columnVINTAGEYESNO = MyBase.Columns("VINTAGEYESNO")
            Me.columnBIGTYPE = MyBase.Columns("BIGTYPE")
            Me.columnBIGCAT = MyBase.Columns("BIGCAT")
            Me.columnBIGFAMILIES = MyBase.Columns("BIGFAMILIES")
            Me.columnBIGCOMPANIES = MyBase.Columns("BIGCOMPANIES")
            Me.columnForecurrent = MyBase.Columns("Forecurrent")
            Me.columnTargetValue = MyBase.Columns("TargetValue")
            Me.columnBOM = MyBase.Columns("BOM")
            Me.columnForecaValue = MyBase.Columns("ForecaValue")
            Me.columnTARGETEDFAMILY = MyBase.Columns("TARGETEDFAMILY")
            Me.columnRegion = MyBase.Columns("Region")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMD = New Global.System.Data.DataColumn("MD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMD)
            Me.columnMM = New Global.System.Data.DataColumn("MM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMM)
            Me.columnMA = New Global.System.Data.DataColumn("MA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMA)
            Me.columnStatsClientNum = New Global.System.Data.DataColumn("StatsClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClientNum)
            Me.columnStatsClient = New Global.System.Data.DataColumn("StatsClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClient)
            Me.columnStatsMarket = New Global.System.Data.DataColumn("StatsMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsMarket)
            Me.columnInvClientNum = New Global.System.Data.DataColumn("InvClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClientNum)
            Me.columnInvClient = New Global.System.Data.DataColumn("InvClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClient)
            Me.columnInvMarket = New Global.System.Data.DataColumn("InvMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvMarket)
            Me.columnFinalClientNum = New Global.System.Data.DataColumn("FinalClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClientNum)
            Me.columnFinalClient = New Global.System.Data.DataColumn("FinalClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClient)
            Me.columnFinalMarket = New Global.System.Data.DataColumn("FinalMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalMarket)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnTrademark = New Global.System.Data.DataColumn("Trademark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrademark)
            Me.columnNIV1 = New Global.System.Data.DataColumn("NIV1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV1)
            Me.columnNIV2 = New Global.System.Data.DataColumn("NIV2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV2)
            Me.columnNIV3 = New Global.System.Data.DataColumn("NIV3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV3)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnFAMILIA = New Global.System.Data.DataColumn("FAMILIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILIA)
            Me.columnCATEGORIA = New Global.System.Data.DataColumn("CATEGORIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATEGORIA)
            Me.columnVINTAGEYEAR = New Global.System.Data.DataColumn("VINTAGEYEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYEAR)
            Me.columnPrice_List = New Global.System.Data.DataColumn("Price List", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice_List)
            Me.columnPACKID = New Global.System.Data.DataColumn("PACKID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPACKID)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnSales_Organization = New Global.System.Data.DataColumn("Sales Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Organization)
            Me.columnBill_of_material = New Global.System.Data.DataColumn("Bill of material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBill_of_material)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnOrder_Document = New Global.System.Data.DataColumn("Order Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Document)
            Me.columnSales_Unit = New Global.System.Data.DataColumn("Sales Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Unit)
            Me.columnMaterial_Name = New Global.System.Data.DataColumn("Material Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Name)
            Me.columnMaterial_Number = New Global.System.Data.DataColumn("Material Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Number)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnRANGE = New Global.System.Data.DataColumn("RANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGE)
            Me.columnInHand = New Global.System.Data.DataColumn("InHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHand)
            Me.columnShipped = New Global.System.Data.DataColumn("Shipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipped)
            Me.columnShipHand = New Global.System.Data.DataColumn("ShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHand)
            Me.columnValueInHand = New Global.System.Data.DataColumn("ValueInHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueInHand)
            Me.columnValueShipHand = New Global.System.Data.DataColumn("ValueShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipHand)
            Me.columnValueShipped = New Global.System.Data.DataColumn("ValueShipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipped)
            Me.columnInHandUnit = New Global.System.Data.DataColumn("InHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHandUnit)
            Me.columnShippedUnit = New Global.System.Data.DataColumn("ShippedUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShippedUnit)
            Me.columnShipHandUnit = New Global.System.Data.DataColumn("ShipHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHandUnit)
            Me.columnForeca = New Global.System.Data.DataColumn("Foreca", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeca)
            Me.columnForecm = New Global.System.Data.DataColumn("Forecm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecm)
            Me.columnMarketClass = New Global.System.Data.DataColumn("MarketClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketClass)
            Me.columnBilling_Document = New Global.System.Data.DataColumn("Billing Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Document)
            Me.columnImmaterial = New Global.System.Data.DataColumn("Immaterial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImmaterial)
            Me.columnPPMD = New Global.System.Data.DataColumn("PPMD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPMD)
            Me.columnPO_INVCLI = New Global.System.Data.DataColumn("PO_INVCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_INVCLI)
            Me.columnPO_FINCLI = New Global.System.Data.DataColumn("PO_FINCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_FINCLI)
            Me.columnVINTAGEYESNO = New Global.System.Data.DataColumn("VINTAGEYESNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYESNO)
            Me.columnBIGTYPE = New Global.System.Data.DataColumn("BIGTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGTYPE)
            Me.columnBIGCAT = New Global.System.Data.DataColumn("BIGCAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCAT)
            Me.columnBIGFAMILIES = New Global.System.Data.DataColumn("BIGFAMILIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGFAMILIES)
            Me.columnBIGCOMPANIES = New Global.System.Data.DataColumn("BIGCOMPANIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCOMPANIES)
            Me.columnForecurrent = New Global.System.Data.DataColumn("Forecurrent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecurrent)
            Me.columnTargetValue = New Global.System.Data.DataColumn("TargetValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTargetValue)
            Me.columnBOM = New Global.System.Data.DataColumn("BOM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOM)
            Me.columnForecaValue = New Global.System.Data.DataColumn("ForecaValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecaValue)
            Me.columnTARGETEDFAMILY = New Global.System.Data.DataColumn("TARGETEDFAMILY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETEDFAMILY)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnMD.MaxLength = 50
            Me.columnMM.MaxLength = 50
            Me.columnMA.MaxLength = 50
            Me.columnStatsClientNum.MaxLength = 50
            Me.columnStatsClient.MaxLength = 50
            Me.columnStatsMarket.MaxLength = 50
            Me.columnInvClientNum.MaxLength = 50
            Me.columnInvClient.MaxLength = 50
            Me.columnInvMarket.MaxLength = 50
            Me.columnFinalClientNum.MaxLength = 50
            Me.columnFinalClient.MaxLength = 50
            Me.columnFinalMarket.MaxLength = 50
            Me.columnCompany.MaxLength = 50
            Me.columnTrademark.MaxLength = 50
            Me.columnNIV1.MaxLength = 50
            Me.columnNIV2.MaxLength = 50
            Me.columnNIV3.MaxLength = 50
            Me.columnTIPO.MaxLength = 101
            Me.columnGRUPO.MaxLength = 50
            Me.columnFAMILIA.MaxLength = 50
            Me.columnCATEGORIA.MaxLength = 50
            Me.columnVINTAGEYEAR.MaxLength = 50
            Me.columnPrice_List.MaxLength = 50
            Me.columnPACKID.MaxLength = 50
            Me.columnPackage.MaxLength = 50
            Me.columnYear.MaxLength = 4
            Me.columnSales_Organization.MaxLength = 50
            Me.columnBill_of_material.MaxLength = 50
            Me.columnDivision.MaxLength = 50
            Me.columnOrder_Document.MaxLength = 50
            Me.columnSales_Unit.MaxLength = 50
            Me.columnMaterial_Name.MaxLength = 50
            Me.columnMaterial_Number.MaxLength = 50
            Me.columnCurrency.MaxLength = 50
            Me.columnRANGE.MaxLength = 50
            Me.columnMarketClass.MaxLength = 50
            Me.columnBilling_Document.MaxLength = 50
            Me.columnImmaterial.MaxLength = 50
            Me.columnPPMD.MaxLength = 20
            Me.columnPO_INVCLI.MaxLength = 35
            Me.columnPO_FINCLI.MaxLength = 35
            Me.columnVINTAGEYESNO.MaxLength = 11
            Me.columnBIGTYPE.MaxLength = 50
            Me.columnBIGCAT.MaxLength = 50
            Me.columnBIGFAMILIES.MaxLength = 50
            Me.columnBIGCOMPANIES.MaxLength = 50
            Me.columnTARGETEDFAMILY.MaxLength = 50
            Me.columnRegion.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewSapSalesCompostosRow() As SapSalesCompostosRow
            Return CType(Me.NewRow,SapSalesCompostosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SapSalesCompostosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SapSalesCompostosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SapSalesCompostosRowChangedEvent) Is Nothing) Then
                RaiseEvent SapSalesCompostosRowChanged(Me, New SapSalesCompostosRowChangeEvent(CType(e.Row,SapSalesCompostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SapSalesCompostosRowChangingEvent) Is Nothing) Then
                RaiseEvent SapSalesCompostosRowChanging(Me, New SapSalesCompostosRowChangeEvent(CType(e.Row,SapSalesCompostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SapSalesCompostosRowDeletedEvent) Is Nothing) Then
                RaiseEvent SapSalesCompostosRowDeleted(Me, New SapSalesCompostosRowChangeEvent(CType(e.Row,SapSalesCompostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SapSalesCompostosRowDeletingEvent) Is Nothing) Then
                RaiseEvent SapSalesCompostosRowDeleting(Me, New SapSalesCompostosRowChangeEvent(CType(e.Row,SapSalesCompostosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveSapSalesCompostosRow(ByVal row As SapSalesCompostosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CommercialSystemDataSet2 = New CommercialSystemDataSet2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SapSalesCompostosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SapTipoListaPrecosDataTable
        Inherits Global.System.Data.TypedTableBase(Of SapTipoListaPrecosRow)
        
        Private columnPLTYP As Global.System.Data.DataColumn
        
        Private columnPTEXT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SapTipoListaPrecos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PLTYPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLTYP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PTEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPTEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SapTipoListaPrecosRow
            Get
                Return CType(Me.Rows(index),SapTipoListaPrecosRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapTipoListaPrecosRowChanging As SapTipoListaPrecosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapTipoListaPrecosRowChanged As SapTipoListaPrecosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapTipoListaPrecosRowDeleting As SapTipoListaPrecosRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapTipoListaPrecosRowDeleted As SapTipoListaPrecosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddSapTipoListaPrecosRow(ByVal row As SapTipoListaPrecosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddSapTipoListaPrecosRow(ByVal PLTYP As String, ByVal PTEXT As String) As SapTipoListaPrecosRow
            Dim rowSapTipoListaPrecosRow As SapTipoListaPrecosRow = CType(Me.NewRow,SapTipoListaPrecosRow)
            Dim columnValuesArray() As Object = New Object() {PLTYP, PTEXT}
            rowSapTipoListaPrecosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSapTipoListaPrecosRow)
            Return rowSapTipoListaPrecosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SapTipoListaPrecosDataTable = CType(MyBase.Clone,SapTipoListaPrecosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SapTipoListaPrecosDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPLTYP = MyBase.Columns("PLTYP")
            Me.columnPTEXT = MyBase.Columns("PTEXT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPLTYP = New Global.System.Data.DataColumn("PLTYP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLTYP)
            Me.columnPTEXT = New Global.System.Data.DataColumn("PTEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTEXT)
            Me.columnPLTYP.MaxLength = 2
            Me.columnPTEXT.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewSapTipoListaPrecosRow() As SapTipoListaPrecosRow
            Return CType(Me.NewRow,SapTipoListaPrecosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SapTipoListaPrecosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SapTipoListaPrecosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SapTipoListaPrecosRowChangedEvent) Is Nothing) Then
                RaiseEvent SapTipoListaPrecosRowChanged(Me, New SapTipoListaPrecosRowChangeEvent(CType(e.Row,SapTipoListaPrecosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SapTipoListaPrecosRowChangingEvent) Is Nothing) Then
                RaiseEvent SapTipoListaPrecosRowChanging(Me, New SapTipoListaPrecosRowChangeEvent(CType(e.Row,SapTipoListaPrecosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SapTipoListaPrecosRowDeletedEvent) Is Nothing) Then
                RaiseEvent SapTipoListaPrecosRowDeleted(Me, New SapTipoListaPrecosRowChangeEvent(CType(e.Row,SapTipoListaPrecosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SapTipoListaPrecosRowDeletingEvent) Is Nothing) Then
                RaiseEvent SapTipoListaPrecosRowDeleting(Me, New SapTipoListaPrecosRowChangeEvent(CType(e.Row,SapTipoListaPrecosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveSapTipoListaPrecosRow(ByVal row As SapTipoListaPrecosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CommercialSystemDataSet2 = New CommercialSystemDataSet2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SapTipoListaPrecosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SapSalesOldReservesDataTable
        Inherits Global.System.Data.TypedTableBase(Of SapSalesOldReservesRow)
        
        Private columnMD As Global.System.Data.DataColumn
        
        Private columnMM As Global.System.Data.DataColumn
        
        Private columnMA As Global.System.Data.DataColumn
        
        Private columnStatsClientNum As Global.System.Data.DataColumn
        
        Private columnStatsClient As Global.System.Data.DataColumn
        
        Private columnStatsMarket As Global.System.Data.DataColumn
        
        Private columnInvClientNum As Global.System.Data.DataColumn
        
        Private columnInvClient As Global.System.Data.DataColumn
        
        Private columnInvMarket As Global.System.Data.DataColumn
        
        Private columnFinalClientNum As Global.System.Data.DataColumn
        
        Private columnFinalClient As Global.System.Data.DataColumn
        
        Private columnFinalMarket As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnTrademark As Global.System.Data.DataColumn
        
        Private columnNIV1 As Global.System.Data.DataColumn
        
        Private columnNIV2 As Global.System.Data.DataColumn
        
        Private columnNIV3 As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        Private columnFAMILIA As Global.System.Data.DataColumn
        
        Private columnCATEGORIA As Global.System.Data.DataColumn
        
        Private columnVINTAGEYEAR As Global.System.Data.DataColumn
        
        Private columnPrice_List As Global.System.Data.DataColumn
        
        Private columnPACKID As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnSales_Organization As Global.System.Data.DataColumn
        
        Private columnBill_of_material As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnOrder_Document As Global.System.Data.DataColumn
        
        Private columnSales_Unit As Global.System.Data.DataColumn
        
        Private columnMaterial_Name As Global.System.Data.DataColumn
        
        Private columnMaterial_Number As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnRANGE As Global.System.Data.DataColumn
        
        Private columnInHand As Global.System.Data.DataColumn
        
        Private columnShipped As Global.System.Data.DataColumn
        
        Private columnShipHand As Global.System.Data.DataColumn
        
        Private columnValueInHand As Global.System.Data.DataColumn
        
        Private columnValueShipHand As Global.System.Data.DataColumn
        
        Private columnValueShipped As Global.System.Data.DataColumn
        
        Private columnInHandUnit As Global.System.Data.DataColumn
        
        Private columnShippedUnit As Global.System.Data.DataColumn
        
        Private columnShipHandUnit As Global.System.Data.DataColumn
        
        Private columnForeca As Global.System.Data.DataColumn
        
        Private columnForecm As Global.System.Data.DataColumn
        
        Private columnMarketClass As Global.System.Data.DataColumn
        
        Private columnBilling_Document As Global.System.Data.DataColumn
        
        Private columnImmaterial As Global.System.Data.DataColumn
        
        Private columnPPMD As Global.System.Data.DataColumn
        
        Private columnPO_INVCLI As Global.System.Data.DataColumn
        
        Private columnPO_FINCLI As Global.System.Data.DataColumn
        
        Private columnVINTAGEYESNO As Global.System.Data.DataColumn
        
        Private columnBIGTYPE As Global.System.Data.DataColumn
        
        Private columnBIGCAT As Global.System.Data.DataColumn
        
        Private columnBIGFAMILIES As Global.System.Data.DataColumn
        
        Private columnBIGCOMPANIES As Global.System.Data.DataColumn
        
        Private columnForecurrent As Global.System.Data.DataColumn
        
        Private columnTargetValue As Global.System.Data.DataColumn
        
        Private columnBOM As Global.System.Data.DataColumn
        
        Private columnForecaValue As Global.System.Data.DataColumn
        
        Private columnTARGETEDFAMILY As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SapSalesOldReserves"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TrademarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrademark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FAMILIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CATEGORIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATEGORIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Price_ListColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice_List
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PACKIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPACKID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Organization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Bill_of_materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBill_of_material
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Order_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueInHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShippedUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MarketClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Billing_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ImmaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PPMDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_INVCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_INVCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_FINCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_FINCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYESNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYESNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGFAMILIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGFAMILIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCOMPANIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCOMPANIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecurrent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TargetValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTargetValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecaValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TARGETEDFAMILYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETEDFAMILY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SapSalesOldReservesRow
            Get
                Return CType(Me.Rows(index),SapSalesOldReservesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesOldReservesRowChanging As SapSalesOldReservesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesOldReservesRowChanged As SapSalesOldReservesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesOldReservesRowDeleting As SapSalesOldReservesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesOldReservesRowDeleted As SapSalesOldReservesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddSapSalesOldReservesRow(ByVal row As SapSalesOldReservesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddSapSalesOldReservesRow( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Date,  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Decimal,  _
                    ByVal Shipped As Decimal,  _
                    ByVal ShipHand As Decimal,  _
                    ByVal ValueInHand As Decimal,  _
                    ByVal ValueShipHand As Decimal,  _
                    ByVal ValueShipped As Decimal,  _
                    ByVal InHandUnit As Decimal,  _
                    ByVal ShippedUnit As Decimal,  _
                    ByVal ShipHandUnit As Decimal,  _
                    ByVal Foreca As Decimal,  _
                    ByVal Forecm As Decimal,  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Decimal,  _
                    ByVal TargetValue As Decimal,  _
                    ByVal BOM As Boolean,  _
                    ByVal ForecaValue As Decimal,  _
                    ByVal TARGETEDFAMILY As String,  _
                    ByVal _Region As String) As SapSalesOldReservesRow
            Dim rowSapSalesOldReservesRow As SapSalesOldReservesRow = CType(Me.NewRow,SapSalesOldReservesRow)
            Dim columnValuesArray() As Object = New Object() {MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum, InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Trademark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, VINTAGEYEAR, Price_List, PACKID, Package, Year, _Date, Sales_Organization, Bill_of_material, Division, Order_Document, Sales_Unit, Material_Name, Material_Number, Currency, RANGE, InHand, Shipped, ShipHand, ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, ShipHandUnit, Foreca, Forecm, MarketClass, Billing_Document, Immaterial, PPMD, PO_INVCLI, PO_FINCLI, VINTAGEYESNO, BIGTYPE, BIGCAT, BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDFAMILY, _Region}
            rowSapSalesOldReservesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSapSalesOldReservesRow)
            Return rowSapSalesOldReservesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SapSalesOldReservesDataTable = CType(MyBase.Clone,SapSalesOldReservesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SapSalesOldReservesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMD = MyBase.Columns("MD")
            Me.columnMM = MyBase.Columns("MM")
            Me.columnMA = MyBase.Columns("MA")
            Me.columnStatsClientNum = MyBase.Columns("StatsClientNum")
            Me.columnStatsClient = MyBase.Columns("StatsClient")
            Me.columnStatsMarket = MyBase.Columns("StatsMarket")
            Me.columnInvClientNum = MyBase.Columns("InvClientNum")
            Me.columnInvClient = MyBase.Columns("InvClient")
            Me.columnInvMarket = MyBase.Columns("InvMarket")
            Me.columnFinalClientNum = MyBase.Columns("FinalClientNum")
            Me.columnFinalClient = MyBase.Columns("FinalClient")
            Me.columnFinalMarket = MyBase.Columns("FinalMarket")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnTrademark = MyBase.Columns("Trademark")
            Me.columnNIV1 = MyBase.Columns("NIV1")
            Me.columnNIV2 = MyBase.Columns("NIV2")
            Me.columnNIV3 = MyBase.Columns("NIV3")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnGRUPO = MyBase.Columns("GRUPO")
            Me.columnFAMILIA = MyBase.Columns("FAMILIA")
            Me.columnCATEGORIA = MyBase.Columns("CATEGORIA")
            Me.columnVINTAGEYEAR = MyBase.Columns("VINTAGEYEAR")
            Me.columnPrice_List = MyBase.Columns("Price List")
            Me.columnPACKID = MyBase.Columns("PACKID")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnSales_Organization = MyBase.Columns("Sales Organization")
            Me.columnBill_of_material = MyBase.Columns("Bill of material")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnOrder_Document = MyBase.Columns("Order Document")
            Me.columnSales_Unit = MyBase.Columns("Sales Unit")
            Me.columnMaterial_Name = MyBase.Columns("Material Name")
            Me.columnMaterial_Number = MyBase.Columns("Material Number")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnRANGE = MyBase.Columns("RANGE")
            Me.columnInHand = MyBase.Columns("InHand")
            Me.columnShipped = MyBase.Columns("Shipped")
            Me.columnShipHand = MyBase.Columns("ShipHand")
            Me.columnValueInHand = MyBase.Columns("ValueInHand")
            Me.columnValueShipHand = MyBase.Columns("ValueShipHand")
            Me.columnValueShipped = MyBase.Columns("ValueShipped")
            Me.columnInHandUnit = MyBase.Columns("InHandUnit")
            Me.columnShippedUnit = MyBase.Columns("ShippedUnit")
            Me.columnShipHandUnit = MyBase.Columns("ShipHandUnit")
            Me.columnForeca = MyBase.Columns("Foreca")
            Me.columnForecm = MyBase.Columns("Forecm")
            Me.columnMarketClass = MyBase.Columns("MarketClass")
            Me.columnBilling_Document = MyBase.Columns("Billing Document")
            Me.columnImmaterial = MyBase.Columns("Immaterial")
            Me.columnPPMD = MyBase.Columns("PPMD")
            Me.columnPO_INVCLI = MyBase.Columns("PO_INVCLI")
            Me.columnPO_FINCLI = MyBase.Columns("PO_FINCLI")
            Me.columnVINTAGEYESNO = MyBase.Columns("VINTAGEYESNO")
            Me.columnBIGTYPE = MyBase.Columns("BIGTYPE")
            Me.columnBIGCAT = MyBase.Columns("BIGCAT")
            Me.columnBIGFAMILIES = MyBase.Columns("BIGFAMILIES")
            Me.columnBIGCOMPANIES = MyBase.Columns("BIGCOMPANIES")
            Me.columnForecurrent = MyBase.Columns("Forecurrent")
            Me.columnTargetValue = MyBase.Columns("TargetValue")
            Me.columnBOM = MyBase.Columns("BOM")
            Me.columnForecaValue = MyBase.Columns("ForecaValue")
            Me.columnTARGETEDFAMILY = MyBase.Columns("TARGETEDFAMILY")
            Me.columnRegion = MyBase.Columns("Region")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMD = New Global.System.Data.DataColumn("MD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMD)
            Me.columnMM = New Global.System.Data.DataColumn("MM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMM)
            Me.columnMA = New Global.System.Data.DataColumn("MA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMA)
            Me.columnStatsClientNum = New Global.System.Data.DataColumn("StatsClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClientNum)
            Me.columnStatsClient = New Global.System.Data.DataColumn("StatsClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClient)
            Me.columnStatsMarket = New Global.System.Data.DataColumn("StatsMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsMarket)
            Me.columnInvClientNum = New Global.System.Data.DataColumn("InvClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClientNum)
            Me.columnInvClient = New Global.System.Data.DataColumn("InvClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClient)
            Me.columnInvMarket = New Global.System.Data.DataColumn("InvMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvMarket)
            Me.columnFinalClientNum = New Global.System.Data.DataColumn("FinalClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClientNum)
            Me.columnFinalClient = New Global.System.Data.DataColumn("FinalClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClient)
            Me.columnFinalMarket = New Global.System.Data.DataColumn("FinalMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalMarket)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnTrademark = New Global.System.Data.DataColumn("Trademark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrademark)
            Me.columnNIV1 = New Global.System.Data.DataColumn("NIV1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV1)
            Me.columnNIV2 = New Global.System.Data.DataColumn("NIV2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV2)
            Me.columnNIV3 = New Global.System.Data.DataColumn("NIV3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV3)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnFAMILIA = New Global.System.Data.DataColumn("FAMILIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILIA)
            Me.columnCATEGORIA = New Global.System.Data.DataColumn("CATEGORIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATEGORIA)
            Me.columnVINTAGEYEAR = New Global.System.Data.DataColumn("VINTAGEYEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYEAR)
            Me.columnPrice_List = New Global.System.Data.DataColumn("Price List", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice_List)
            Me.columnPACKID = New Global.System.Data.DataColumn("PACKID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPACKID)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnSales_Organization = New Global.System.Data.DataColumn("Sales Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Organization)
            Me.columnBill_of_material = New Global.System.Data.DataColumn("Bill of material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBill_of_material)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnOrder_Document = New Global.System.Data.DataColumn("Order Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Document)
            Me.columnSales_Unit = New Global.System.Data.DataColumn("Sales Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Unit)
            Me.columnMaterial_Name = New Global.System.Data.DataColumn("Material Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Name)
            Me.columnMaterial_Number = New Global.System.Data.DataColumn("Material Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Number)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnRANGE = New Global.System.Data.DataColumn("RANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGE)
            Me.columnInHand = New Global.System.Data.DataColumn("InHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHand)
            Me.columnShipped = New Global.System.Data.DataColumn("Shipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipped)
            Me.columnShipHand = New Global.System.Data.DataColumn("ShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHand)
            Me.columnValueInHand = New Global.System.Data.DataColumn("ValueInHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueInHand)
            Me.columnValueShipHand = New Global.System.Data.DataColumn("ValueShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipHand)
            Me.columnValueShipped = New Global.System.Data.DataColumn("ValueShipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipped)
            Me.columnInHandUnit = New Global.System.Data.DataColumn("InHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHandUnit)
            Me.columnShippedUnit = New Global.System.Data.DataColumn("ShippedUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShippedUnit)
            Me.columnShipHandUnit = New Global.System.Data.DataColumn("ShipHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHandUnit)
            Me.columnForeca = New Global.System.Data.DataColumn("Foreca", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeca)
            Me.columnForecm = New Global.System.Data.DataColumn("Forecm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecm)
            Me.columnMarketClass = New Global.System.Data.DataColumn("MarketClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketClass)
            Me.columnBilling_Document = New Global.System.Data.DataColumn("Billing Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Document)
            Me.columnImmaterial = New Global.System.Data.DataColumn("Immaterial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImmaterial)
            Me.columnPPMD = New Global.System.Data.DataColumn("PPMD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPMD)
            Me.columnPO_INVCLI = New Global.System.Data.DataColumn("PO_INVCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_INVCLI)
            Me.columnPO_FINCLI = New Global.System.Data.DataColumn("PO_FINCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_FINCLI)
            Me.columnVINTAGEYESNO = New Global.System.Data.DataColumn("VINTAGEYESNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYESNO)
            Me.columnBIGTYPE = New Global.System.Data.DataColumn("BIGTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGTYPE)
            Me.columnBIGCAT = New Global.System.Data.DataColumn("BIGCAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCAT)
            Me.columnBIGFAMILIES = New Global.System.Data.DataColumn("BIGFAMILIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGFAMILIES)
            Me.columnBIGCOMPANIES = New Global.System.Data.DataColumn("BIGCOMPANIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCOMPANIES)
            Me.columnForecurrent = New Global.System.Data.DataColumn("Forecurrent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecurrent)
            Me.columnTargetValue = New Global.System.Data.DataColumn("TargetValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTargetValue)
            Me.columnBOM = New Global.System.Data.DataColumn("BOM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOM)
            Me.columnForecaValue = New Global.System.Data.DataColumn("ForecaValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecaValue)
            Me.columnTARGETEDFAMILY = New Global.System.Data.DataColumn("TARGETEDFAMILY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETEDFAMILY)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnMD.MaxLength = 50
            Me.columnMM.MaxLength = 50
            Me.columnMA.MaxLength = 50
            Me.columnStatsClientNum.MaxLength = 50
            Me.columnStatsClient.MaxLength = 50
            Me.columnStatsMarket.MaxLength = 50
            Me.columnInvClientNum.MaxLength = 50
            Me.columnInvClient.MaxLength = 50
            Me.columnInvMarket.MaxLength = 50
            Me.columnFinalClientNum.MaxLength = 50
            Me.columnFinalClient.MaxLength = 50
            Me.columnFinalMarket.MaxLength = 50
            Me.columnCompany.MaxLength = 50
            Me.columnTrademark.MaxLength = 50
            Me.columnNIV1.MaxLength = 50
            Me.columnNIV2.MaxLength = 50
            Me.columnNIV3.MaxLength = 50
            Me.columnTIPO.MaxLength = 101
            Me.columnGRUPO.MaxLength = 50
            Me.columnFAMILIA.MaxLength = 50
            Me.columnCATEGORIA.MaxLength = 50
            Me.columnVINTAGEYEAR.MaxLength = 50
            Me.columnPrice_List.MaxLength = 50
            Me.columnPACKID.MaxLength = 50
            Me.columnPackage.MaxLength = 50
            Me.columnYear.MaxLength = 4
            Me.columnSales_Organization.MaxLength = 50
            Me.columnBill_of_material.MaxLength = 50
            Me.columnDivision.MaxLength = 50
            Me.columnOrder_Document.MaxLength = 50
            Me.columnSales_Unit.MaxLength = 50
            Me.columnMaterial_Name.MaxLength = 50
            Me.columnMaterial_Number.MaxLength = 50
            Me.columnCurrency.MaxLength = 50
            Me.columnRANGE.MaxLength = 50
            Me.columnMarketClass.MaxLength = 50
            Me.columnBilling_Document.MaxLength = 50
            Me.columnImmaterial.MaxLength = 50
            Me.columnPPMD.MaxLength = 20
            Me.columnPO_INVCLI.MaxLength = 35
            Me.columnPO_FINCLI.MaxLength = 35
            Me.columnVINTAGEYESNO.MaxLength = 11
            Me.columnBIGTYPE.MaxLength = 50
            Me.columnBIGCAT.MaxLength = 50
            Me.columnBIGFAMILIES.MaxLength = 50
            Me.columnBIGCOMPANIES.MaxLength = 50
            Me.columnTARGETEDFAMILY.MaxLength = 50
            Me.columnRegion.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewSapSalesOldReservesRow() As SapSalesOldReservesRow
            Return CType(Me.NewRow,SapSalesOldReservesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SapSalesOldReservesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SapSalesOldReservesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SapSalesOldReservesRowChangedEvent) Is Nothing) Then
                RaiseEvent SapSalesOldReservesRowChanged(Me, New SapSalesOldReservesRowChangeEvent(CType(e.Row,SapSalesOldReservesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SapSalesOldReservesRowChangingEvent) Is Nothing) Then
                RaiseEvent SapSalesOldReservesRowChanging(Me, New SapSalesOldReservesRowChangeEvent(CType(e.Row,SapSalesOldReservesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SapSalesOldReservesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SapSalesOldReservesRowDeleted(Me, New SapSalesOldReservesRowChangeEvent(CType(e.Row,SapSalesOldReservesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SapSalesOldReservesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SapSalesOldReservesRowDeleting(Me, New SapSalesOldReservesRowChangeEvent(CType(e.Row,SapSalesOldReservesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveSapSalesOldReservesRow(ByVal row As SapSalesOldReservesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CommercialSystemDataSet2 = New CommercialSystemDataSet2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SapSalesOldReservesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SapSalesGermanWarehouseDataTable
        Inherits Global.System.Data.TypedTableBase(Of SapSalesGermanWarehouseRow)
        
        Private columnMD As Global.System.Data.DataColumn
        
        Private columnMM As Global.System.Data.DataColumn
        
        Private columnMA As Global.System.Data.DataColumn
        
        Private columnStatsClientNum As Global.System.Data.DataColumn
        
        Private columnStatsClient As Global.System.Data.DataColumn
        
        Private columnStatsMarket As Global.System.Data.DataColumn
        
        Private columnInvClientNum As Global.System.Data.DataColumn
        
        Private columnInvClient As Global.System.Data.DataColumn
        
        Private columnInvMarket As Global.System.Data.DataColumn
        
        Private columnFinalClientNum As Global.System.Data.DataColumn
        
        Private columnFinalClient As Global.System.Data.DataColumn
        
        Private columnFinalMarket As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnTrademark As Global.System.Data.DataColumn
        
        Private columnNIV1 As Global.System.Data.DataColumn
        
        Private columnNIV2 As Global.System.Data.DataColumn
        
        Private columnNIV3 As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnGRUPO As Global.System.Data.DataColumn
        
        Private columnFAMILIA As Global.System.Data.DataColumn
        
        Private columnCATEGORIA As Global.System.Data.DataColumn
        
        Private columnVINTAGEYEAR As Global.System.Data.DataColumn
        
        Private columnPrice_List As Global.System.Data.DataColumn
        
        Private columnPACKID As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnSales_Organization As Global.System.Data.DataColumn
        
        Private columnBill_of_material As Global.System.Data.DataColumn
        
        Private columnDivision As Global.System.Data.DataColumn
        
        Private columnOrder_Document As Global.System.Data.DataColumn
        
        Private columnSales_Unit As Global.System.Data.DataColumn
        
        Private columnMaterial_Name As Global.System.Data.DataColumn
        
        Private columnMaterial_Number As Global.System.Data.DataColumn
        
        Private columnCurrency As Global.System.Data.DataColumn
        
        Private columnRANGE As Global.System.Data.DataColumn
        
        Private columnInHand As Global.System.Data.DataColumn
        
        Private columnShipped As Global.System.Data.DataColumn
        
        Private columnShipHand As Global.System.Data.DataColumn
        
        Private columnValueInHand As Global.System.Data.DataColumn
        
        Private columnValueShipHand As Global.System.Data.DataColumn
        
        Private columnValueShipped As Global.System.Data.DataColumn
        
        Private columnInHandUnit As Global.System.Data.DataColumn
        
        Private columnShippedUnit As Global.System.Data.DataColumn
        
        Private columnShipHandUnit As Global.System.Data.DataColumn
        
        Private columnForeca As Global.System.Data.DataColumn
        
        Private columnForecm As Global.System.Data.DataColumn
        
        Private columnMarketClass As Global.System.Data.DataColumn
        
        Private columnBilling_Document As Global.System.Data.DataColumn
        
        Private columnImmaterial As Global.System.Data.DataColumn
        
        Private columnPPMD As Global.System.Data.DataColumn
        
        Private columnPO_INVCLI As Global.System.Data.DataColumn
        
        Private columnPO_FINCLI As Global.System.Data.DataColumn
        
        Private columnVINTAGEYESNO As Global.System.Data.DataColumn
        
        Private columnBIGTYPE As Global.System.Data.DataColumn
        
        Private columnBIGCAT As Global.System.Data.DataColumn
        
        Private columnBIGFAMILIES As Global.System.Data.DataColumn
        
        Private columnBIGCOMPANIES As Global.System.Data.DataColumn
        
        Private columnForecurrent As Global.System.Data.DataColumn
        
        Private columnTargetValue As Global.System.Data.DataColumn
        
        Private columnBOM As Global.System.Data.DataColumn
        
        Private columnForecaValue As Global.System.Data.DataColumn
        
        Private columnTARGETEDFAMILY As Global.System.Data.DataColumn
        
        Private columnRegion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SapSalesGermanWarehouse"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property StatsMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatsMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InvMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClientNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FinalMarketColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalMarket
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TrademarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrademark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NIV3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNIV3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property GRUPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGRUPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property FAMILIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAMILIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CATEGORIAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATEGORIA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Price_ListColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrice_List
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PACKIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPACKID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_OrganizationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Organization
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Bill_of_materialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBill_of_material
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DivisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Order_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Sales_UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSales_Unit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Material_NumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaterial_Number
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RANGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRANGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueInHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueInHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShipHandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipHand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ValueShippedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValueShipped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property InHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShippedUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShippedUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ShipHandUnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipHandUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeca
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MarketClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarketClass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Billing_DocumentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBilling_Document
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ImmaterialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImmaterial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PPMDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPMD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_INVCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_INVCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property PO_FINCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPO_FINCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property VINTAGEYESNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVINTAGEYESNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGFAMILIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGFAMILIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BIGCOMPANIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBIGCOMPANIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecurrentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecurrent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TargetValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTargetValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property BOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ForecaValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForecaValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property TARGETEDFAMILYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETEDFAMILY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SapSalesGermanWarehouseRow
            Get
                Return CType(Me.Rows(index),SapSalesGermanWarehouseRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesGermanWarehouseRowChanging As SapSalesGermanWarehouseRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesGermanWarehouseRowChanged As SapSalesGermanWarehouseRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesGermanWarehouseRowDeleting As SapSalesGermanWarehouseRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event SapSalesGermanWarehouseRowDeleted As SapSalesGermanWarehouseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddSapSalesGermanWarehouseRow(ByVal row As SapSalesGermanWarehouseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddSapSalesGermanWarehouseRow( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Date,  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Decimal,  _
                    ByVal Shipped As Decimal,  _
                    ByVal ShipHand As Decimal,  _
                    ByVal ValueInHand As Decimal,  _
                    ByVal ValueShipHand As Decimal,  _
                    ByVal ValueShipped As Decimal,  _
                    ByVal InHandUnit As Decimal,  _
                    ByVal ShippedUnit As Decimal,  _
                    ByVal ShipHandUnit As Decimal,  _
                    ByVal Foreca As Decimal,  _
                    ByVal Forecm As Decimal,  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Decimal,  _
                    ByVal TargetValue As Decimal,  _
                    ByVal BOM As Boolean,  _
                    ByVal ForecaValue As Decimal,  _
                    ByVal TARGETEDFAMILY As String,  _
                    ByVal _Region As String) As SapSalesGermanWarehouseRow
            Dim rowSapSalesGermanWarehouseRow As SapSalesGermanWarehouseRow = CType(Me.NewRow,SapSalesGermanWarehouseRow)
            Dim columnValuesArray() As Object = New Object() {MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum, InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Trademark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, VINTAGEYEAR, Price_List, PACKID, Package, Year, _Date, Sales_Organization, Bill_of_material, Division, Order_Document, Sales_Unit, Material_Name, Material_Number, Currency, RANGE, InHand, Shipped, ShipHand, ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, ShipHandUnit, Foreca, Forecm, MarketClass, Billing_Document, Immaterial, PPMD, PO_INVCLI, PO_FINCLI, VINTAGEYESNO, BIGTYPE, BIGCAT, BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDFAMILY, _Region}
            rowSapSalesGermanWarehouseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSapSalesGermanWarehouseRow)
            Return rowSapSalesGermanWarehouseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SapSalesGermanWarehouseDataTable = CType(MyBase.Clone,SapSalesGermanWarehouseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SapSalesGermanWarehouseDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMD = MyBase.Columns("MD")
            Me.columnMM = MyBase.Columns("MM")
            Me.columnMA = MyBase.Columns("MA")
            Me.columnStatsClientNum = MyBase.Columns("StatsClientNum")
            Me.columnStatsClient = MyBase.Columns("StatsClient")
            Me.columnStatsMarket = MyBase.Columns("StatsMarket")
            Me.columnInvClientNum = MyBase.Columns("InvClientNum")
            Me.columnInvClient = MyBase.Columns("InvClient")
            Me.columnInvMarket = MyBase.Columns("InvMarket")
            Me.columnFinalClientNum = MyBase.Columns("FinalClientNum")
            Me.columnFinalClient = MyBase.Columns("FinalClient")
            Me.columnFinalMarket = MyBase.Columns("FinalMarket")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnTrademark = MyBase.Columns("Trademark")
            Me.columnNIV1 = MyBase.Columns("NIV1")
            Me.columnNIV2 = MyBase.Columns("NIV2")
            Me.columnNIV3 = MyBase.Columns("NIV3")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnGRUPO = MyBase.Columns("GRUPO")
            Me.columnFAMILIA = MyBase.Columns("FAMILIA")
            Me.columnCATEGORIA = MyBase.Columns("CATEGORIA")
            Me.columnVINTAGEYEAR = MyBase.Columns("VINTAGEYEAR")
            Me.columnPrice_List = MyBase.Columns("Price List")
            Me.columnPACKID = MyBase.Columns("PACKID")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnSales_Organization = MyBase.Columns("Sales Organization")
            Me.columnBill_of_material = MyBase.Columns("Bill of material")
            Me.columnDivision = MyBase.Columns("Division")
            Me.columnOrder_Document = MyBase.Columns("Order Document")
            Me.columnSales_Unit = MyBase.Columns("Sales Unit")
            Me.columnMaterial_Name = MyBase.Columns("Material Name")
            Me.columnMaterial_Number = MyBase.Columns("Material Number")
            Me.columnCurrency = MyBase.Columns("Currency")
            Me.columnRANGE = MyBase.Columns("RANGE")
            Me.columnInHand = MyBase.Columns("InHand")
            Me.columnShipped = MyBase.Columns("Shipped")
            Me.columnShipHand = MyBase.Columns("ShipHand")
            Me.columnValueInHand = MyBase.Columns("ValueInHand")
            Me.columnValueShipHand = MyBase.Columns("ValueShipHand")
            Me.columnValueShipped = MyBase.Columns("ValueShipped")
            Me.columnInHandUnit = MyBase.Columns("InHandUnit")
            Me.columnShippedUnit = MyBase.Columns("ShippedUnit")
            Me.columnShipHandUnit = MyBase.Columns("ShipHandUnit")
            Me.columnForeca = MyBase.Columns("Foreca")
            Me.columnForecm = MyBase.Columns("Forecm")
            Me.columnMarketClass = MyBase.Columns("MarketClass")
            Me.columnBilling_Document = MyBase.Columns("Billing Document")
            Me.columnImmaterial = MyBase.Columns("Immaterial")
            Me.columnPPMD = MyBase.Columns("PPMD")
            Me.columnPO_INVCLI = MyBase.Columns("PO_INVCLI")
            Me.columnPO_FINCLI = MyBase.Columns("PO_FINCLI")
            Me.columnVINTAGEYESNO = MyBase.Columns("VINTAGEYESNO")
            Me.columnBIGTYPE = MyBase.Columns("BIGTYPE")
            Me.columnBIGCAT = MyBase.Columns("BIGCAT")
            Me.columnBIGFAMILIES = MyBase.Columns("BIGFAMILIES")
            Me.columnBIGCOMPANIES = MyBase.Columns("BIGCOMPANIES")
            Me.columnForecurrent = MyBase.Columns("Forecurrent")
            Me.columnTargetValue = MyBase.Columns("TargetValue")
            Me.columnBOM = MyBase.Columns("BOM")
            Me.columnForecaValue = MyBase.Columns("ForecaValue")
            Me.columnTARGETEDFAMILY = MyBase.Columns("TARGETEDFAMILY")
            Me.columnRegion = MyBase.Columns("Region")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMD = New Global.System.Data.DataColumn("MD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMD)
            Me.columnMM = New Global.System.Data.DataColumn("MM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMM)
            Me.columnMA = New Global.System.Data.DataColumn("MA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMA)
            Me.columnStatsClientNum = New Global.System.Data.DataColumn("StatsClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClientNum)
            Me.columnStatsClient = New Global.System.Data.DataColumn("StatsClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsClient)
            Me.columnStatsMarket = New Global.System.Data.DataColumn("StatsMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatsMarket)
            Me.columnInvClientNum = New Global.System.Data.DataColumn("InvClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClientNum)
            Me.columnInvClient = New Global.System.Data.DataColumn("InvClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvClient)
            Me.columnInvMarket = New Global.System.Data.DataColumn("InvMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvMarket)
            Me.columnFinalClientNum = New Global.System.Data.DataColumn("FinalClientNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClientNum)
            Me.columnFinalClient = New Global.System.Data.DataColumn("FinalClient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalClient)
            Me.columnFinalMarket = New Global.System.Data.DataColumn("FinalMarket", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalMarket)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnTrademark = New Global.System.Data.DataColumn("Trademark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrademark)
            Me.columnNIV1 = New Global.System.Data.DataColumn("NIV1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV1)
            Me.columnNIV2 = New Global.System.Data.DataColumn("NIV2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV2)
            Me.columnNIV3 = New Global.System.Data.DataColumn("NIV3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNIV3)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnGRUPO = New Global.System.Data.DataColumn("GRUPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGRUPO)
            Me.columnFAMILIA = New Global.System.Data.DataColumn("FAMILIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAMILIA)
            Me.columnCATEGORIA = New Global.System.Data.DataColumn("CATEGORIA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATEGORIA)
            Me.columnVINTAGEYEAR = New Global.System.Data.DataColumn("VINTAGEYEAR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYEAR)
            Me.columnPrice_List = New Global.System.Data.DataColumn("Price List", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrice_List)
            Me.columnPACKID = New Global.System.Data.DataColumn("PACKID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPACKID)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnSales_Organization = New Global.System.Data.DataColumn("Sales Organization", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Organization)
            Me.columnBill_of_material = New Global.System.Data.DataColumn("Bill of material", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBill_of_material)
            Me.columnDivision = New Global.System.Data.DataColumn("Division", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDivision)
            Me.columnOrder_Document = New Global.System.Data.DataColumn("Order Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Document)
            Me.columnSales_Unit = New Global.System.Data.DataColumn("Sales Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSales_Unit)
            Me.columnMaterial_Name = New Global.System.Data.DataColumn("Material Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Name)
            Me.columnMaterial_Number = New Global.System.Data.DataColumn("Material Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaterial_Number)
            Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency)
            Me.columnRANGE = New Global.System.Data.DataColumn("RANGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRANGE)
            Me.columnInHand = New Global.System.Data.DataColumn("InHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHand)
            Me.columnShipped = New Global.System.Data.DataColumn("Shipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipped)
            Me.columnShipHand = New Global.System.Data.DataColumn("ShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHand)
            Me.columnValueInHand = New Global.System.Data.DataColumn("ValueInHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueInHand)
            Me.columnValueShipHand = New Global.System.Data.DataColumn("ValueShipHand", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipHand)
            Me.columnValueShipped = New Global.System.Data.DataColumn("ValueShipped", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValueShipped)
            Me.columnInHandUnit = New Global.System.Data.DataColumn("InHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInHandUnit)
            Me.columnShippedUnit = New Global.System.Data.DataColumn("ShippedUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShippedUnit)
            Me.columnShipHandUnit = New Global.System.Data.DataColumn("ShipHandUnit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipHandUnit)
            Me.columnForeca = New Global.System.Data.DataColumn("Foreca", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeca)
            Me.columnForecm = New Global.System.Data.DataColumn("Forecm", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecm)
            Me.columnMarketClass = New Global.System.Data.DataColumn("MarketClass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarketClass)
            Me.columnBilling_Document = New Global.System.Data.DataColumn("Billing Document", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBilling_Document)
            Me.columnImmaterial = New Global.System.Data.DataColumn("Immaterial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImmaterial)
            Me.columnPPMD = New Global.System.Data.DataColumn("PPMD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPMD)
            Me.columnPO_INVCLI = New Global.System.Data.DataColumn("PO_INVCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_INVCLI)
            Me.columnPO_FINCLI = New Global.System.Data.DataColumn("PO_FINCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPO_FINCLI)
            Me.columnVINTAGEYESNO = New Global.System.Data.DataColumn("VINTAGEYESNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVINTAGEYESNO)
            Me.columnBIGTYPE = New Global.System.Data.DataColumn("BIGTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGTYPE)
            Me.columnBIGCAT = New Global.System.Data.DataColumn("BIGCAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCAT)
            Me.columnBIGFAMILIES = New Global.System.Data.DataColumn("BIGFAMILIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGFAMILIES)
            Me.columnBIGCOMPANIES = New Global.System.Data.DataColumn("BIGCOMPANIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBIGCOMPANIES)
            Me.columnForecurrent = New Global.System.Data.DataColumn("Forecurrent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecurrent)
            Me.columnTargetValue = New Global.System.Data.DataColumn("TargetValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTargetValue)
            Me.columnBOM = New Global.System.Data.DataColumn("BOM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBOM)
            Me.columnForecaValue = New Global.System.Data.DataColumn("ForecaValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForecaValue)
            Me.columnTARGETEDFAMILY = New Global.System.Data.DataColumn("TARGETEDFAMILY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETEDFAMILY)
            Me.columnRegion = New Global.System.Data.DataColumn("Region", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn")
            Me.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion")
            Me.columnRegion.ExtendedProperties.Add("Generator_UserColumnName", "Region")
            MyBase.Columns.Add(Me.columnRegion)
            Me.columnMD.MaxLength = 50
            Me.columnMM.MaxLength = 50
            Me.columnMA.MaxLength = 50
            Me.columnStatsClientNum.MaxLength = 50
            Me.columnStatsClient.MaxLength = 50
            Me.columnStatsMarket.MaxLength = 50
            Me.columnInvClientNum.MaxLength = 50
            Me.columnInvClient.MaxLength = 50
            Me.columnInvMarket.MaxLength = 50
            Me.columnFinalClientNum.MaxLength = 50
            Me.columnFinalClient.MaxLength = 50
            Me.columnFinalMarket.MaxLength = 50
            Me.columnCompany.MaxLength = 50
            Me.columnTrademark.MaxLength = 50
            Me.columnNIV1.MaxLength = 50
            Me.columnNIV2.MaxLength = 50
            Me.columnNIV3.MaxLength = 50
            Me.columnTIPO.MaxLength = 101
            Me.columnGRUPO.MaxLength = 50
            Me.columnFAMILIA.MaxLength = 50
            Me.columnCATEGORIA.MaxLength = 50
            Me.columnVINTAGEYEAR.MaxLength = 50
            Me.columnPrice_List.MaxLength = 50
            Me.columnPACKID.MaxLength = 50
            Me.columnPackage.MaxLength = 50
            Me.columnYear.MaxLength = 4
            Me.columnSales_Organization.MaxLength = 50
            Me.columnBill_of_material.MaxLength = 50
            Me.columnDivision.MaxLength = 50
            Me.columnOrder_Document.MaxLength = 50
            Me.columnSales_Unit.MaxLength = 50
            Me.columnMaterial_Name.MaxLength = 50
            Me.columnMaterial_Number.MaxLength = 50
            Me.columnCurrency.MaxLength = 50
            Me.columnRANGE.MaxLength = 50
            Me.columnMarketClass.MaxLength = 50
            Me.columnBilling_Document.MaxLength = 50
            Me.columnImmaterial.MaxLength = 50
            Me.columnPPMD.MaxLength = 20
            Me.columnPO_INVCLI.MaxLength = 35
            Me.columnPO_FINCLI.MaxLength = 35
            Me.columnVINTAGEYESNO.MaxLength = 11
            Me.columnBIGTYPE.MaxLength = 50
            Me.columnBIGCAT.MaxLength = 50
            Me.columnBIGFAMILIES.MaxLength = 50
            Me.columnBIGCOMPANIES.MaxLength = 50
            Me.columnTARGETEDFAMILY.MaxLength = 50
            Me.columnRegion.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewSapSalesGermanWarehouseRow() As SapSalesGermanWarehouseRow
            Return CType(Me.NewRow,SapSalesGermanWarehouseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SapSalesGermanWarehouseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SapSalesGermanWarehouseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SapSalesGermanWarehouseRowChangedEvent) Is Nothing) Then
                RaiseEvent SapSalesGermanWarehouseRowChanged(Me, New SapSalesGermanWarehouseRowChangeEvent(CType(e.Row,SapSalesGermanWarehouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SapSalesGermanWarehouseRowChangingEvent) Is Nothing) Then
                RaiseEvent SapSalesGermanWarehouseRowChanging(Me, New SapSalesGermanWarehouseRowChangeEvent(CType(e.Row,SapSalesGermanWarehouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SapSalesGermanWarehouseRowDeletedEvent) Is Nothing) Then
                RaiseEvent SapSalesGermanWarehouseRowDeleted(Me, New SapSalesGermanWarehouseRowChangeEvent(CType(e.Row,SapSalesGermanWarehouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SapSalesGermanWarehouseRowDeletingEvent) Is Nothing) Then
                RaiseEvent SapSalesGermanWarehouseRowDeleting(Me, New SapSalesGermanWarehouseRowChangeEvent(CType(e.Row,SapSalesGermanWarehouseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveSapSalesGermanWarehouseRow(ByVal row As SapSalesGermanWarehouseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As CommercialSystemDataSet2 = New CommercialSystemDataSet2()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SapSalesGermanWarehouseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SapSalesRow
        Inherits Global.System.Data.DataRow
        
        Private tableSapSales As SapSalesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSapSales = CType(Me.Table,SapSalesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.MDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MD' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.MDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MM() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.MMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MM' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.MMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.MAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MA' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.MAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.StatsClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClientNum' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.StatsClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.StatsClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClient' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.StatsClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.StatsMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsMarket' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.StatsMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.InvClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClientNum' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.InvClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.InvClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClient' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.InvClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.InvMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvMarket' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.InvMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.FinalClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClientNum' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.FinalClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.FinalClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClient' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.FinalClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.FinalMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalMarket' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.FinalMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Trademark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.TrademarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Trademark' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.TrademarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.NIV1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV1' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.NIV1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.NIV2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV2' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.NIV2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV3() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.NIV3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV3' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.NIV3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRUPO' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FAMILIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.FAMILIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILIA' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.FAMILIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CATEGORIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.CATEGORIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CATEGORIA' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.CATEGORIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.VINTAGEYEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYEAR' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.VINTAGEYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Price_List() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Price_ListColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price List' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Price_ListColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PACKID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.PACKIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PACKID' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.PACKIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Sales_OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Organization' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Sales_OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Bill_of_material() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Bill_of_materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bill of material' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Bill_of_materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Division() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.DivisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Division' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Order_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Order_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order Document' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Order_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Sales_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Unit' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Sales_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Material_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Name' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Material_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Number() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Material_NumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Number' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Material_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.RANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RANGE' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.RANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.InHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHand' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.InHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Shipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shipped' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHand' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueInHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ValueInHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueInHand' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ValueInHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ValueShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipHand' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ValueShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ValueShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipped' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ValueShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.InHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHandUnit' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.InHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShippedUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ShippedUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShippedUnit' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ShippedUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ShipHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHandUnit' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ShipHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Foreca() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ForecaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foreca' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ForecaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecm() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ForecmColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecm' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ForecmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MarketClass() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.MarketClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketClass' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.MarketClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Billing_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.Billing_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing Document' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.Billing_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Immaterial() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ImmaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Immaterial' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ImmaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PPMD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.PPMDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPMD' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.PPMDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_INVCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.PO_INVCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_INVCLI' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.PO_INVCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_FINCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.PO_FINCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_FINCLI' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.PO_FINCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYESNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.VINTAGEYESNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYESNO' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.VINTAGEYESNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.BIGTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGTYPE' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.BIGTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.BIGCATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCAT' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.BIGCATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGFAMILIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.BIGFAMILIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGFAMILIES' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.BIGFAMILIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCOMPANIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.BIGCOMPANIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCOMPANIES' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.BIGCOMPANIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecurrent() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ForecurrentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecurrent' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ForecurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TargetValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.TargetValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TargetValue' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.TargetValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BOM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.BOMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOM' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.BOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ForecaValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.ForecaValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForecaValue' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.ForecaValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TARGETEDFAMILY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.TARGETEDFAMILYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETEDFAMILY' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.TARGETEDFAMILYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSales.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'SapSales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSales.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.MDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMDNull()
            Me(Me.tableSapSales.MDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMMNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.MMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMMNull()
            Me(Me.tableSapSales.MMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMANull() As Boolean
            Return Me.IsNull(Me.tableSapSales.MAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMANull()
            Me(Me.tableSapSales.MAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.StatsClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNumNull()
            Me(Me.tableSapSales.StatsClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.StatsClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNull()
            Me(Me.tableSapSales.StatsClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.StatsMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsMarketNull()
            Me(Me.tableSapSales.StatsMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.InvClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNumNull()
            Me(Me.tableSapSales.InvClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.InvClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNull()
            Me(Me.tableSapSales.InvClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.InvMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvMarketNull()
            Me(Me.tableSapSales.InvMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.FinalClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNumNull()
            Me(Me.tableSapSales.FinalClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.FinalClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNull()
            Me(Me.tableSapSales.FinalClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.FinalMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalMarketNull()
            Me(Me.tableSapSales.FinalMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCompanyNull()
            Me(Me.tableSapSales.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTrademarkNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.TrademarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTrademarkNull()
            Me(Me.tableSapSales.TrademarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV1Null() As Boolean
            Return Me.IsNull(Me.tableSapSales.NIV1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV1Null()
            Me(Me.tableSapSales.NIV1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV2Null() As Boolean
            Return Me.IsNull(Me.tableSapSales.NIV2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV2Null()
            Me(Me.tableSapSales.NIV2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV3Null() As Boolean
            Return Me.IsNull(Me.tableSapSales.NIV3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV3Null()
            Me(Me.tableSapSales.NIV3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableSapSales.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTIPONull()
            Me(Me.tableSapSales.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableSapSales.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGRUPONull()
            Me(Me.tableSapSales.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFAMILIANull() As Boolean
            Return Me.IsNull(Me.tableSapSales.FAMILIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFAMILIANull()
            Me(Me.tableSapSales.FAMILIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCATEGORIANull() As Boolean
            Return Me.IsNull(Me.tableSapSales.CATEGORIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCATEGORIANull()
            Me(Me.tableSapSales.CATEGORIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYEARNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.VINTAGEYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYEARNull()
            Me(Me.tableSapSales.VINTAGEYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPrice_ListNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Price_ListColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPrice_ListNull()
            Me(Me.tableSapSales.Price_ListColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPACKIDNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.PACKIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPACKIDNull()
            Me(Me.tableSapSales.PACKIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPackageNull()
            Me(Me.tableSapSales.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetYearNull()
            Me(Me.tableSapSales.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_DateNull()
            Me(Me.tableSapSales.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_OrganizationNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Sales_OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_OrganizationNull()
            Me(Me.tableSapSales.Sales_OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBill_of_materialNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Bill_of_materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBill_of_materialNull()
            Me(Me.tableSapSales.Bill_of_materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.DivisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDivisionNull()
            Me(Me.tableSapSales.DivisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrder_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Order_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrder_DocumentNull()
            Me(Me.tableSapSales.Order_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_UnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Sales_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_UnitNull()
            Me(Me.tableSapSales.Sales_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NameNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Material_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NameNull()
            Me(Me.tableSapSales.Material_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NumberNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Material_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NumberNull()
            Me(Me.tableSapSales.Material_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableSapSales.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRANGENull() As Boolean
            Return Me.IsNull(Me.tableSapSales.RANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRANGENull()
            Me(Me.tableSapSales.RANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.InHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandNull()
            Me(Me.tableSapSales.InHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedNull()
            Me(Me.tableSapSales.ShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandNull()
            Me(Me.tableSapSales.ShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ValueInHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueInHandNull()
            Me(Me.tableSapSales.ValueInHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ValueShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShipHandNull()
            Me(Me.tableSapSales.ValueShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ValueShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShippedNull()
            Me(Me.tableSapSales.ValueShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.InHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandUnitNull()
            Me(Me.tableSapSales.InHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ShippedUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedUnitNull()
            Me(Me.tableSapSales.ShippedUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ShipHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandUnitNull()
            Me(Me.tableSapSales.ShipHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ForecaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaNull()
            Me(Me.tableSapSales.ForecaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecmNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ForecmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecmNull()
            Me(Me.tableSapSales.ForecmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMarketClassNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.MarketClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMarketClassNull()
            Me(Me.tableSapSales.MarketClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBilling_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.Billing_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBilling_DocumentNull()
            Me(Me.tableSapSales.Billing_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsImmaterialNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ImmaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetImmaterialNull()
            Me(Me.tableSapSales.ImmaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPPMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.PPMDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPPMDNull()
            Me(Me.tableSapSales.PPMDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_INVCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSales.PO_INVCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_INVCLINull()
            Me(Me.tableSapSales.PO_INVCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_FINCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSales.PO_FINCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_FINCLINull()
            Me(Me.tableSapSales.PO_FINCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYESNONull() As Boolean
            Return Me.IsNull(Me.tableSapSales.VINTAGEYESNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYESNONull()
            Me(Me.tableSapSales.VINTAGEYESNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGTYPENull() As Boolean
            Return Me.IsNull(Me.tableSapSales.BIGTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGTYPENull()
            Me(Me.tableSapSales.BIGTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCATNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.BIGCATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCATNull()
            Me(Me.tableSapSales.BIGCATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGFAMILIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.BIGFAMILIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGFAMILIESNull()
            Me(Me.tableSapSales.BIGFAMILIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCOMPANIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.BIGCOMPANIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCOMPANIESNull()
            Me(Me.tableSapSales.BIGCOMPANIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecurrentNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ForecurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecurrentNull()
            Me(Me.tableSapSales.ForecurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTargetValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.TargetValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTargetValueNull()
            Me(Me.tableSapSales.TargetValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBOMNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.BOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBOMNull()
            Me(Me.tableSapSales.BOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.ForecaValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaValueNull()
            Me(Me.tableSapSales.ForecaValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTARGETEDFAMILYNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.TARGETEDFAMILYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTARGETEDFAMILYNull()
            Me(Me.tableSapSales.TARGETEDFAMILYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableSapSales.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_RegionNull()
            Me(Me.tableSapSales.RegionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SapSalesAmostrasRow
        Inherits Global.System.Data.DataRow
        
        Private tableSapSalesAmostras As SapSalesAmostrasDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSapSalesAmostras = CType(Me.Table,SapSalesAmostrasDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.MDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MD' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.MDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MM() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.MMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MM' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.MMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.MAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MA' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.MAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.StatsClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClientNum' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.StatsClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.StatsClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClient' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.StatsClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.StatsMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsMarket' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.StatsMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.InvClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClientNum' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.InvClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.InvClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClient' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.InvClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.InvMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvMarket' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.InvMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.FinalClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClientNum' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.FinalClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.FinalClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClient' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.FinalClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.FinalMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalMarket' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.FinalMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Trademark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.TrademarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Trademark' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.TrademarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.NIV1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV1' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.NIV1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.NIV2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV2' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.NIV2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV3() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.NIV3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV3' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.NIV3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FAMILIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.FAMILIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILIA' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.FAMILIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRUPO' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CATEGORIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.CATEGORIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CATEGORIA' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.CATEGORIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.VINTAGEYEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYEAR' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.VINTAGEYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Price_List() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Price_ListColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price List' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Price_ListColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PACKID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.PACKIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PACKID' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.PACKIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Sales_OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Organization' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Sales_OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Bill_of_material() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Bill_of_materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bill of material' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Bill_of_materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Division() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.DivisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Division' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Order_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Order_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order Document' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Order_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Billing_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Billing_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing Document' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Billing_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Sales_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Unit' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Sales_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Material_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Name' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Material_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Number() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.Material_NumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Number' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.Material_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Immaterial() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ImmaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Immaterial' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ImmaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.RANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RANGE' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.RANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZZORDLSTPRECO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ZZORDLSTPRECOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZZORDLSTPRECO' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ZZORDLSTPRECOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ZZGROUP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ZZGROUPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZZGROUP' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ZZGROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property categoriaid() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.categoriaidColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'categoriaid' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.categoriaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.InHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHand' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.InHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Shipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shipped' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHand' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueInHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ValueInHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueInHand' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ValueInHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ValueShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipped' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ValueShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ValueShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipHand' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ValueShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.InHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHandUnit' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.InHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShippedUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ShippedUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShippedUnit' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ShippedUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ShipHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHandUnit' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ShipHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MarketClass() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.MarketClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketClass' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.MarketClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MTART() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.MTARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTART' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.MTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property AUART() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.AUARTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUART' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.AUARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PPMD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.PPMDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPMD' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.PPMDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_INVCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.PO_INVCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_INVCLI' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.PO_INVCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_FINCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.PO_FINCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_FINCLI' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.PO_FINCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYESNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.VINTAGEYESNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYESNO' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.VINTAGEYESNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.BIGTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGTYPE' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.BIGTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.BIGCATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCAT' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.BIGCATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGFAMILIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.BIGFAMILIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGFAMILIES' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.BIGFAMILIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCOMPANIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.BIGCOMPANIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCOMPANIES' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.BIGCOMPANIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecurrent() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ForecurrentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecurrent' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ForecurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TargetValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.TargetValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TargetValue' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.TargetValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BOM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.BOMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOM' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.BOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ForecaValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.ForecaValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForecaValue' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.ForecaValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TARGETEDFAMILY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.TARGETEDFAMILYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETEDFAMILY' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.TARGETEDFAMILYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesAmostras.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'SapSalesAmostras' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesAmostras.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.MDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMDNull()
            Me(Me.tableSapSalesAmostras.MDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.MMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMMNull()
            Me(Me.tableSapSalesAmostras.MMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.MAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMANull()
            Me(Me.tableSapSalesAmostras.MAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.StatsClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNumNull()
            Me(Me.tableSapSalesAmostras.StatsClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.StatsClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNull()
            Me(Me.tableSapSalesAmostras.StatsClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.StatsMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsMarketNull()
            Me(Me.tableSapSalesAmostras.StatsMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.InvClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNumNull()
            Me(Me.tableSapSalesAmostras.InvClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.InvClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNull()
            Me(Me.tableSapSalesAmostras.InvClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.InvMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvMarketNull()
            Me(Me.tableSapSalesAmostras.InvMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.FinalClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNumNull()
            Me(Me.tableSapSalesAmostras.FinalClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.FinalClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNull()
            Me(Me.tableSapSalesAmostras.FinalClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.FinalMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalMarketNull()
            Me(Me.tableSapSalesAmostras.FinalMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCompanyNull()
            Me(Me.tableSapSalesAmostras.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTrademarkNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.TrademarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTrademarkNull()
            Me(Me.tableSapSalesAmostras.TrademarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV1Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.NIV1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV1Null()
            Me(Me.tableSapSalesAmostras.NIV1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV2Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.NIV2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV2Null()
            Me(Me.tableSapSalesAmostras.NIV2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV3Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.NIV3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV3Null()
            Me(Me.tableSapSalesAmostras.NIV3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFAMILIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.FAMILIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFAMILIANull()
            Me(Me.tableSapSalesAmostras.FAMILIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTIPONull()
            Me(Me.tableSapSalesAmostras.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGRUPONull()
            Me(Me.tableSapSalesAmostras.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCATEGORIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.CATEGORIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCATEGORIANull()
            Me(Me.tableSapSalesAmostras.CATEGORIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYEARNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.VINTAGEYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYEARNull()
            Me(Me.tableSapSalesAmostras.VINTAGEYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPrice_ListNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Price_ListColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPrice_ListNull()
            Me(Me.tableSapSalesAmostras.Price_ListColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPACKIDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.PACKIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPACKIDNull()
            Me(Me.tableSapSalesAmostras.PACKIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPackageNull()
            Me(Me.tableSapSalesAmostras.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetYearNull()
            Me(Me.tableSapSalesAmostras.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_DateNull()
            Me(Me.tableSapSalesAmostras.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_OrganizationNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Sales_OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_OrganizationNull()
            Me(Me.tableSapSalesAmostras.Sales_OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBill_of_materialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Bill_of_materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBill_of_materialNull()
            Me(Me.tableSapSalesAmostras.Bill_of_materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.DivisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDivisionNull()
            Me(Me.tableSapSalesAmostras.DivisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrder_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Order_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrder_DocumentNull()
            Me(Me.tableSapSalesAmostras.Order_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBilling_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Billing_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBilling_DocumentNull()
            Me(Me.tableSapSalesAmostras.Billing_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_UnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Sales_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_UnitNull()
            Me(Me.tableSapSalesAmostras.Sales_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NameNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Material_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NameNull()
            Me(Me.tableSapSalesAmostras.Material_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NumberNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.Material_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NumberNull()
            Me(Me.tableSapSalesAmostras.Material_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsImmaterialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ImmaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetImmaterialNull()
            Me(Me.tableSapSalesAmostras.ImmaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableSapSalesAmostras.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRANGENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.RANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRANGENull()
            Me(Me.tableSapSalesAmostras.RANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsZZORDLSTPRECONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ZZORDLSTPRECOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetZZORDLSTPRECONull()
            Me(Me.tableSapSalesAmostras.ZZORDLSTPRECOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsZZGROUPNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ZZGROUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetZZGROUPNull()
            Me(Me.tableSapSalesAmostras.ZZGROUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IscategoriaidNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.categoriaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetcategoriaidNull()
            Me(Me.tableSapSalesAmostras.categoriaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.InHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandNull()
            Me(Me.tableSapSalesAmostras.InHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedNull()
            Me(Me.tableSapSalesAmostras.ShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandNull()
            Me(Me.tableSapSalesAmostras.ShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ValueInHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueInHandNull()
            Me(Me.tableSapSalesAmostras.ValueInHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ValueShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShippedNull()
            Me(Me.tableSapSalesAmostras.ValueShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ValueShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShipHandNull()
            Me(Me.tableSapSalesAmostras.ValueShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.InHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandUnitNull()
            Me(Me.tableSapSalesAmostras.InHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ShippedUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedUnitNull()
            Me(Me.tableSapSalesAmostras.ShippedUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ShipHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandUnitNull()
            Me(Me.tableSapSalesAmostras.ShipHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMarketClassNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.MarketClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMarketClassNull()
            Me(Me.tableSapSalesAmostras.MarketClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMTARTNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.MTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMTARTNull()
            Me(Me.tableSapSalesAmostras.MTARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsAUARTNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.AUARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetAUARTNull()
            Me(Me.tableSapSalesAmostras.AUARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPPMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.PPMDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPPMDNull()
            Me(Me.tableSapSalesAmostras.PPMDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_INVCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.PO_INVCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_INVCLINull()
            Me(Me.tableSapSalesAmostras.PO_INVCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_FINCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.PO_FINCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_FINCLINull()
            Me(Me.tableSapSalesAmostras.PO_FINCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYESNONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.VINTAGEYESNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYESNONull()
            Me(Me.tableSapSalesAmostras.VINTAGEYESNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGTYPENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.BIGTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGTYPENull()
            Me(Me.tableSapSalesAmostras.BIGTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCATNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.BIGCATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCATNull()
            Me(Me.tableSapSalesAmostras.BIGCATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGFAMILIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.BIGFAMILIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGFAMILIESNull()
            Me(Me.tableSapSalesAmostras.BIGFAMILIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCOMPANIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.BIGCOMPANIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCOMPANIESNull()
            Me(Me.tableSapSalesAmostras.BIGCOMPANIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecurrentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ForecurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecurrentNull()
            Me(Me.tableSapSalesAmostras.ForecurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTargetValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.TargetValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTargetValueNull()
            Me(Me.tableSapSalesAmostras.TargetValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBOMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.BOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBOMNull()
            Me(Me.tableSapSalesAmostras.BOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.ForecaValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaValueNull()
            Me(Me.tableSapSalesAmostras.ForecaValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTARGETEDFAMILYNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.TARGETEDFAMILYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTARGETEDFAMILYNull()
            Me(Me.tableSapSalesAmostras.TARGETEDFAMILYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesAmostras.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_RegionNull()
            Me(Me.tableSapSalesAmostras.RegionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SapSalesCompostosRow
        Inherits Global.System.Data.DataRow
        
        Private tableSapSalesCompostos As SapSalesCompostosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSapSalesCompostos = CType(Me.Table,SapSalesCompostosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.MDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MD' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.MDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MM() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.MMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MM' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.MMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.MAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MA' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.MAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.StatsClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClientNum' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.StatsClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.StatsClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClient' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.StatsClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.StatsMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsMarket' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.StatsMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.InvClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClientNum' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.InvClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.InvClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClient' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.InvClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.InvMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvMarket' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.InvMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.FinalClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClientNum' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.FinalClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.FinalClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClient' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.FinalClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.FinalMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalMarket' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.FinalMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Trademark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.TrademarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Trademark' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.TrademarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.NIV1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV1' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.NIV1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.NIV2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV2' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.NIV2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV3() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.NIV3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV3' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.NIV3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRUPO' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FAMILIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.FAMILIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILIA' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.FAMILIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CATEGORIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.CATEGORIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CATEGORIA' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.CATEGORIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.VINTAGEYEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYEAR' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.VINTAGEYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Price_List() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Price_ListColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price List' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Price_ListColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PACKID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.PACKIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PACKID' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.PACKIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Sales_OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Organization' in table 'SapSalesCompostos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Sales_OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Bill_of_material() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Bill_of_materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bill of material' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Bill_of_materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Division() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.DivisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Division' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Order_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Order_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order Document' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Order_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Sales_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Unit' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Sales_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Material_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Name' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Material_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Number() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Material_NumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Number' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Material_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.RANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RANGE' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.RANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.InHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHand' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.InHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Shipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shipped' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHand' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueInHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ValueInHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueInHand' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ValueInHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ValueShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipHand' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ValueShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ValueShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipped' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ValueShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.InHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHandUnit' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.InHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShippedUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ShippedUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShippedUnit' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ShippedUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ShipHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHandUnit' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ShipHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Foreca() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ForecaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foreca' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ForecaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecm() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ForecmColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecm' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ForecmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MarketClass() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.MarketClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketClass' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.MarketClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Billing_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.Billing_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing Document' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.Billing_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Immaterial() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ImmaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Immaterial' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ImmaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PPMD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.PPMDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPMD' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.PPMDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_INVCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.PO_INVCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_INVCLI' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.PO_INVCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_FINCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.PO_FINCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_FINCLI' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.PO_FINCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYESNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.VINTAGEYESNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYESNO' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.VINTAGEYESNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.BIGTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGTYPE' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.BIGTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.BIGCATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCAT' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.BIGCATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGFAMILIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.BIGFAMILIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGFAMILIES' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.BIGFAMILIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCOMPANIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.BIGCOMPANIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCOMPANIES' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.BIGCOMPANIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecurrent() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ForecurrentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecurrent' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ForecurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TargetValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.TargetValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TargetValue' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.TargetValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BOM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.BOMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOM' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.BOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ForecaValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.ForecaValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForecaValue' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.ForecaValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TARGETEDFAMILY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.TARGETEDFAMILYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETEDFAMILY' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.TARGETEDFAMILYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesCompostos.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'SapSalesCompostos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesCompostos.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.MDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMDNull()
            Me(Me.tableSapSalesCompostos.MDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.MMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMMNull()
            Me(Me.tableSapSalesCompostos.MMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.MAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMANull()
            Me(Me.tableSapSalesCompostos.MAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.StatsClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNumNull()
            Me(Me.tableSapSalesCompostos.StatsClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.StatsClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNull()
            Me(Me.tableSapSalesCompostos.StatsClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.StatsMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsMarketNull()
            Me(Me.tableSapSalesCompostos.StatsMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.InvClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNumNull()
            Me(Me.tableSapSalesCompostos.InvClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.InvClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNull()
            Me(Me.tableSapSalesCompostos.InvClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.InvMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvMarketNull()
            Me(Me.tableSapSalesCompostos.InvMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.FinalClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNumNull()
            Me(Me.tableSapSalesCompostos.FinalClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.FinalClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNull()
            Me(Me.tableSapSalesCompostos.FinalClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.FinalMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalMarketNull()
            Me(Me.tableSapSalesCompostos.FinalMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCompanyNull()
            Me(Me.tableSapSalesCompostos.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTrademarkNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.TrademarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTrademarkNull()
            Me(Me.tableSapSalesCompostos.TrademarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV1Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.NIV1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV1Null()
            Me(Me.tableSapSalesCompostos.NIV1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV2Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.NIV2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV2Null()
            Me(Me.tableSapSalesCompostos.NIV2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV3Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.NIV3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV3Null()
            Me(Me.tableSapSalesCompostos.NIV3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTIPONull()
            Me(Me.tableSapSalesCompostos.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGRUPONull()
            Me(Me.tableSapSalesCompostos.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFAMILIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.FAMILIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFAMILIANull()
            Me(Me.tableSapSalesCompostos.FAMILIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCATEGORIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.CATEGORIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCATEGORIANull()
            Me(Me.tableSapSalesCompostos.CATEGORIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYEARNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.VINTAGEYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYEARNull()
            Me(Me.tableSapSalesCompostos.VINTAGEYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPrice_ListNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Price_ListColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPrice_ListNull()
            Me(Me.tableSapSalesCompostos.Price_ListColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPACKIDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.PACKIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPACKIDNull()
            Me(Me.tableSapSalesCompostos.PACKIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPackageNull()
            Me(Me.tableSapSalesCompostos.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetYearNull()
            Me(Me.tableSapSalesCompostos.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_DateNull()
            Me(Me.tableSapSalesCompostos.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_OrganizationNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Sales_OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_OrganizationNull()
            Me(Me.tableSapSalesCompostos.Sales_OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBill_of_materialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Bill_of_materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBill_of_materialNull()
            Me(Me.tableSapSalesCompostos.Bill_of_materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.DivisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDivisionNull()
            Me(Me.tableSapSalesCompostos.DivisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrder_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Order_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrder_DocumentNull()
            Me(Me.tableSapSalesCompostos.Order_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_UnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Sales_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_UnitNull()
            Me(Me.tableSapSalesCompostos.Sales_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NameNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Material_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NameNull()
            Me(Me.tableSapSalesCompostos.Material_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NumberNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Material_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NumberNull()
            Me(Me.tableSapSalesCompostos.Material_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableSapSalesCompostos.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRANGENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.RANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRANGENull()
            Me(Me.tableSapSalesCompostos.RANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.InHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandNull()
            Me(Me.tableSapSalesCompostos.InHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedNull()
            Me(Me.tableSapSalesCompostos.ShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandNull()
            Me(Me.tableSapSalesCompostos.ShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ValueInHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueInHandNull()
            Me(Me.tableSapSalesCompostos.ValueInHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ValueShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShipHandNull()
            Me(Me.tableSapSalesCompostos.ValueShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ValueShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShippedNull()
            Me(Me.tableSapSalesCompostos.ValueShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.InHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandUnitNull()
            Me(Me.tableSapSalesCompostos.InHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ShippedUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedUnitNull()
            Me(Me.tableSapSalesCompostos.ShippedUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ShipHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandUnitNull()
            Me(Me.tableSapSalesCompostos.ShipHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ForecaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaNull()
            Me(Me.tableSapSalesCompostos.ForecaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecmNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ForecmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecmNull()
            Me(Me.tableSapSalesCompostos.ForecmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMarketClassNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.MarketClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMarketClassNull()
            Me(Me.tableSapSalesCompostos.MarketClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBilling_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.Billing_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBilling_DocumentNull()
            Me(Me.tableSapSalesCompostos.Billing_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsImmaterialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ImmaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetImmaterialNull()
            Me(Me.tableSapSalesCompostos.ImmaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPPMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.PPMDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPPMDNull()
            Me(Me.tableSapSalesCompostos.PPMDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_INVCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.PO_INVCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_INVCLINull()
            Me(Me.tableSapSalesCompostos.PO_INVCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_FINCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.PO_FINCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_FINCLINull()
            Me(Me.tableSapSalesCompostos.PO_FINCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYESNONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.VINTAGEYESNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYESNONull()
            Me(Me.tableSapSalesCompostos.VINTAGEYESNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGTYPENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.BIGTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGTYPENull()
            Me(Me.tableSapSalesCompostos.BIGTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCATNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.BIGCATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCATNull()
            Me(Me.tableSapSalesCompostos.BIGCATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGFAMILIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.BIGFAMILIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGFAMILIESNull()
            Me(Me.tableSapSalesCompostos.BIGFAMILIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCOMPANIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.BIGCOMPANIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCOMPANIESNull()
            Me(Me.tableSapSalesCompostos.BIGCOMPANIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecurrentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ForecurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecurrentNull()
            Me(Me.tableSapSalesCompostos.ForecurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTargetValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.TargetValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTargetValueNull()
            Me(Me.tableSapSalesCompostos.TargetValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBOMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.BOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBOMNull()
            Me(Me.tableSapSalesCompostos.BOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.ForecaValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaValueNull()
            Me(Me.tableSapSalesCompostos.ForecaValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTARGETEDFAMILYNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.TARGETEDFAMILYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTARGETEDFAMILYNull()
            Me(Me.tableSapSalesCompostos.TARGETEDFAMILYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesCompostos.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_RegionNull()
            Me(Me.tableSapSalesCompostos.RegionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SapTipoListaPrecosRow
        Inherits Global.System.Data.DataRow
        
        Private tableSapTipoListaPrecos As SapTipoListaPrecosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSapTipoListaPrecos = CType(Me.Table,SapTipoListaPrecosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PLTYP() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapTipoListaPrecos.PLTYPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLTYP' in table 'SapTipoListaPrecos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapTipoListaPrecos.PLTYPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PTEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapTipoListaPrecos.PTEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PTEXT' in table 'SapTipoListaPrecos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapTipoListaPrecos.PTEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPLTYPNull() As Boolean
            Return Me.IsNull(Me.tableSapTipoListaPrecos.PLTYPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPLTYPNull()
            Me(Me.tableSapTipoListaPrecos.PLTYPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPTEXTNull() As Boolean
            Return Me.IsNull(Me.tableSapTipoListaPrecos.PTEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPTEXTNull()
            Me(Me.tableSapTipoListaPrecos.PTEXTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SapSalesOldReservesRow
        Inherits Global.System.Data.DataRow
        
        Private tableSapSalesOldReserves As SapSalesOldReservesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSapSalesOldReserves = CType(Me.Table,SapSalesOldReservesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.MDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MD' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.MDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MM() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.MMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MM' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.MMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.MAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MA' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.MAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.StatsClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClientNum' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.StatsClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.StatsClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClient' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.StatsClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.StatsMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsMarket' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.StatsMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.InvClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClientNum' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.InvClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.InvClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClient' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.InvClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.InvMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvMarket' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.InvMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.FinalClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClientNum' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.FinalClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.FinalClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClient' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.FinalClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.FinalMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalMarket' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.FinalMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Trademark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.TrademarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Trademark' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.TrademarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.NIV1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV1' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.NIV1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.NIV2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV2' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.NIV2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV3() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.NIV3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV3' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.NIV3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRUPO' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FAMILIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.FAMILIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILIA' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.FAMILIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CATEGORIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.CATEGORIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CATEGORIA' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.CATEGORIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.VINTAGEYEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYEAR' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.VINTAGEYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Price_List() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Price_ListColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price List' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Price_ListColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PACKID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.PACKIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PACKID' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.PACKIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Sales_OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Organization' in table 'SapSalesOldReserves' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Sales_OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Bill_of_material() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Bill_of_materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bill of material' in table 'SapSalesOldReserves' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Bill_of_materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Division() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.DivisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Division' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Order_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Order_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order Document' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Order_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Sales_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Unit' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Sales_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Material_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Name' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Material_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Number() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Material_NumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Number' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Material_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.RANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RANGE' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.RANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.InHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHand' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.InHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Shipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shipped' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHand' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueInHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ValueInHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueInHand' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ValueInHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ValueShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipHand' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ValueShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ValueShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipped' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ValueShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.InHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHandUnit' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.InHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShippedUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ShippedUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShippedUnit' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ShippedUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ShipHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHandUnit' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ShipHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Foreca() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ForecaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foreca' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ForecaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecm() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ForecmColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecm' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ForecmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MarketClass() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.MarketClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketClass' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.MarketClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Billing_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.Billing_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing Document' in table 'SapSalesOldReserves' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.Billing_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Immaterial() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ImmaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Immaterial' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ImmaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PPMD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.PPMDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPMD' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.PPMDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_INVCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.PO_INVCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_INVCLI' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.PO_INVCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_FINCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.PO_FINCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_FINCLI' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.PO_FINCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYESNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.VINTAGEYESNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYESNO' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.VINTAGEYESNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.BIGTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGTYPE' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.BIGTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.BIGCATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCAT' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.BIGCATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGFAMILIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.BIGFAMILIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGFAMILIES' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.BIGFAMILIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCOMPANIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.BIGCOMPANIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCOMPANIES' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.BIGCOMPANIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecurrent() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ForecurrentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecurrent' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ForecurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TargetValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.TargetValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TargetValue' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.TargetValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BOM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.BOMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOM' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.BOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ForecaValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.ForecaValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForecaValue' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.ForecaValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TARGETEDFAMILY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.TARGETEDFAMILYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETEDFAMILY' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.TARGETEDFAMILYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesOldReserves.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'SapSalesOldReserves' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesOldReserves.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.MDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMDNull()
            Me(Me.tableSapSalesOldReserves.MDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.MMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMMNull()
            Me(Me.tableSapSalesOldReserves.MMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.MAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMANull()
            Me(Me.tableSapSalesOldReserves.MAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.StatsClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNumNull()
            Me(Me.tableSapSalesOldReserves.StatsClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.StatsClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNull()
            Me(Me.tableSapSalesOldReserves.StatsClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.StatsMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsMarketNull()
            Me(Me.tableSapSalesOldReserves.StatsMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.InvClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNumNull()
            Me(Me.tableSapSalesOldReserves.InvClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.InvClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNull()
            Me(Me.tableSapSalesOldReserves.InvClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.InvMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvMarketNull()
            Me(Me.tableSapSalesOldReserves.InvMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.FinalClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNumNull()
            Me(Me.tableSapSalesOldReserves.FinalClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.FinalClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNull()
            Me(Me.tableSapSalesOldReserves.FinalClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.FinalMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalMarketNull()
            Me(Me.tableSapSalesOldReserves.FinalMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCompanyNull()
            Me(Me.tableSapSalesOldReserves.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTrademarkNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.TrademarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTrademarkNull()
            Me(Me.tableSapSalesOldReserves.TrademarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV1Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.NIV1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV1Null()
            Me(Me.tableSapSalesOldReserves.NIV1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV2Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.NIV2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV2Null()
            Me(Me.tableSapSalesOldReserves.NIV2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV3Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.NIV3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV3Null()
            Me(Me.tableSapSalesOldReserves.NIV3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTIPONull()
            Me(Me.tableSapSalesOldReserves.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGRUPONull()
            Me(Me.tableSapSalesOldReserves.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFAMILIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.FAMILIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFAMILIANull()
            Me(Me.tableSapSalesOldReserves.FAMILIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCATEGORIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.CATEGORIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCATEGORIANull()
            Me(Me.tableSapSalesOldReserves.CATEGORIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYEARNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.VINTAGEYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYEARNull()
            Me(Me.tableSapSalesOldReserves.VINTAGEYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPrice_ListNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Price_ListColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPrice_ListNull()
            Me(Me.tableSapSalesOldReserves.Price_ListColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPACKIDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.PACKIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPACKIDNull()
            Me(Me.tableSapSalesOldReserves.PACKIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPackageNull()
            Me(Me.tableSapSalesOldReserves.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetYearNull()
            Me(Me.tableSapSalesOldReserves.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_DateNull()
            Me(Me.tableSapSalesOldReserves.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_OrganizationNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Sales_OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_OrganizationNull()
            Me(Me.tableSapSalesOldReserves.Sales_OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBill_of_materialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Bill_of_materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBill_of_materialNull()
            Me(Me.tableSapSalesOldReserves.Bill_of_materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.DivisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDivisionNull()
            Me(Me.tableSapSalesOldReserves.DivisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrder_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Order_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrder_DocumentNull()
            Me(Me.tableSapSalesOldReserves.Order_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_UnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Sales_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_UnitNull()
            Me(Me.tableSapSalesOldReserves.Sales_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NameNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Material_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NameNull()
            Me(Me.tableSapSalesOldReserves.Material_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NumberNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Material_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NumberNull()
            Me(Me.tableSapSalesOldReserves.Material_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableSapSalesOldReserves.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRANGENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.RANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRANGENull()
            Me(Me.tableSapSalesOldReserves.RANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.InHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandNull()
            Me(Me.tableSapSalesOldReserves.InHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedNull()
            Me(Me.tableSapSalesOldReserves.ShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandNull()
            Me(Me.tableSapSalesOldReserves.ShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ValueInHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueInHandNull()
            Me(Me.tableSapSalesOldReserves.ValueInHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ValueShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShipHandNull()
            Me(Me.tableSapSalesOldReserves.ValueShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ValueShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShippedNull()
            Me(Me.tableSapSalesOldReserves.ValueShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.InHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandUnitNull()
            Me(Me.tableSapSalesOldReserves.InHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ShippedUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedUnitNull()
            Me(Me.tableSapSalesOldReserves.ShippedUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ShipHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandUnitNull()
            Me(Me.tableSapSalesOldReserves.ShipHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ForecaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaNull()
            Me(Me.tableSapSalesOldReserves.ForecaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecmNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ForecmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecmNull()
            Me(Me.tableSapSalesOldReserves.ForecmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMarketClassNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.MarketClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMarketClassNull()
            Me(Me.tableSapSalesOldReserves.MarketClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBilling_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.Billing_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBilling_DocumentNull()
            Me(Me.tableSapSalesOldReserves.Billing_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsImmaterialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ImmaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetImmaterialNull()
            Me(Me.tableSapSalesOldReserves.ImmaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPPMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.PPMDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPPMDNull()
            Me(Me.tableSapSalesOldReserves.PPMDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_INVCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.PO_INVCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_INVCLINull()
            Me(Me.tableSapSalesOldReserves.PO_INVCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_FINCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.PO_FINCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_FINCLINull()
            Me(Me.tableSapSalesOldReserves.PO_FINCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYESNONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.VINTAGEYESNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYESNONull()
            Me(Me.tableSapSalesOldReserves.VINTAGEYESNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGTYPENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.BIGTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGTYPENull()
            Me(Me.tableSapSalesOldReserves.BIGTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCATNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.BIGCATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCATNull()
            Me(Me.tableSapSalesOldReserves.BIGCATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGFAMILIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.BIGFAMILIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGFAMILIESNull()
            Me(Me.tableSapSalesOldReserves.BIGFAMILIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCOMPANIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.BIGCOMPANIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCOMPANIESNull()
            Me(Me.tableSapSalesOldReserves.BIGCOMPANIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecurrentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ForecurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecurrentNull()
            Me(Me.tableSapSalesOldReserves.ForecurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTargetValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.TargetValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTargetValueNull()
            Me(Me.tableSapSalesOldReserves.TargetValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBOMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.BOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBOMNull()
            Me(Me.tableSapSalesOldReserves.BOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.ForecaValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaValueNull()
            Me(Me.tableSapSalesOldReserves.ForecaValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTARGETEDFAMILYNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.TARGETEDFAMILYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTARGETEDFAMILYNull()
            Me(Me.tableSapSalesOldReserves.TARGETEDFAMILYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesOldReserves.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_RegionNull()
            Me(Me.tableSapSalesOldReserves.RegionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SapSalesGermanWarehouseRow
        Inherits Global.System.Data.DataRow
        
        Private tableSapSalesGermanWarehouse As SapSalesGermanWarehouseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSapSalesGermanWarehouse = CType(Me.Table,SapSalesGermanWarehouseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.MDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MD' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.MDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MM() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.MMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MM' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.MMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.MAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MA' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.MAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.StatsClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClientNum' in table 'SapSalesGermanWarehouse' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.StatsClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.StatsClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsClient' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.StatsClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property StatsMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.StatsMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatsMarket' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.StatsMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.InvClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClientNum' in table 'SapSalesGermanWarehouse' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.InvClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.InvClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvClient' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.InvClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InvMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.InvMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvMarket' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.InvMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClientNum() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.FinalClientNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClientNum' in table 'SapSalesGermanWarehouse' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.FinalClientNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalClient() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.FinalClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalClient' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.FinalClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FinalMarket() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.FinalMarketColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalMarket' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.FinalMarketColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Trademark() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.TrademarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Trademark' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.TrademarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV1() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.NIV1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV1' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.NIV1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.NIV2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV2' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.NIV2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NIV3() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.NIV3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIV3' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.NIV3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIPO' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property GRUPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.GRUPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GRUPO' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.GRUPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property FAMILIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.FAMILIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAMILIA' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.FAMILIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CATEGORIA() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.CATEGORIAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CATEGORIA' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.CATEGORIAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYEAR() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.VINTAGEYEARColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYEAR' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.VINTAGEYEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Price_List() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Price_ListColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Price List' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Price_ListColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PACKID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.PACKIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PACKID' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.PACKIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Year() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.YearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Year' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Organization() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Sales_OrganizationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Organization' in table 'SapSalesGermanWarehouse' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Sales_OrganizationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Bill_of_material() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Bill_of_materialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bill of material' in table 'SapSalesGermanWarehouse' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Bill_of_materialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Division() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.DivisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Division' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.DivisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Order_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Order_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order Document' in table 'SapSalesGermanWarehouse' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Order_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Sales_Unit() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Sales_UnitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sales Unit' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Sales_UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Material_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Name' in table 'SapSalesGermanWarehouse' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Material_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Material_Number() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Material_NumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Material Number' in table 'SapSalesGermanWarehouse' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Material_NumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Currency() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.CurrencyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.CurrencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RANGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.RANGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RANGE' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.RANGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.InHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHand' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.InHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Shipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shipped' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHand' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueInHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ValueInHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueInHand' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ValueInHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipHand() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ValueShipHandColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipHand' in table 'SapSalesGermanWarehouse' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ValueShipHandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ValueShipped() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ValueShippedColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ValueShipped' in table 'SapSalesGermanWarehouse' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ValueShippedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property InHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.InHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InHandUnit' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.InHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShippedUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ShippedUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShippedUnit' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ShippedUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ShipHandUnit() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ShipHandUnitColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipHandUnit' in table 'SapSalesGermanWarehouse' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ShipHandUnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Foreca() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ForecaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Foreca' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ForecaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecm() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ForecmColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecm' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ForecmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MarketClass() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.MarketClassColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarketClass' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.MarketClassColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Billing_Document() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.Billing_DocumentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billing Document' in table 'SapSalesGermanWarehouse' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.Billing_DocumentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Immaterial() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ImmaterialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Immaterial' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ImmaterialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PPMD() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.PPMDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PPMD' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.PPMDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_INVCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.PO_INVCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_INVCLI' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.PO_INVCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property PO_FINCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.PO_FINCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PO_FINCLI' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.PO_FINCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property VINTAGEYESNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.VINTAGEYESNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VINTAGEYESNO' in table 'SapSalesGermanWarehouse' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.VINTAGEYESNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.BIGTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGTYPE' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.BIGTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.BIGCATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCAT' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.BIGCATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGFAMILIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.BIGFAMILIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGFAMILIES' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.BIGFAMILIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BIGCOMPANIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.BIGCOMPANIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BIGCOMPANIES' in table 'SapSalesGermanWarehouse' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.BIGCOMPANIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property Forecurrent() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ForecurrentColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Forecurrent' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ForecurrentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TargetValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.TargetValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TargetValue' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.TargetValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BOM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.BOMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BOM' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.BOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ForecaValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.ForecaValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ForecaValue' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.ForecaValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property TARGETEDFAMILY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.TARGETEDFAMILYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETEDFAMILY' in table 'SapSalesGermanWarehouse' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.TARGETEDFAMILYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _Region() As String
            Get
                Try 
                    Return CType(Me(Me.tableSapSalesGermanWarehouse.RegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Region' in table 'SapSalesGermanWarehouse' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSapSalesGermanWarehouse.RegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.MDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMDNull()
            Me(Me.tableSapSalesGermanWarehouse.MDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.MMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMMNull()
            Me(Me.tableSapSalesGermanWarehouse.MMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.MAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMANull()
            Me(Me.tableSapSalesGermanWarehouse.MAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.StatsClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNumNull()
            Me(Me.tableSapSalesGermanWarehouse.StatsClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.StatsClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsClientNull()
            Me(Me.tableSapSalesGermanWarehouse.StatsClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsStatsMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.StatsMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetStatsMarketNull()
            Me(Me.tableSapSalesGermanWarehouse.StatsMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.InvClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNumNull()
            Me(Me.tableSapSalesGermanWarehouse.InvClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.InvClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvClientNull()
            Me(Me.tableSapSalesGermanWarehouse.InvClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInvMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.InvMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInvMarketNull()
            Me(Me.tableSapSalesGermanWarehouse.InvMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNumNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.FinalClientNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNumNull()
            Me(Me.tableSapSalesGermanWarehouse.FinalClientNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalClientNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.FinalClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalClientNull()
            Me(Me.tableSapSalesGermanWarehouse.FinalClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFinalMarketNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.FinalMarketColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFinalMarketNull()
            Me(Me.tableSapSalesGermanWarehouse.FinalMarketColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCompanyNull()
            Me(Me.tableSapSalesGermanWarehouse.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTrademarkNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.TrademarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTrademarkNull()
            Me(Me.tableSapSalesGermanWarehouse.TrademarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV1Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.NIV1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV1Null()
            Me(Me.tableSapSalesGermanWarehouse.NIV1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV2Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.NIV2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV2Null()
            Me(Me.tableSapSalesGermanWarehouse.NIV2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNIV3Null() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.NIV3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNIV3Null()
            Me(Me.tableSapSalesGermanWarehouse.NIV3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTIPONull()
            Me(Me.tableSapSalesGermanWarehouse.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsGRUPONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.GRUPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetGRUPONull()
            Me(Me.tableSapSalesGermanWarehouse.GRUPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsFAMILIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.FAMILIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetFAMILIANull()
            Me(Me.tableSapSalesGermanWarehouse.FAMILIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCATEGORIANull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.CATEGORIAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCATEGORIANull()
            Me(Me.tableSapSalesGermanWarehouse.CATEGORIAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYEARNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.VINTAGEYEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYEARNull()
            Me(Me.tableSapSalesGermanWarehouse.VINTAGEYEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPrice_ListNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Price_ListColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPrice_ListNull()
            Me(Me.tableSapSalesGermanWarehouse.Price_ListColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPACKIDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.PACKIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPACKIDNull()
            Me(Me.tableSapSalesGermanWarehouse.PACKIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPackageNull()
            Me(Me.tableSapSalesGermanWarehouse.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsYearNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.YearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetYearNull()
            Me(Me.tableSapSalesGermanWarehouse.YearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_DateNull()
            Me(Me.tableSapSalesGermanWarehouse.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_OrganizationNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Sales_OrganizationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_OrganizationNull()
            Me(Me.tableSapSalesGermanWarehouse.Sales_OrganizationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBill_of_materialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Bill_of_materialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBill_of_materialNull()
            Me(Me.tableSapSalesGermanWarehouse.Bill_of_materialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.DivisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDivisionNull()
            Me(Me.tableSapSalesGermanWarehouse.DivisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsOrder_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Order_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetOrder_DocumentNull()
            Me(Me.tableSapSalesGermanWarehouse.Order_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSales_UnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Sales_UnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSales_UnitNull()
            Me(Me.tableSapSalesGermanWarehouse.Sales_UnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NameNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Material_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NameNull()
            Me(Me.tableSapSalesGermanWarehouse.Material_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMaterial_NumberNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Material_NumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMaterial_NumberNull()
            Me(Me.tableSapSalesGermanWarehouse.Material_NumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCurrencyNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.CurrencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCurrencyNull()
            Me(Me.tableSapSalesGermanWarehouse.CurrencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsRANGENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.RANGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetRANGENull()
            Me(Me.tableSapSalesGermanWarehouse.RANGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.InHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandNull()
            Me(Me.tableSapSalesGermanWarehouse.InHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedNull()
            Me(Me.tableSapSalesGermanWarehouse.ShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandNull()
            Me(Me.tableSapSalesGermanWarehouse.ShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueInHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ValueInHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueInHandNull()
            Me(Me.tableSapSalesGermanWarehouse.ValueInHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShipHandNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ValueShipHandColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShipHandNull()
            Me(Me.tableSapSalesGermanWarehouse.ValueShipHandColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsValueShippedNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ValueShippedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetValueShippedNull()
            Me(Me.tableSapSalesGermanWarehouse.ValueShippedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsInHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.InHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetInHandUnitNull()
            Me(Me.tableSapSalesGermanWarehouse.InHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShippedUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ShippedUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShippedUnitNull()
            Me(Me.tableSapSalesGermanWarehouse.ShippedUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsShipHandUnitNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ShipHandUnitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetShipHandUnitNull()
            Me(Me.tableSapSalesGermanWarehouse.ShipHandUnitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ForecaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaNull()
            Me(Me.tableSapSalesGermanWarehouse.ForecaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecmNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ForecmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecmNull()
            Me(Me.tableSapSalesGermanWarehouse.ForecmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMarketClassNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.MarketClassColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMarketClassNull()
            Me(Me.tableSapSalesGermanWarehouse.MarketClassColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBilling_DocumentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.Billing_DocumentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBilling_DocumentNull()
            Me(Me.tableSapSalesGermanWarehouse.Billing_DocumentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsImmaterialNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ImmaterialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetImmaterialNull()
            Me(Me.tableSapSalesGermanWarehouse.ImmaterialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPPMDNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.PPMDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPPMDNull()
            Me(Me.tableSapSalesGermanWarehouse.PPMDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_INVCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.PO_INVCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_INVCLINull()
            Me(Me.tableSapSalesGermanWarehouse.PO_INVCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsPO_FINCLINull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.PO_FINCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetPO_FINCLINull()
            Me(Me.tableSapSalesGermanWarehouse.PO_FINCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsVINTAGEYESNONull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.VINTAGEYESNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetVINTAGEYESNONull()
            Me(Me.tableSapSalesGermanWarehouse.VINTAGEYESNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGTYPENull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.BIGTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGTYPENull()
            Me(Me.tableSapSalesGermanWarehouse.BIGTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCATNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.BIGCATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCATNull()
            Me(Me.tableSapSalesGermanWarehouse.BIGCATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGFAMILIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.BIGFAMILIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGFAMILIESNull()
            Me(Me.tableSapSalesGermanWarehouse.BIGFAMILIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBIGCOMPANIESNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.BIGCOMPANIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBIGCOMPANIESNull()
            Me(Me.tableSapSalesGermanWarehouse.BIGCOMPANIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecurrentNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ForecurrentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecurrentNull()
            Me(Me.tableSapSalesGermanWarehouse.ForecurrentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTargetValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.TargetValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTargetValueNull()
            Me(Me.tableSapSalesGermanWarehouse.TargetValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsBOMNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.BOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetBOMNull()
            Me(Me.tableSapSalesGermanWarehouse.BOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsForecaValueNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.ForecaValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetForecaValueNull()
            Me(Me.tableSapSalesGermanWarehouse.ForecaValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsTARGETEDFAMILYNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.TARGETEDFAMILYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetTARGETEDFAMILYNull()
            Me(Me.tableSapSalesGermanWarehouse.TARGETEDFAMILYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_RegionNull() As Boolean
            Return Me.IsNull(Me.tableSapSalesGermanWarehouse.RegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_RegionNull()
            Me(Me.tableSapSalesGermanWarehouse.RegionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class SapSalesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SapSalesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As SapSalesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As SapSalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class SapSalesAmostrasRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SapSalesAmostrasRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As SapSalesAmostrasRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As SapSalesAmostrasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class SapSalesCompostosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SapSalesCompostosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As SapSalesCompostosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As SapSalesCompostosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class SapTipoListaPrecosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SapTipoListaPrecosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As SapTipoListaPrecosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As SapTipoListaPrecosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class SapSalesOldReservesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SapSalesOldReservesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As SapSalesOldReservesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As SapSalesOldReservesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class SapSalesGermanWarehouseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SapSalesGermanWarehouseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As SapSalesGermanWarehouseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As SapSalesGermanWarehouseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CommercialSystemDataSet2TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SapSalesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SapSales"
            tableMapping.ColumnMappings.Add("MD", "MD")
            tableMapping.ColumnMappings.Add("MM", "MM")
            tableMapping.ColumnMappings.Add("MA", "MA")
            tableMapping.ColumnMappings.Add("StatsClientNum", "StatsClientNum")
            tableMapping.ColumnMappings.Add("StatsClient", "StatsClient")
            tableMapping.ColumnMappings.Add("StatsMarket", "StatsMarket")
            tableMapping.ColumnMappings.Add("InvClientNum", "InvClientNum")
            tableMapping.ColumnMappings.Add("InvClient", "InvClient")
            tableMapping.ColumnMappings.Add("InvMarket", "InvMarket")
            tableMapping.ColumnMappings.Add("FinalClientNum", "FinalClientNum")
            tableMapping.ColumnMappings.Add("FinalClient", "FinalClient")
            tableMapping.ColumnMappings.Add("FinalMarket", "FinalMarket")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("Trademark", "Trademark")
            tableMapping.ColumnMappings.Add("NIV1", "NIV1")
            tableMapping.ColumnMappings.Add("NIV2", "NIV2")
            tableMapping.ColumnMappings.Add("NIV3", "NIV3")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            tableMapping.ColumnMappings.Add("FAMILIA", "FAMILIA")
            tableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA")
            tableMapping.ColumnMappings.Add("VINTAGEYEAR", "VINTAGEYEAR")
            tableMapping.ColumnMappings.Add("Price List", "Price List")
            tableMapping.ColumnMappings.Add("PACKID", "PACKID")
            tableMapping.ColumnMappings.Add("Package", "Package")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Sales Organization", "Sales Organization")
            tableMapping.ColumnMappings.Add("Bill of material", "Bill of material")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("Order Document", "Order Document")
            tableMapping.ColumnMappings.Add("Sales Unit", "Sales Unit")
            tableMapping.ColumnMappings.Add("Material Name", "Material Name")
            tableMapping.ColumnMappings.Add("Material Number", "Material Number")
            tableMapping.ColumnMappings.Add("Currency", "Currency")
            tableMapping.ColumnMappings.Add("RANGE", "RANGE")
            tableMapping.ColumnMappings.Add("InHand", "InHand")
            tableMapping.ColumnMappings.Add("Shipped", "Shipped")
            tableMapping.ColumnMappings.Add("ShipHand", "ShipHand")
            tableMapping.ColumnMappings.Add("ValueInHand", "ValueInHand")
            tableMapping.ColumnMappings.Add("ValueShipHand", "ValueShipHand")
            tableMapping.ColumnMappings.Add("ValueShipped", "ValueShipped")
            tableMapping.ColumnMappings.Add("InHandUnit", "InHandUnit")
            tableMapping.ColumnMappings.Add("ShippedUnit", "ShippedUnit")
            tableMapping.ColumnMappings.Add("ShipHandUnit", "ShipHandUnit")
            tableMapping.ColumnMappings.Add("Foreca", "Foreca")
            tableMapping.ColumnMappings.Add("Forecm", "Forecm")
            tableMapping.ColumnMappings.Add("MarketClass", "MarketClass")
            tableMapping.ColumnMappings.Add("Billing Document", "Billing Document")
            tableMapping.ColumnMappings.Add("Immaterial", "Immaterial")
            tableMapping.ColumnMappings.Add("PPMD", "PPMD")
            tableMapping.ColumnMappings.Add("PO_INVCLI", "PO_INVCLI")
            tableMapping.ColumnMappings.Add("PO_FINCLI", "PO_FINCLI")
            tableMapping.ColumnMappings.Add("VINTAGEYESNO", "VINTAGEYESNO")
            tableMapping.ColumnMappings.Add("BIGTYPE", "BIGTYPE")
            tableMapping.ColumnMappings.Add("BIGCAT", "BIGCAT")
            tableMapping.ColumnMappings.Add("BIGFAMILIES", "BIGFAMILIES")
            tableMapping.ColumnMappings.Add("BIGCOMPANIES", "BIGCOMPANIES")
            tableMapping.ColumnMappings.Add("Forecurrent", "Forecurrent")
            tableMapping.ColumnMappings.Add("TargetValue", "TargetValue")
            tableMapping.ColumnMappings.Add("BOM", "BOM")
            tableMapping.ColumnMappings.Add("ForecaValue", "ForecaValue")
            tableMapping.ColumnMappings.Add("TARGETEDFAMILY", "TARGETEDFAMILY")
            tableMapping.ColumnMappings.Add("Region", "Region")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[SapSales] ([MD], [MM], [MA], [StatsCl"& _ 
                "ientNum], [StatsClient], [StatsMarket], [InvClientNum], [InvClient], [InvMarket]"& _ 
                ", [FinalClientNum], [FinalClient], [FinalMarket], [Company], [Trademark], [NIV1]"& _ 
                ", [NIV2], [NIV3], [TIPO], [GRUPO], [FAMILIA], [CATEGORIA], [VINTAGEYEAR], [Price"& _ 
                " List], [PACKID], [Package], [Year], [Date], [Sales Organization], [Bill of mate"& _ 
                "rial], [Division], [Order Document], [Sales Unit], [Material Name], [Material Nu"& _ 
                "mber], [Currency], [RANGE], [InHand], [Shipped], [ShipHand], [ValueInHand], [Val"& _ 
                "ueShipHand], [ValueShipped], [InHandUnit], [ShippedUnit], [ShipHandUnit], [Forec"& _ 
                "a], [Forecm], [MarketClass], [Billing Document], [Immaterial], [PPMD], [PO_INVCL"& _ 
                "I], [PO_FINCLI], [VINTAGEYESNO], [BIGTYPE], [BIGCAT], [BIGFAMILIES], [BIGCOMPANI"& _ 
                "ES], [Forecurrent], [TargetValue], [BOM], [ForecaValue], [TARGETEDFAMILY]) VALUE"& _ 
                "S (@MD, @MM, @MA, @StatsClientNum, @StatsClient, @StatsMarket, @InvClientNum, @I"& _ 
                "nvClient, @InvMarket, @FinalClientNum, @FinalClient, @FinalMarket, @Company, @Tr"& _ 
                "ademark, @NIV1, @NIV2, @NIV3, @TIPO, @GRUPO, @FAMILIA, @CATEGORIA, @VINTAGEYEAR,"& _ 
                " @Price_List, @PACKID, @Package, @Year, @Date, @Sales_Organization, @Bill_of_mat"& _ 
                "erial, @Division, @Order_Document, @Sales_Unit, @Material_Name, @Material_Number"& _ 
                ", @Currency, @RANGE, @InHand, @Shipped, @ShipHand, @ValueInHand, @ValueShipHand,"& _ 
                " @ValueShipped, @InHandUnit, @ShippedUnit, @ShipHandUnit, @Foreca, @Forecm, @Mar"& _ 
                "ketClass, @Billing_Document, @Immaterial, @PPMD, @PO_INVCLI, @PO_FINCLI, @VINTAG"& _ 
                "EYESNO, @BIGTYPE, @BIGCAT, @BIGFAMILIES, @BIGCOMPANIES, @Forecurrent, @TargetVal"& _ 
                "ue, @BOM, @ForecaValue, @TARGETEDFAMILY)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MM"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Company"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Trademark"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Trademark"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV1"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV2"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV3"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TIPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TIPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GRUPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GRUPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FAMILIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FAMILIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CATEGORIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CATEGORIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYEAR"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYEAR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Price_List"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Price List"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PACKID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PACKID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Package"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Package"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Year"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "Date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Organization"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Organization"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Bill_of_material"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Bill of material"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Division"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Division"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Order Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Unit"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Unit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Number"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Number"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Currency"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RANGE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RANGE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Shipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Shipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueInHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueInHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShippedUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShippedUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Foreca"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Foreca"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecm"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MarketClass"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MarketClass"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Billing_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Billing Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Immaterial"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Immaterial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PPMD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PPMD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_INVCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_INVCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_FINCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_FINCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYESNO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYESNO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGTYPE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCAT"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGFAMILIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGFAMILIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCOMPANIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCOMPANIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecurrent"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecurrent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TargetValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "TargetValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BOM"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "BOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ForecaValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ForecaValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TARGETEDFAMILY"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TARGETEDFAMILY"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CommercialSystem.My.MySettings.Default.SapCSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum,"& _ 
                " InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Tradem"& _ 
                "ark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, VINTAGEYEAR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                [Price List], PACKID, Package, Year, [DATE], [Sales Organization"& _ 
                "], [Bill OF material], Division, [ORDER Document], [Sales Unit], [Material Name]"& _ 
                ", [Material Number], Currency, RANGE, InHand, Shipped, ShipHand, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, S"& _ 
                "hipHandUnit, Foreca, Forecm, MarketClass, [Billing Document], Immaterial, PPMD, "& _ 
                "PO_INVCLI, PO_FINCLI, VINTAGEYESNO, BIGTYPE, BIGCAT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDF"& _ 
                "AMILY, region"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SapSales"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CommercialSystemDataSet2.SapSalesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CommercialSystemDataSet2.SapSalesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CommercialSystemDataSet2.SapSalesDataTable = New CommercialSystemDataSet2.SapSalesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CommercialSystemDataSet2.SapSalesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CommercialSystemDataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "SapSales")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Global.System.Nullable(Of Decimal),  _
                    ByVal Shipped As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueInHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipped As Global.System.Nullable(Of Decimal),  _
                    ByVal InHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShippedUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal Foreca As Global.System.Nullable(Of Decimal),  _
                    ByVal Forecm As Global.System.Nullable(Of Decimal),  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Global.System.Nullable(Of Decimal),  _
                    ByVal TargetValue As Global.System.Nullable(Of Decimal),  _
                    ByVal BOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ForecaValue As Global.System.Nullable(Of Decimal),  _
                    ByVal TARGETEDFAMILY As String) As Integer
            If (MD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MD,String)
            End If
            If (MM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MM,String)
            End If
            If (MA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MA,String)
            End If
            If (StatsClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StatsClientNum,String)
            End If
            If (StatsClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(StatsClient,String)
            End If
            If (StatsMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StatsMarket,String)
            End If
            If (InvClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(InvClientNum,String)
            End If
            If (InvClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(InvClient,String)
            End If
            If (InvMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(InvMarket,String)
            End If
            If (FinalClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FinalClientNum,String)
            End If
            If (FinalClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FinalClient,String)
            End If
            If (FinalMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FinalMarket,String)
            End If
            If (Company Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Company,String)
            End If
            If (Trademark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Trademark,String)
            End If
            If (NIV1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NIV1,String)
            End If
            If (NIV2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NIV2,String)
            End If
            If (NIV3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NIV3,String)
            End If
            If (TIPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TIPO,String)
            End If
            If (GRUPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(GRUPO,String)
            End If
            If (FAMILIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(FAMILIA,String)
            End If
            If (CATEGORIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CATEGORIA,String)
            End If
            If (VINTAGEYEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(VINTAGEYEAR,String)
            End If
            If (Price_List Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Price_List,String)
            End If
            If (PACKID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PACKID,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Package,String)
            End If
            If (Year Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Year,String)
            End If
            If (_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Sales_Organization Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Sales_Organization,String)
            End If
            If (Bill_of_material Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Bill_of_material,String)
            End If
            If (Division Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Division,String)
            End If
            If (Order_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Order_Document,String)
            End If
            If (Sales_Unit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Sales_Unit,String)
            End If
            If (Material_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Material_Name,String)
            End If
            If (Material_Number Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Material_Number,String)
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Currency,String)
            End If
            If (RANGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(RANGE,String)
            End If
            If (InHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(InHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Shipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Shipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (ShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(ShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (ValueInHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ValueInHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (ValueShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(ValueShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (ValueShipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(ValueShipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (InHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(InHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ShippedUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(ShippedUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (ShipHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(ShipHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Foreca.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Foreca.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Forecm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Forecm.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (MarketClass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(MarketClass,String)
            End If
            If (Billing_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Billing_Document,String)
            End If
            If (Immaterial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Immaterial,String)
            End If
            If (PPMD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(PPMD,String)
            End If
            If (PO_INVCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(PO_INVCLI,String)
            End If
            If (PO_FINCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(PO_FINCLI,String)
            End If
            If (VINTAGEYESNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(VINTAGEYESNO,String)
            End If
            If (BIGTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(BIGTYPE,String)
            End If
            If (BIGCAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(BIGCAT,String)
            End If
            If (BIGFAMILIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(BIGFAMILIES,String)
            End If
            If (BIGCOMPANIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BIGCOMPANIES,String)
            End If
            If (Forecurrent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(Forecurrent.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TargetValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(TargetValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (BOM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(BOM.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (ForecaValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(ForecaValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (TARGETEDFAMILY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(TARGETEDFAMILY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SapSalesAmostrasTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SapSalesAmostras"
            tableMapping.ColumnMappings.Add("MD", "MD")
            tableMapping.ColumnMappings.Add("MM", "MM")
            tableMapping.ColumnMappings.Add("MA", "MA")
            tableMapping.ColumnMappings.Add("StatsClientNum", "StatsClientNum")
            tableMapping.ColumnMappings.Add("StatsClient", "StatsClient")
            tableMapping.ColumnMappings.Add("StatsMarket", "StatsMarket")
            tableMapping.ColumnMappings.Add("InvClientNum", "InvClientNum")
            tableMapping.ColumnMappings.Add("InvClient", "InvClient")
            tableMapping.ColumnMappings.Add("InvMarket", "InvMarket")
            tableMapping.ColumnMappings.Add("FinalClientNum", "FinalClientNum")
            tableMapping.ColumnMappings.Add("FinalClient", "FinalClient")
            tableMapping.ColumnMappings.Add("FinalMarket", "FinalMarket")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("Trademark", "Trademark")
            tableMapping.ColumnMappings.Add("NIV1", "NIV1")
            tableMapping.ColumnMappings.Add("NIV2", "NIV2")
            tableMapping.ColumnMappings.Add("NIV3", "NIV3")
            tableMapping.ColumnMappings.Add("FAMILIA", "FAMILIA")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            tableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA")
            tableMapping.ColumnMappings.Add("VINTAGEYEAR", "VINTAGEYEAR")
            tableMapping.ColumnMappings.Add("Price List", "Price List")
            tableMapping.ColumnMappings.Add("PACKID", "PACKID")
            tableMapping.ColumnMappings.Add("Package", "Package")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Sales Organization", "Sales Organization")
            tableMapping.ColumnMappings.Add("Bill of material", "Bill of material")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("Order Document", "Order Document")
            tableMapping.ColumnMappings.Add("Billing Document", "Billing Document")
            tableMapping.ColumnMappings.Add("Sales Unit", "Sales Unit")
            tableMapping.ColumnMappings.Add("Material Name", "Material Name")
            tableMapping.ColumnMappings.Add("Material Number", "Material Number")
            tableMapping.ColumnMappings.Add("Immaterial", "Immaterial")
            tableMapping.ColumnMappings.Add("Currency", "Currency")
            tableMapping.ColumnMappings.Add("RANGE", "RANGE")
            tableMapping.ColumnMappings.Add("ZZORDLSTPRECO", "ZZORDLSTPRECO")
            tableMapping.ColumnMappings.Add("ZZGROUP", "ZZGROUP")
            tableMapping.ColumnMappings.Add("categoriaid", "categoriaid")
            tableMapping.ColumnMappings.Add("InHand", "InHand")
            tableMapping.ColumnMappings.Add("Shipped", "Shipped")
            tableMapping.ColumnMappings.Add("ShipHand", "ShipHand")
            tableMapping.ColumnMappings.Add("ValueInHand", "ValueInHand")
            tableMapping.ColumnMappings.Add("ValueShipped", "ValueShipped")
            tableMapping.ColumnMappings.Add("ValueShipHand", "ValueShipHand")
            tableMapping.ColumnMappings.Add("InHandUnit", "InHandUnit")
            tableMapping.ColumnMappings.Add("ShippedUnit", "ShippedUnit")
            tableMapping.ColumnMappings.Add("ShipHandUnit", "ShipHandUnit")
            tableMapping.ColumnMappings.Add("MarketClass", "MarketClass")
            tableMapping.ColumnMappings.Add("MTART", "MTART")
            tableMapping.ColumnMappings.Add("AUART", "AUART")
            tableMapping.ColumnMappings.Add("PPMD", "PPMD")
            tableMapping.ColumnMappings.Add("PO_INVCLI", "PO_INVCLI")
            tableMapping.ColumnMappings.Add("PO_FINCLI", "PO_FINCLI")
            tableMapping.ColumnMappings.Add("VINTAGEYESNO", "VINTAGEYESNO")
            tableMapping.ColumnMappings.Add("BIGTYPE", "BIGTYPE")
            tableMapping.ColumnMappings.Add("BIGCAT", "BIGCAT")
            tableMapping.ColumnMappings.Add("BIGFAMILIES", "BIGFAMILIES")
            tableMapping.ColumnMappings.Add("BIGCOMPANIES", "BIGCOMPANIES")
            tableMapping.ColumnMappings.Add("Forecurrent", "Forecurrent")
            tableMapping.ColumnMappings.Add("TargetValue", "TargetValue")
            tableMapping.ColumnMappings.Add("BOM", "BOM")
            tableMapping.ColumnMappings.Add("ForecaValue", "ForecaValue")
            tableMapping.ColumnMappings.Add("TARGETEDFAMILY", "TARGETEDFAMILY")
            tableMapping.ColumnMappings.Add("Region", "Region")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[SapSalesAmostras] ([MD], [MM], [MA], "& _ 
                "[StatsClientNum], [StatsClient], [StatsMarket], [InvClientNum], [InvClient], [In"& _ 
                "vMarket], [FinalClientNum], [FinalClient], [FinalMarket], [Company], [Trademark]"& _ 
                ", [NIV1], [NIV2], [NIV3], [FAMILIA], [TIPO], [GRUPO], [CATEGORIA], [VINTAGEYEAR]"& _ 
                ", [Price List], [PACKID], [Package], [Year], [Date], [Sales Organization], [Bill"& _ 
                " of material], [Division], [Order Document], [Billing Document], [Sales Unit], ["& _ 
                "Material Name], [Material Number], [Immaterial], [Currency], [RANGE], [ZZORDLSTP"& _ 
                "RECO], [ZZGROUP], [categoriaid], [InHand], [Shipped], [ShipHand], [ValueInHand],"& _ 
                " [ValueShipped], [ValueShipHand], [InHandUnit], [ShippedUnit], [ShipHandUnit], ["& _ 
                "MarketClass], [MTART], [AUART], [PPMD], [PO_INVCLI], [PO_FINCLI], [VINTAGEYESNO]"& _ 
                ", [BIGTYPE], [BIGCAT], [BIGFAMILIES], [BIGCOMPANIES], [Forecurrent], [TargetValu"& _ 
                "e], [BOM], [ForecaValue], [TARGETEDFAMILY]) VALUES (@MD, @MM, @MA, @StatsClientN"& _ 
                "um, @StatsClient, @StatsMarket, @InvClientNum, @InvClient, @InvMarket, @FinalCli"& _ 
                "entNum, @FinalClient, @FinalMarket, @Company, @Trademark, @NIV1, @NIV2, @NIV3, @"& _ 
                "FAMILIA, @TIPO, @GRUPO, @CATEGORIA, @VINTAGEYEAR, @Price_List, @PACKID, @Package"& _ 
                ", @Year, @Date, @Sales_Organization, @Bill_of_material, @Division, @Order_Docume"& _ 
                "nt, @Billing_Document, @Sales_Unit, @Material_Name, @Material_Number, @Immateria"& _ 
                "l, @Currency, @RANGE, @ZZORDLSTPRECO, @ZZGROUP, @categoriaid, @InHand, @Shipped,"& _ 
                " @ShipHand, @ValueInHand, @ValueShipped, @ValueShipHand, @InHandUnit, @ShippedUn"& _ 
                "it, @ShipHandUnit, @MarketClass, @MTART, @AUART, @PPMD, @PO_INVCLI, @PO_FINCLI, "& _ 
                "@VINTAGEYESNO, @BIGTYPE, @BIGCAT, @BIGFAMILIES, @BIGCOMPANIES, @Forecurrent, @Ta"& _ 
                "rgetValue, @BOM, @ForecaValue, @TARGETEDFAMILY)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MM"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Company"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Trademark"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Trademark"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV1"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV2"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV3"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FAMILIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FAMILIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TIPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TIPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GRUPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GRUPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CATEGORIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CATEGORIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYEAR"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYEAR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Price_List"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Price List"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PACKID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PACKID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Package"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Package"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Year"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "Date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Organization"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Organization"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Bill_of_material"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Bill of material"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Division"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Division"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Order Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Billing_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Billing Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Unit"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Unit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Number"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Number"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Immaterial"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Immaterial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Currency"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RANGE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RANGE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ZZORDLSTPRECO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ZZORDLSTPRECO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ZZGROUP"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ZZGROUP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@categoriaid"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "categoriaid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Shipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Shipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueInHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueInHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShippedUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShippedUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MarketClass"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MarketClass"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MTART"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MTART"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@AUART"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "AUART"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PPMD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PPMD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_INVCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_INVCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_FINCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_FINCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYESNO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYESNO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGTYPE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCAT"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGFAMILIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGFAMILIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCOMPANIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCOMPANIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecurrent"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecurrent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TargetValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "TargetValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BOM"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "BOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ForecaValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ForecaValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TARGETEDFAMILY"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TARGETEDFAMILY"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CommercialSystem.My.MySettings.Default.SapCSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum,"& _ 
                " InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Tradem"& _ 
                "ark, NIV1, NIV2, NIV3, FAMILIA, TIPO, GRUPO, CATEGORIA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   VINTAGEYEAR, [Price List], PACKID, Package, Year, [Date], [Sales Organization"& _ 
                "], [Bill of material], Division, [Order Document], [Billing Document], [Sales Un"& _ 
                "it], [Material Name], [Material Number], Immaterial, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "Currency, RANGE, ZZORDLSTPRECO, ZZGROUP, categoriaid, InHand, Shipped, ShipHand,"& _ 
                " ValueInHand, ValueShipped, ValueShipHand, InHandUnit, ShippedUnit, ShipHandUnit"& _ 
                ", MarketClass, MTART, AUART, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         PPMD, PO_INVCLI, PO_FINC"& _ 
                "LI, VINTAGEYESNO, BIGTYPE, BIGCAT, BIGFAMILIES, BIGCOMPANIES, Forecurrent, Targe"& _ 
                "tValue, BOM, ForecaValue, TARGETEDFAMILY, region "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SapSalesAmost"& _ 
                "ras"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CommercialSystemDataSet2.SapSalesAmostrasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CommercialSystemDataSet2.SapSalesAmostrasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CommercialSystemDataSet2.SapSalesAmostrasDataTable = New CommercialSystemDataSet2.SapSalesAmostrasDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CommercialSystemDataSet2.SapSalesAmostrasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CommercialSystemDataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "SapSalesAmostras")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Immaterial As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal ZZORDLSTPRECO As String,  _
                    ByVal ZZGROUP As String,  _
                    ByVal categoriaid As String,  _
                    ByVal InHand As Global.System.Nullable(Of Decimal),  _
                    ByVal Shipped As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueInHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipped As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal InHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShippedUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal MarketClass As String,  _
                    ByVal MTART As String,  _
                    ByVal AUART As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Global.System.Nullable(Of Decimal),  _
                    ByVal TargetValue As Global.System.Nullable(Of Decimal),  _
                    ByVal BOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ForecaValue As Global.System.Nullable(Of Decimal),  _
                    ByVal TARGETEDFAMILY As String) As Integer
            If (MD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MD,String)
            End If
            If (MM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MM,String)
            End If
            If (MA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MA,String)
            End If
            If (StatsClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StatsClientNum,String)
            End If
            If (StatsClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(StatsClient,String)
            End If
            If (StatsMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StatsMarket,String)
            End If
            If (InvClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(InvClientNum,String)
            End If
            If (InvClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(InvClient,String)
            End If
            If (InvMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(InvMarket,String)
            End If
            If (FinalClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FinalClientNum,String)
            End If
            If (FinalClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FinalClient,String)
            End If
            If (FinalMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FinalMarket,String)
            End If
            If (Company Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Company,String)
            End If
            If (Trademark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Trademark,String)
            End If
            If (NIV1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NIV1,String)
            End If
            If (NIV2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NIV2,String)
            End If
            If (NIV3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NIV3,String)
            End If
            If (FAMILIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FAMILIA,String)
            End If
            If (TIPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TIPO,String)
            End If
            If (GRUPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(GRUPO,String)
            End If
            If (CATEGORIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CATEGORIA,String)
            End If
            If (VINTAGEYEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(VINTAGEYEAR,String)
            End If
            If (Price_List Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Price_List,String)
            End If
            If (PACKID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PACKID,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Package,String)
            End If
            If (Year Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Year,String)
            End If
            If (_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Sales_Organization Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Sales_Organization,String)
            End If
            If (Bill_of_material Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Bill_of_material,String)
            End If
            If (Division Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Division,String)
            End If
            If (Order_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Order_Document,String)
            End If
            If (Billing_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Billing_Document,String)
            End If
            If (Sales_Unit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Sales_Unit,String)
            End If
            If (Material_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Material_Name,String)
            End If
            If (Material_Number Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Material_Number,String)
            End If
            If (Immaterial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(Immaterial,String)
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(Currency,String)
            End If
            If (RANGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(RANGE,String)
            End If
            If (ZZORDLSTPRECO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(ZZORDLSTPRECO,String)
            End If
            If (ZZGROUP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ZZGROUP,String)
            End If
            If (categoriaid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(categoriaid,String)
            End If
            If (InHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(InHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Shipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(Shipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(ShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (ValueInHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(ValueInHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (ValueShipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(ValueShipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (ValueShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(ValueShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (InHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(InHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (ShippedUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(ShippedUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (ShipHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(ShipHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (MarketClass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(MarketClass,String)
            End If
            If (MTART Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(MTART,String)
            End If
            If (AUART Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(AUART,String)
            End If
            If (PPMD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(PPMD,String)
            End If
            If (PO_INVCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(PO_INVCLI,String)
            End If
            If (PO_FINCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(PO_FINCLI,String)
            End If
            If (VINTAGEYESNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(VINTAGEYESNO,String)
            End If
            If (BIGTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BIGTYPE,String)
            End If
            If (BIGCAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(BIGCAT,String)
            End If
            If (BIGFAMILIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(BIGFAMILIES,String)
            End If
            If (BIGCOMPANIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(BIGCOMPANIES,String)
            End If
            If (Forecurrent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(Forecurrent.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (TargetValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(TargetValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (BOM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(BOM.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (ForecaValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(ForecaValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (TARGETEDFAMILY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(TARGETEDFAMILY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SapSalesCompostosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SapSalesCompostos"
            tableMapping.ColumnMappings.Add("MD", "MD")
            tableMapping.ColumnMappings.Add("MM", "MM")
            tableMapping.ColumnMappings.Add("MA", "MA")
            tableMapping.ColumnMappings.Add("StatsClientNum", "StatsClientNum")
            tableMapping.ColumnMappings.Add("StatsClient", "StatsClient")
            tableMapping.ColumnMappings.Add("StatsMarket", "StatsMarket")
            tableMapping.ColumnMappings.Add("InvClientNum", "InvClientNum")
            tableMapping.ColumnMappings.Add("InvClient", "InvClient")
            tableMapping.ColumnMappings.Add("InvMarket", "InvMarket")
            tableMapping.ColumnMappings.Add("FinalClientNum", "FinalClientNum")
            tableMapping.ColumnMappings.Add("FinalClient", "FinalClient")
            tableMapping.ColumnMappings.Add("FinalMarket", "FinalMarket")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("Trademark", "Trademark")
            tableMapping.ColumnMappings.Add("NIV1", "NIV1")
            tableMapping.ColumnMappings.Add("NIV2", "NIV2")
            tableMapping.ColumnMappings.Add("NIV3", "NIV3")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            tableMapping.ColumnMappings.Add("FAMILIA", "FAMILIA")
            tableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA")
            tableMapping.ColumnMappings.Add("VINTAGEYEAR", "VINTAGEYEAR")
            tableMapping.ColumnMappings.Add("Price List", "Price List")
            tableMapping.ColumnMappings.Add("PACKID", "PACKID")
            tableMapping.ColumnMappings.Add("Package", "Package")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Sales Organization", "Sales Organization")
            tableMapping.ColumnMappings.Add("Bill of material", "Bill of material")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("Order Document", "Order Document")
            tableMapping.ColumnMappings.Add("Sales Unit", "Sales Unit")
            tableMapping.ColumnMappings.Add("Material Name", "Material Name")
            tableMapping.ColumnMappings.Add("Material Number", "Material Number")
            tableMapping.ColumnMappings.Add("Currency", "Currency")
            tableMapping.ColumnMappings.Add("RANGE", "RANGE")
            tableMapping.ColumnMappings.Add("InHand", "InHand")
            tableMapping.ColumnMappings.Add("Shipped", "Shipped")
            tableMapping.ColumnMappings.Add("ShipHand", "ShipHand")
            tableMapping.ColumnMappings.Add("ValueInHand", "ValueInHand")
            tableMapping.ColumnMappings.Add("ValueShipHand", "ValueShipHand")
            tableMapping.ColumnMappings.Add("ValueShipped", "ValueShipped")
            tableMapping.ColumnMappings.Add("InHandUnit", "InHandUnit")
            tableMapping.ColumnMappings.Add("ShippedUnit", "ShippedUnit")
            tableMapping.ColumnMappings.Add("ShipHandUnit", "ShipHandUnit")
            tableMapping.ColumnMappings.Add("Foreca", "Foreca")
            tableMapping.ColumnMappings.Add("Forecm", "Forecm")
            tableMapping.ColumnMappings.Add("MarketClass", "MarketClass")
            tableMapping.ColumnMappings.Add("Billing Document", "Billing Document")
            tableMapping.ColumnMappings.Add("Immaterial", "Immaterial")
            tableMapping.ColumnMappings.Add("PPMD", "PPMD")
            tableMapping.ColumnMappings.Add("PO_INVCLI", "PO_INVCLI")
            tableMapping.ColumnMappings.Add("PO_FINCLI", "PO_FINCLI")
            tableMapping.ColumnMappings.Add("VINTAGEYESNO", "VINTAGEYESNO")
            tableMapping.ColumnMappings.Add("BIGTYPE", "BIGTYPE")
            tableMapping.ColumnMappings.Add("BIGCAT", "BIGCAT")
            tableMapping.ColumnMappings.Add("BIGFAMILIES", "BIGFAMILIES")
            tableMapping.ColumnMappings.Add("BIGCOMPANIES", "BIGCOMPANIES")
            tableMapping.ColumnMappings.Add("Forecurrent", "Forecurrent")
            tableMapping.ColumnMappings.Add("TargetValue", "TargetValue")
            tableMapping.ColumnMappings.Add("BOM", "BOM")
            tableMapping.ColumnMappings.Add("ForecaValue", "ForecaValue")
            tableMapping.ColumnMappings.Add("TARGETEDFAMILY", "TARGETEDFAMILY")
            tableMapping.ColumnMappings.Add("Region", "Region")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[SapSalesCompostos] ([MD], [MM], [MA],"& _ 
                " [StatsClientNum], [StatsClient], [StatsMarket], [InvClientNum], [InvClient], [I"& _ 
                "nvMarket], [FinalClientNum], [FinalClient], [FinalMarket], [Company], [Trademark"& _ 
                "], [NIV1], [NIV2], [NIV3], [TIPO], [GRUPO], [FAMILIA], [CATEGORIA], [VINTAGEYEAR"& _ 
                "], [Price List], [PACKID], [Package], [Year], [Date], [Sales Organization], [Bil"& _ 
                "l of material], [Division], [Order Document], [Sales Unit], [Material Name], [Ma"& _ 
                "terial Number], [Currency], [RANGE], [InHand], [Shipped], [ShipHand], [ValueInHa"& _ 
                "nd], [ValueShipHand], [ValueShipped], [InHandUnit], [ShippedUnit], [ShipHandUnit"& _ 
                "], [Foreca], [Forecm], [MarketClass], [Billing Document], [Immaterial], [PPMD], "& _ 
                "[PO_INVCLI], [PO_FINCLI], [VINTAGEYESNO], [BIGTYPE], [BIGCAT], [BIGFAMILIES], [B"& _ 
                "IGCOMPANIES], [Forecurrent], [TargetValue], [BOM], [ForecaValue], [TARGETEDFAMIL"& _ 
                "Y]) VALUES (@MD, @MM, @MA, @StatsClientNum, @StatsClient, @StatsMarket, @InvClie"& _ 
                "ntNum, @InvClient, @InvMarket, @FinalClientNum, @FinalClient, @FinalMarket, @Com"& _ 
                "pany, @Trademark, @NIV1, @NIV2, @NIV3, @TIPO, @GRUPO, @FAMILIA, @CATEGORIA, @VIN"& _ 
                "TAGEYEAR, @Price_List, @PACKID, @Package, @Year, @Date, @Sales_Organization, @Bi"& _ 
                "ll_of_material, @Division, @Order_Document, @Sales_Unit, @Material_Name, @Materi"& _ 
                "al_Number, @Currency, @RANGE, @InHand, @Shipped, @ShipHand, @ValueInHand, @Value"& _ 
                "ShipHand, @ValueShipped, @InHandUnit, @ShippedUnit, @ShipHandUnit, @Foreca, @For"& _ 
                "ecm, @MarketClass, @Billing_Document, @Immaterial, @PPMD, @PO_INVCLI, @PO_FINCLI"& _ 
                ", @VINTAGEYESNO, @BIGTYPE, @BIGCAT, @BIGFAMILIES, @BIGCOMPANIES, @Forecurrent, @"& _ 
                "TargetValue, @BOM, @ForecaValue, @TARGETEDFAMILY)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MM"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Company"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Trademark"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Trademark"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV1"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV2"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV3"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TIPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TIPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GRUPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GRUPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FAMILIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FAMILIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CATEGORIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CATEGORIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYEAR"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYEAR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Price_List"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Price List"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PACKID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PACKID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Package"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Package"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Year"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "Date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Organization"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Organization"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Bill_of_material"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Bill of material"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Division"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Division"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Order Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Unit"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Unit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Number"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Number"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Currency"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RANGE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RANGE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Shipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Shipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueInHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueInHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShippedUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShippedUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Foreca"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Foreca"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecm"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MarketClass"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MarketClass"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Billing_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Billing Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Immaterial"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Immaterial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PPMD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PPMD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_INVCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_INVCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_FINCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_FINCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYESNO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYESNO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGTYPE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCAT"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGFAMILIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGFAMILIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCOMPANIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCOMPANIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecurrent"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecurrent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TargetValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "TargetValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BOM"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "BOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ForecaValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ForecaValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TARGETEDFAMILY"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TARGETEDFAMILY"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CommercialSystem.My.MySettings.Default.SapCSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum,"& _ 
                " InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Tradem"& _ 
                "ark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   VINTAGEYEAR, [Price List], PACKID, Package, Year, [Date], [Sales Organization"& _ 
                "], [Bill of material], Division, [Order Document], [Sales Unit], [Material Name]"& _ 
                ", [Material Number], Currency, RANGE, InHand, Shipped, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  ShipHand, ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, S"& _ 
                "hipHandUnit, Foreca, Forecm, MarketClass, [Billing Document], Immaterial, PPMD, "& _ 
                "PO_INVCLI, PO_FINCLI, VINTAGEYESNO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BIGTYPE, BIGCAT, "& _ 
                "BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDF"& _ 
                "AMILY, Region "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SapSalesCompostos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CommercialSystemDataSet2.SapSalesCompostosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CommercialSystemDataSet2.SapSalesCompostosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CommercialSystemDataSet2.SapSalesCompostosDataTable = New CommercialSystemDataSet2.SapSalesCompostosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CommercialSystemDataSet2.SapSalesCompostosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CommercialSystemDataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "SapSalesCompostos")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Global.System.Nullable(Of Decimal),  _
                    ByVal Shipped As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueInHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipped As Global.System.Nullable(Of Decimal),  _
                    ByVal InHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShippedUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal Foreca As Global.System.Nullable(Of Decimal),  _
                    ByVal Forecm As Global.System.Nullable(Of Decimal),  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Global.System.Nullable(Of Decimal),  _
                    ByVal TargetValue As Global.System.Nullable(Of Decimal),  _
                    ByVal BOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ForecaValue As Global.System.Nullable(Of Decimal),  _
                    ByVal TARGETEDFAMILY As String) As Integer
            If (MD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MD,String)
            End If
            If (MM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MM,String)
            End If
            If (MA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MA,String)
            End If
            If (StatsClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StatsClientNum,String)
            End If
            If (StatsClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(StatsClient,String)
            End If
            If (StatsMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StatsMarket,String)
            End If
            If (InvClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(InvClientNum,String)
            End If
            If (InvClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(InvClient,String)
            End If
            If (InvMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(InvMarket,String)
            End If
            If (FinalClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FinalClientNum,String)
            End If
            If (FinalClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FinalClient,String)
            End If
            If (FinalMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FinalMarket,String)
            End If
            If (Company Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Company,String)
            End If
            If (Trademark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Trademark,String)
            End If
            If (NIV1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NIV1,String)
            End If
            If (NIV2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NIV2,String)
            End If
            If (NIV3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NIV3,String)
            End If
            If (TIPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TIPO,String)
            End If
            If (GRUPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(GRUPO,String)
            End If
            If (FAMILIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(FAMILIA,String)
            End If
            If (CATEGORIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CATEGORIA,String)
            End If
            If (VINTAGEYEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(VINTAGEYEAR,String)
            End If
            If (Price_List Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Price_List,String)
            End If
            If (PACKID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PACKID,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Package,String)
            End If
            If (Year Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Year,String)
            End If
            If (_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Sales_Organization Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Sales_Organization,String)
            End If
            If (Bill_of_material Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Bill_of_material,String)
            End If
            If (Division Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Division,String)
            End If
            If (Order_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Order_Document,String)
            End If
            If (Sales_Unit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Sales_Unit,String)
            End If
            If (Material_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Material_Name,String)
            End If
            If (Material_Number Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Material_Number,String)
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Currency,String)
            End If
            If (RANGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(RANGE,String)
            End If
            If (InHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(InHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Shipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Shipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (ShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(ShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (ValueInHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ValueInHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (ValueShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(ValueShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (ValueShipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(ValueShipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (InHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(InHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ShippedUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(ShippedUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (ShipHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(ShipHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Foreca.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Foreca.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Forecm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Forecm.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (MarketClass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(MarketClass,String)
            End If
            If (Billing_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Billing_Document,String)
            End If
            If (Immaterial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Immaterial,String)
            End If
            If (PPMD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(PPMD,String)
            End If
            If (PO_INVCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(PO_INVCLI,String)
            End If
            If (PO_FINCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(PO_FINCLI,String)
            End If
            If (VINTAGEYESNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(VINTAGEYESNO,String)
            End If
            If (BIGTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(BIGTYPE,String)
            End If
            If (BIGCAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(BIGCAT,String)
            End If
            If (BIGFAMILIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(BIGFAMILIES,String)
            End If
            If (BIGCOMPANIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BIGCOMPANIES,String)
            End If
            If (Forecurrent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(Forecurrent.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TargetValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(TargetValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (BOM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(BOM.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (ForecaValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(ForecaValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (TARGETEDFAMILY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(TARGETEDFAMILY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SapTipoListaPrecosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SapTipoListaPrecos"
            tableMapping.ColumnMappings.Add("PLTYP", "PLTYP")
            tableMapping.ColumnMappings.Add("PTEXT", "PTEXT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CommercialSystem.My.MySettings.Default.SapCSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        PLTYP, PTEXT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SapTipoListaPrecos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (SPR"& _ 
                "AS = 'E  ')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CommercialSystemDataSet2.SapTipoListaPrecosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CommercialSystemDataSet2.SapTipoListaPrecosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CommercialSystemDataSet2.SapTipoListaPrecosDataTable = New CommercialSystemDataSet2.SapTipoListaPrecosDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SapSalesOldReservesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SapSalesOldReserves"
            tableMapping.ColumnMappings.Add("MD", "MD")
            tableMapping.ColumnMappings.Add("MM", "MM")
            tableMapping.ColumnMappings.Add("MA", "MA")
            tableMapping.ColumnMappings.Add("StatsClientNum", "StatsClientNum")
            tableMapping.ColumnMappings.Add("StatsClient", "StatsClient")
            tableMapping.ColumnMappings.Add("StatsMarket", "StatsMarket")
            tableMapping.ColumnMappings.Add("InvClientNum", "InvClientNum")
            tableMapping.ColumnMappings.Add("InvClient", "InvClient")
            tableMapping.ColumnMappings.Add("InvMarket", "InvMarket")
            tableMapping.ColumnMappings.Add("FinalClientNum", "FinalClientNum")
            tableMapping.ColumnMappings.Add("FinalClient", "FinalClient")
            tableMapping.ColumnMappings.Add("FinalMarket", "FinalMarket")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("Trademark", "Trademark")
            tableMapping.ColumnMappings.Add("NIV1", "NIV1")
            tableMapping.ColumnMappings.Add("NIV2", "NIV2")
            tableMapping.ColumnMappings.Add("NIV3", "NIV3")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            tableMapping.ColumnMappings.Add("FAMILIA", "FAMILIA")
            tableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA")
            tableMapping.ColumnMappings.Add("VINTAGEYEAR", "VINTAGEYEAR")
            tableMapping.ColumnMappings.Add("Price List", "Price List")
            tableMapping.ColumnMappings.Add("PACKID", "PACKID")
            tableMapping.ColumnMappings.Add("Package", "Package")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Sales Organization", "Sales Organization")
            tableMapping.ColumnMappings.Add("Bill of material", "Bill of material")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("Order Document", "Order Document")
            tableMapping.ColumnMappings.Add("Sales Unit", "Sales Unit")
            tableMapping.ColumnMappings.Add("Material Name", "Material Name")
            tableMapping.ColumnMappings.Add("Material Number", "Material Number")
            tableMapping.ColumnMappings.Add("Currency", "Currency")
            tableMapping.ColumnMappings.Add("RANGE", "RANGE")
            tableMapping.ColumnMappings.Add("InHand", "InHand")
            tableMapping.ColumnMappings.Add("Shipped", "Shipped")
            tableMapping.ColumnMappings.Add("ShipHand", "ShipHand")
            tableMapping.ColumnMappings.Add("ValueInHand", "ValueInHand")
            tableMapping.ColumnMappings.Add("ValueShipHand", "ValueShipHand")
            tableMapping.ColumnMappings.Add("ValueShipped", "ValueShipped")
            tableMapping.ColumnMappings.Add("InHandUnit", "InHandUnit")
            tableMapping.ColumnMappings.Add("ShippedUnit", "ShippedUnit")
            tableMapping.ColumnMappings.Add("ShipHandUnit", "ShipHandUnit")
            tableMapping.ColumnMappings.Add("Foreca", "Foreca")
            tableMapping.ColumnMappings.Add("Forecm", "Forecm")
            tableMapping.ColumnMappings.Add("MarketClass", "MarketClass")
            tableMapping.ColumnMappings.Add("Billing Document", "Billing Document")
            tableMapping.ColumnMappings.Add("Immaterial", "Immaterial")
            tableMapping.ColumnMappings.Add("PPMD", "PPMD")
            tableMapping.ColumnMappings.Add("PO_INVCLI", "PO_INVCLI")
            tableMapping.ColumnMappings.Add("PO_FINCLI", "PO_FINCLI")
            tableMapping.ColumnMappings.Add("VINTAGEYESNO", "VINTAGEYESNO")
            tableMapping.ColumnMappings.Add("BIGTYPE", "BIGTYPE")
            tableMapping.ColumnMappings.Add("BIGCAT", "BIGCAT")
            tableMapping.ColumnMappings.Add("BIGFAMILIES", "BIGFAMILIES")
            tableMapping.ColumnMappings.Add("BIGCOMPANIES", "BIGCOMPANIES")
            tableMapping.ColumnMappings.Add("Forecurrent", "Forecurrent")
            tableMapping.ColumnMappings.Add("TargetValue", "TargetValue")
            tableMapping.ColumnMappings.Add("BOM", "BOM")
            tableMapping.ColumnMappings.Add("ForecaValue", "ForecaValue")
            tableMapping.ColumnMappings.Add("TARGETEDFAMILY", "TARGETEDFAMILY")
            tableMapping.ColumnMappings.Add("Region", "Region")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[SapSalesOldReserves] ([MD], [MM], [MA"& _ 
                "], [StatsClientNum], [StatsClient], [StatsMarket], [InvClientNum], [InvClient], "& _ 
                "[InvMarket], [FinalClientNum], [FinalClient], [FinalMarket], [Company], [Tradema"& _ 
                "rk], [NIV1], [NIV2], [NIV3], [TIPO], [GRUPO], [FAMILIA], [CATEGORIA], [VINTAGEYE"& _ 
                "AR], [Price List], [PACKID], [Package], [Year], [Date], [Sales Organization], [B"& _ 
                "ill of material], [Division], [Order Document], [Sales Unit], [Material Name], ["& _ 
                "Material Number], [Currency], [RANGE], [InHand], [Shipped], [ShipHand], [ValueIn"& _ 
                "Hand], [ValueShipHand], [ValueShipped], [InHandUnit], [ShippedUnit], [ShipHandUn"& _ 
                "it], [Foreca], [Forecm], [MarketClass], [Billing Document], [Immaterial], [PPMD]"& _ 
                ", [PO_INVCLI], [PO_FINCLI], [VINTAGEYESNO], [BIGTYPE], [BIGCAT], [BIGFAMILIES], "& _ 
                "[BIGCOMPANIES], [Forecurrent], [TargetValue], [BOM], [ForecaValue], [TARGETEDFAM"& _ 
                "ILY]) VALUES (@MD, @MM, @MA, @StatsClientNum, @StatsClient, @StatsMarket, @InvCl"& _ 
                "ientNum, @InvClient, @InvMarket, @FinalClientNum, @FinalClient, @FinalMarket, @C"& _ 
                "ompany, @Trademark, @NIV1, @NIV2, @NIV3, @TIPO, @GRUPO, @FAMILIA, @CATEGORIA, @V"& _ 
                "INTAGEYEAR, @Price_List, @PACKID, @Package, @Year, @Date, @Sales_Organization, @"& _ 
                "Bill_of_material, @Division, @Order_Document, @Sales_Unit, @Material_Name, @Mate"& _ 
                "rial_Number, @Currency, @RANGE, @InHand, @Shipped, @ShipHand, @ValueInHand, @Val"& _ 
                "ueShipHand, @ValueShipped, @InHandUnit, @ShippedUnit, @ShipHandUnit, @Foreca, @F"& _ 
                "orecm, @MarketClass, @Billing_Document, @Immaterial, @PPMD, @PO_INVCLI, @PO_FINC"& _ 
                "LI, @VINTAGEYESNO, @BIGTYPE, @BIGCAT, @BIGFAMILIES, @BIGCOMPANIES, @Forecurrent,"& _ 
                " @TargetValue, @BOM, @ForecaValue, @TARGETEDFAMILY)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MM"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Company"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Trademark"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Trademark"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV1"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV2"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV3"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TIPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TIPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GRUPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GRUPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FAMILIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FAMILIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CATEGORIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CATEGORIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYEAR"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYEAR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Price_List"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Price List"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PACKID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PACKID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Package"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Package"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Year"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "Date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Organization"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Organization"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Bill_of_material"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Bill of material"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Division"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Division"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Order Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Unit"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Unit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Number"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Number"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Currency"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RANGE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RANGE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Shipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Shipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueInHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueInHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShippedUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShippedUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Foreca"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Foreca"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecm"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MarketClass"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MarketClass"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Billing_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Billing Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Immaterial"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Immaterial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PPMD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PPMD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_INVCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_INVCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_FINCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_FINCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYESNO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYESNO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGTYPE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCAT"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGFAMILIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGFAMILIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCOMPANIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCOMPANIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecurrent"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecurrent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TargetValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "TargetValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BOM"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "BOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ForecaValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ForecaValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TARGETEDFAMILY"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TARGETEDFAMILY"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CommercialSystem.My.MySettings.Default.SapCSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum,"& _ 
                " InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Tradem"& _ 
                "ark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   VINTAGEYEAR, [Price List], PACKID, Package, Year, [Date], [Sales Organization"& _ 
                "], [Bill of material], Division, [Order Document], [Sales Unit], [Material Name]"& _ 
                ", [Material Number], Currency, RANGE, InHand, Shipped, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  ShipHand, ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, S"& _ 
                "hipHandUnit, Foreca, Forecm, MarketClass, [Billing Document], Immaterial, PPMD, "& _ 
                "PO_INVCLI, PO_FINCLI, VINTAGEYESNO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BIGTYPE, BIGCAT, "& _ 
                "BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDF"& _ 
                "AMILY, Region "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SapSalesOldReserves"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CommercialSystemDataSet2.SapSalesOldReservesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CommercialSystemDataSet2.SapSalesOldReservesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CommercialSystemDataSet2.SapSalesOldReservesDataTable = New CommercialSystemDataSet2.SapSalesOldReservesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CommercialSystemDataSet2.SapSalesOldReservesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CommercialSystemDataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "SapSalesOldReserves")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Global.System.Nullable(Of Decimal),  _
                    ByVal Shipped As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueInHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipped As Global.System.Nullable(Of Decimal),  _
                    ByVal InHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShippedUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal Foreca As Global.System.Nullable(Of Decimal),  _
                    ByVal Forecm As Global.System.Nullable(Of Decimal),  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Global.System.Nullable(Of Decimal),  _
                    ByVal TargetValue As Global.System.Nullable(Of Decimal),  _
                    ByVal BOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ForecaValue As Global.System.Nullable(Of Decimal),  _
                    ByVal TARGETEDFAMILY As String) As Integer
            If (MD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MD,String)
            End If
            If (MM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MM,String)
            End If
            If (MA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MA,String)
            End If
            If (StatsClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StatsClientNum,String)
            End If
            If (StatsClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(StatsClient,String)
            End If
            If (StatsMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StatsMarket,String)
            End If
            If (InvClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(InvClientNum,String)
            End If
            If (InvClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(InvClient,String)
            End If
            If (InvMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(InvMarket,String)
            End If
            If (FinalClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FinalClientNum,String)
            End If
            If (FinalClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FinalClient,String)
            End If
            If (FinalMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FinalMarket,String)
            End If
            If (Company Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Company,String)
            End If
            If (Trademark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Trademark,String)
            End If
            If (NIV1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NIV1,String)
            End If
            If (NIV2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NIV2,String)
            End If
            If (NIV3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NIV3,String)
            End If
            If (TIPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TIPO,String)
            End If
            If (GRUPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(GRUPO,String)
            End If
            If (FAMILIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(FAMILIA,String)
            End If
            If (CATEGORIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CATEGORIA,String)
            End If
            If (VINTAGEYEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(VINTAGEYEAR,String)
            End If
            If (Price_List Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Price_List,String)
            End If
            If (PACKID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PACKID,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Package,String)
            End If
            If (Year Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Year,String)
            End If
            If (_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Sales_Organization Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Sales_Organization,String)
            End If
            If (Bill_of_material Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Bill_of_material,String)
            End If
            If (Division Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Division,String)
            End If
            If (Order_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Order_Document,String)
            End If
            If (Sales_Unit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Sales_Unit,String)
            End If
            If (Material_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Material_Name,String)
            End If
            If (Material_Number Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Material_Number,String)
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Currency,String)
            End If
            If (RANGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(RANGE,String)
            End If
            If (InHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(InHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Shipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Shipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (ShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(ShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (ValueInHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ValueInHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (ValueShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(ValueShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (ValueShipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(ValueShipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (InHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(InHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ShippedUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(ShippedUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (ShipHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(ShipHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Foreca.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Foreca.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Forecm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Forecm.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (MarketClass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(MarketClass,String)
            End If
            If (Billing_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Billing_Document,String)
            End If
            If (Immaterial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Immaterial,String)
            End If
            If (PPMD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(PPMD,String)
            End If
            If (PO_INVCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(PO_INVCLI,String)
            End If
            If (PO_FINCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(PO_FINCLI,String)
            End If
            If (VINTAGEYESNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(VINTAGEYESNO,String)
            End If
            If (BIGTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(BIGTYPE,String)
            End If
            If (BIGCAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(BIGCAT,String)
            End If
            If (BIGFAMILIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(BIGFAMILIES,String)
            End If
            If (BIGCOMPANIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BIGCOMPANIES,String)
            End If
            If (Forecurrent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(Forecurrent.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TargetValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(TargetValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (BOM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(BOM.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (ForecaValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(ForecaValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (TARGETEDFAMILY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(TARGETEDFAMILY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SapSalesGermanWarehouseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SapSalesGermanWarehouse"
            tableMapping.ColumnMappings.Add("MD", "MD")
            tableMapping.ColumnMappings.Add("MM", "MM")
            tableMapping.ColumnMappings.Add("MA", "MA")
            tableMapping.ColumnMappings.Add("StatsClientNum", "StatsClientNum")
            tableMapping.ColumnMappings.Add("StatsClient", "StatsClient")
            tableMapping.ColumnMappings.Add("StatsMarket", "StatsMarket")
            tableMapping.ColumnMappings.Add("InvClientNum", "InvClientNum")
            tableMapping.ColumnMappings.Add("InvClient", "InvClient")
            tableMapping.ColumnMappings.Add("InvMarket", "InvMarket")
            tableMapping.ColumnMappings.Add("FinalClientNum", "FinalClientNum")
            tableMapping.ColumnMappings.Add("FinalClient", "FinalClient")
            tableMapping.ColumnMappings.Add("FinalMarket", "FinalMarket")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("Trademark", "Trademark")
            tableMapping.ColumnMappings.Add("NIV1", "NIV1")
            tableMapping.ColumnMappings.Add("NIV2", "NIV2")
            tableMapping.ColumnMappings.Add("NIV3", "NIV3")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("GRUPO", "GRUPO")
            tableMapping.ColumnMappings.Add("FAMILIA", "FAMILIA")
            tableMapping.ColumnMappings.Add("CATEGORIA", "CATEGORIA")
            tableMapping.ColumnMappings.Add("VINTAGEYEAR", "VINTAGEYEAR")
            tableMapping.ColumnMappings.Add("Price List", "Price List")
            tableMapping.ColumnMappings.Add("PACKID", "PACKID")
            tableMapping.ColumnMappings.Add("Package", "Package")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Sales Organization", "Sales Organization")
            tableMapping.ColumnMappings.Add("Bill of material", "Bill of material")
            tableMapping.ColumnMappings.Add("Division", "Division")
            tableMapping.ColumnMappings.Add("Order Document", "Order Document")
            tableMapping.ColumnMappings.Add("Sales Unit", "Sales Unit")
            tableMapping.ColumnMappings.Add("Material Name", "Material Name")
            tableMapping.ColumnMappings.Add("Material Number", "Material Number")
            tableMapping.ColumnMappings.Add("Currency", "Currency")
            tableMapping.ColumnMappings.Add("RANGE", "RANGE")
            tableMapping.ColumnMappings.Add("InHand", "InHand")
            tableMapping.ColumnMappings.Add("Shipped", "Shipped")
            tableMapping.ColumnMappings.Add("ShipHand", "ShipHand")
            tableMapping.ColumnMappings.Add("ValueInHand", "ValueInHand")
            tableMapping.ColumnMappings.Add("ValueShipHand", "ValueShipHand")
            tableMapping.ColumnMappings.Add("ValueShipped", "ValueShipped")
            tableMapping.ColumnMappings.Add("InHandUnit", "InHandUnit")
            tableMapping.ColumnMappings.Add("ShippedUnit", "ShippedUnit")
            tableMapping.ColumnMappings.Add("ShipHandUnit", "ShipHandUnit")
            tableMapping.ColumnMappings.Add("Foreca", "Foreca")
            tableMapping.ColumnMappings.Add("Forecm", "Forecm")
            tableMapping.ColumnMappings.Add("MarketClass", "MarketClass")
            tableMapping.ColumnMappings.Add("Billing Document", "Billing Document")
            tableMapping.ColumnMappings.Add("Immaterial", "Immaterial")
            tableMapping.ColumnMappings.Add("PPMD", "PPMD")
            tableMapping.ColumnMappings.Add("PO_INVCLI", "PO_INVCLI")
            tableMapping.ColumnMappings.Add("PO_FINCLI", "PO_FINCLI")
            tableMapping.ColumnMappings.Add("VINTAGEYESNO", "VINTAGEYESNO")
            tableMapping.ColumnMappings.Add("BIGTYPE", "BIGTYPE")
            tableMapping.ColumnMappings.Add("BIGCAT", "BIGCAT")
            tableMapping.ColumnMappings.Add("BIGFAMILIES", "BIGFAMILIES")
            tableMapping.ColumnMappings.Add("BIGCOMPANIES", "BIGCOMPANIES")
            tableMapping.ColumnMappings.Add("Forecurrent", "Forecurrent")
            tableMapping.ColumnMappings.Add("TargetValue", "TargetValue")
            tableMapping.ColumnMappings.Add("BOM", "BOM")
            tableMapping.ColumnMappings.Add("ForecaValue", "ForecaValue")
            tableMapping.ColumnMappings.Add("TARGETEDFAMILY", "TARGETEDFAMILY")
            tableMapping.ColumnMappings.Add("Region", "Region")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[SapSalesOldReserves] ([MD], [MM], [MA"& _ 
                "], [StatsClientNum], [StatsClient], [StatsMarket], [InvClientNum], [InvClient], "& _ 
                "[InvMarket], [FinalClientNum], [FinalClient], [FinalMarket], [Company], [Tradema"& _ 
                "rk], [NIV1], [NIV2], [NIV3], [TIPO], [GRUPO], [FAMILIA], [CATEGORIA], [VINTAGEYE"& _ 
                "AR], [Price List], [PACKID], [Package], [Year], [Date], [Sales Organization], [B"& _ 
                "ill of material], [Division], [Order Document], [Sales Unit], [Material Name], ["& _ 
                "Material Number], [Currency], [RANGE], [InHand], [Shipped], [ShipHand], [ValueIn"& _ 
                "Hand], [ValueShipHand], [ValueShipped], [InHandUnit], [ShippedUnit], [ShipHandUn"& _ 
                "it], [Foreca], [Forecm], [MarketClass], [Billing Document], [Immaterial], [PPMD]"& _ 
                ", [PO_INVCLI], [PO_FINCLI], [VINTAGEYESNO], [BIGTYPE], [BIGCAT], [BIGFAMILIES], "& _ 
                "[BIGCOMPANIES], [Forecurrent], [TargetValue], [BOM], [ForecaValue], [TARGETEDFAM"& _ 
                "ILY]) VALUES (@MD, @MM, @MA, @StatsClientNum, @StatsClient, @StatsMarket, @InvCl"& _ 
                "ientNum, @InvClient, @InvMarket, @FinalClientNum, @FinalClient, @FinalMarket, @C"& _ 
                "ompany, @Trademark, @NIV1, @NIV2, @NIV3, @TIPO, @GRUPO, @FAMILIA, @CATEGORIA, @V"& _ 
                "INTAGEYEAR, @Price_List, @PACKID, @Package, @Year, @Date, @Sales_Organization, @"& _ 
                "Bill_of_material, @Division, @Order_Document, @Sales_Unit, @Material_Name, @Mate"& _ 
                "rial_Number, @Currency, @RANGE, @InHand, @Shipped, @ShipHand, @ValueInHand, @Val"& _ 
                "ueShipHand, @ValueShipped, @InHandUnit, @ShippedUnit, @ShipHandUnit, @Foreca, @F"& _ 
                "orecm, @MarketClass, @Billing_Document, @Immaterial, @PPMD, @PO_INVCLI, @PO_FINC"& _ 
                "LI, @VINTAGEYESNO, @BIGTYPE, @BIGCAT, @BIGFAMILIES, @BIGCOMPANIES, @Forecurrent,"& _ 
                " @TargetValue, @BOM, @ForecaValue, @TARGETEDFAMILY)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MM"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StatsMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StatsMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InvMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "InvMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClientNum"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClientNum"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalClient"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalClient"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FinalMarket"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FinalMarket"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Company"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Company"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Trademark"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Trademark"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV1"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV2"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NIV3"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "NIV3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TIPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TIPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GRUPO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GRUPO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@FAMILIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "FAMILIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CATEGORIA"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CATEGORIA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYEAR"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYEAR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Price_List"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Price List"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PACKID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PACKID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Package"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Package"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Year"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Date"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "Date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Organization"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Organization"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Bill_of_material"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Bill of material"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Division"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Division"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Order Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Sales_Unit"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Sales Unit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Material_Number"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Material Number"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Currency"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Currency"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RANGE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RANGE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Shipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Shipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueInHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueInHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipHand"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipHand"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ValueShipped"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ValueShipped"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@InHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "InHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShippedUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShippedUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShipHandUnit"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ShipHandUnit"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Foreca"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Foreca"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecm"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MarketClass"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MarketClass"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Billing_Document"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Billing Document"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Immaterial"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Immaterial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PPMD"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PPMD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_INVCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_INVCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@PO_FINCLI"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "PO_FINCLI"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@VINTAGEYESNO"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "VINTAGEYESNO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGTYPE"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGTYPE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCAT"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCAT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGFAMILIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGFAMILIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BIGCOMPANIES"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BIGCOMPANIES"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Forecurrent"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "Forecurrent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TargetValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "TargetValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BOM"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "BOM"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ForecaValue"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.SourceColumn = "ForecaValue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@TARGETEDFAMILY"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "TARGETEDFAMILY"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.CommercialSystem.My.MySettings.Default.SapCSConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        MD, MM, MA, StatsClientNum, StatsClient, StatsMarket, InvClientNum,"& _ 
                " InvClient, InvMarket, FinalClientNum, FinalClient, FinalMarket, Company, Tradem"& _ 
                "ark, NIV1, NIV2, NIV3, TIPO, GRUPO, FAMILIA, CATEGORIA, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   VINTAGEYEAR, [Price List], PACKID, Package, Year, [Date], [Sales Organization"& _ 
                "], [Bill of material], Division, [Order Document], [Sales Unit], [Material Name]"& _ 
                ", [Material Number], Currency, RANGE, InHand, Shipped, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  ShipHand, ValueInHand, ValueShipHand, ValueShipped, InHandUnit, ShippedUnit, S"& _ 
                "hipHandUnit, Foreca, Forecm, MarketClass, [Billing Document], Immaterial, PPMD, "& _ 
                "PO_INVCLI, PO_FINCLI, VINTAGEYESNO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BIGTYPE, BIGCAT, "& _ 
                "BIGFAMILIES, BIGCOMPANIES, Forecurrent, TargetValue, BOM, ForecaValue, TARGETEDF"& _ 
                "AMILY, Region "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            SapSalesGermanWarehouse"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CommercialSystemDataSet2.SapSalesGermanWarehouseDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CommercialSystemDataSet2.SapSalesGermanWarehouseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CommercialSystemDataSet2.SapSalesGermanWarehouseDataTable = New CommercialSystemDataSet2.SapSalesGermanWarehouseDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As CommercialSystemDataSet2.SapSalesGermanWarehouseDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As CommercialSystemDataSet2) As Integer
            Return Me.Adapter.Update(dataSet, "SapSalesGermanWarehouse")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MD As String,  _
                    ByVal MM As String,  _
                    ByVal MA As String,  _
                    ByVal StatsClientNum As String,  _
                    ByVal StatsClient As String,  _
                    ByVal StatsMarket As String,  _
                    ByVal InvClientNum As String,  _
                    ByVal InvClient As String,  _
                    ByVal InvMarket As String,  _
                    ByVal FinalClientNum As String,  _
                    ByVal FinalClient As String,  _
                    ByVal FinalMarket As String,  _
                    ByVal Company As String,  _
                    ByVal Trademark As String,  _
                    ByVal NIV1 As String,  _
                    ByVal NIV2 As String,  _
                    ByVal NIV3 As String,  _
                    ByVal TIPO As String,  _
                    ByVal GRUPO As String,  _
                    ByVal FAMILIA As String,  _
                    ByVal CATEGORIA As String,  _
                    ByVal VINTAGEYEAR As String,  _
                    ByVal Price_List As String,  _
                    ByVal PACKID As String,  _
                    ByVal Package As String,  _
                    ByVal Year As String,  _
                    ByVal _Date As Global.System.Nullable(Of Date),  _
                    ByVal Sales_Organization As String,  _
                    ByVal Bill_of_material As String,  _
                    ByVal Division As String,  _
                    ByVal Order_Document As String,  _
                    ByVal Sales_Unit As String,  _
                    ByVal Material_Name As String,  _
                    ByVal Material_Number As String,  _
                    ByVal Currency As String,  _
                    ByVal RANGE As String,  _
                    ByVal InHand As Global.System.Nullable(Of Decimal),  _
                    ByVal Shipped As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueInHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipHand As Global.System.Nullable(Of Decimal),  _
                    ByVal ValueShipped As Global.System.Nullable(Of Decimal),  _
                    ByVal InHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShippedUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal ShipHandUnit As Global.System.Nullable(Of Decimal),  _
                    ByVal Foreca As Global.System.Nullable(Of Decimal),  _
                    ByVal Forecm As Global.System.Nullable(Of Decimal),  _
                    ByVal MarketClass As String,  _
                    ByVal Billing_Document As String,  _
                    ByVal Immaterial As String,  _
                    ByVal PPMD As String,  _
                    ByVal PO_INVCLI As String,  _
                    ByVal PO_FINCLI As String,  _
                    ByVal VINTAGEYESNO As String,  _
                    ByVal BIGTYPE As String,  _
                    ByVal BIGCAT As String,  _
                    ByVal BIGFAMILIES As String,  _
                    ByVal BIGCOMPANIES As String,  _
                    ByVal Forecurrent As Global.System.Nullable(Of Decimal),  _
                    ByVal TargetValue As Global.System.Nullable(Of Decimal),  _
                    ByVal BOM As Global.System.Nullable(Of Boolean),  _
                    ByVal ForecaValue As Global.System.Nullable(Of Decimal),  _
                    ByVal TARGETEDFAMILY As String) As Integer
            If (MD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MD,String)
            End If
            If (MM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MM,String)
            End If
            If (MA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MA,String)
            End If
            If (StatsClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(StatsClientNum,String)
            End If
            If (StatsClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(StatsClient,String)
            End If
            If (StatsMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StatsMarket,String)
            End If
            If (InvClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(InvClientNum,String)
            End If
            If (InvClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(InvClient,String)
            End If
            If (InvMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(InvMarket,String)
            End If
            If (FinalClientNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FinalClientNum,String)
            End If
            If (FinalClient Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(FinalClient,String)
            End If
            If (FinalMarket Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FinalMarket,String)
            End If
            If (Company Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Company,String)
            End If
            If (Trademark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Trademark,String)
            End If
            If (NIV1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NIV1,String)
            End If
            If (NIV2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NIV2,String)
            End If
            If (NIV3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NIV3,String)
            End If
            If (TIPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TIPO,String)
            End If
            If (GRUPO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(GRUPO,String)
            End If
            If (FAMILIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(FAMILIA,String)
            End If
            If (CATEGORIA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CATEGORIA,String)
            End If
            If (VINTAGEYEAR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(VINTAGEYEAR,String)
            End If
            If (Price_List Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(Price_List,String)
            End If
            If (PACKID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PACKID,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Package,String)
            End If
            If (Year Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Year,String)
            End If
            If (_Date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(_Date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Sales_Organization Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(Sales_Organization,String)
            End If
            If (Bill_of_material Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(Bill_of_material,String)
            End If
            If (Division Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(Division,String)
            End If
            If (Order_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(Order_Document,String)
            End If
            If (Sales_Unit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(Sales_Unit,String)
            End If
            If (Material_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(Material_Name,String)
            End If
            If (Material_Number Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(Material_Number,String)
            End If
            If (Currency Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Currency,String)
            End If
            If (RANGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(RANGE,String)
            End If
            If (InHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(InHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Shipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(Shipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (ShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(ShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (ValueInHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(ValueInHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (ValueShipHand.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(ValueShipHand.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (ValueShipped.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(ValueShipped.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (InHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(InHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ShippedUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(ShippedUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (ShipHandUnit.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(ShipHandUnit.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Foreca.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Foreca.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Forecm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Forecm.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (MarketClass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(MarketClass,String)
            End If
            If (Billing_Document Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Billing_Document,String)
            End If
            If (Immaterial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Immaterial,String)
            End If
            If (PPMD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(PPMD,String)
            End If
            If (PO_INVCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(PO_INVCLI,String)
            End If
            If (PO_FINCLI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(PO_FINCLI,String)
            End If
            If (VINTAGEYESNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(VINTAGEYESNO,String)
            End If
            If (BIGTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(BIGTYPE,String)
            End If
            If (BIGCAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(BIGCAT,String)
            End If
            If (BIGFAMILIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(BIGFAMILIES,String)
            End If
            If (BIGCOMPANIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(BIGCOMPANIES,String)
            End If
            If (Forecurrent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(Forecurrent.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TargetValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(TargetValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (BOM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(BOM.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (ForecaValue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(ForecaValue.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (TARGETEDFAMILY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(TARGETEDFAMILY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _sapSalesTableAdapter As SapSalesTableAdapter
        
        Private _sapSalesAmostrasTableAdapter As SapSalesAmostrasTableAdapter
        
        Private _sapSalesCompostosTableAdapter As SapSalesCompostosTableAdapter
        
        Private _sapSalesOldReservesTableAdapter As SapSalesOldReservesTableAdapter
        
        Private _sapSalesGermanWarehouseTableAdapter As SapSalesGermanWarehouseTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SapSalesTableAdapter() As SapSalesTableAdapter
            Get
                Return Me._sapSalesTableAdapter
            End Get
            Set
                Me._sapSalesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SapSalesAmostrasTableAdapter() As SapSalesAmostrasTableAdapter
            Get
                Return Me._sapSalesAmostrasTableAdapter
            End Get
            Set
                Me._sapSalesAmostrasTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SapSalesCompostosTableAdapter() As SapSalesCompostosTableAdapter
            Get
                Return Me._sapSalesCompostosTableAdapter
            End Get
            Set
                Me._sapSalesCompostosTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SapSalesOldReservesTableAdapter() As SapSalesOldReservesTableAdapter
            Get
                Return Me._sapSalesOldReservesTableAdapter
            End Get
            Set
                Me._sapSalesOldReservesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SapSalesGermanWarehouseTableAdapter() As SapSalesGermanWarehouseTableAdapter
            Get
                Return Me._sapSalesGermanWarehouseTableAdapter
            End Get
            Set
                Me._sapSalesGermanWarehouseTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._sapSalesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sapSalesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sapSalesTableAdapter.Connection
                End If
                If ((Not (Me._sapSalesAmostrasTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sapSalesAmostrasTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sapSalesAmostrasTableAdapter.Connection
                End If
                If ((Not (Me._sapSalesCompostosTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sapSalesCompostosTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sapSalesCompostosTableAdapter.Connection
                End If
                If ((Not (Me._sapSalesOldReservesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sapSalesOldReservesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sapSalesOldReservesTableAdapter.Connection
                End If
                If ((Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sapSalesGermanWarehouseTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sapSalesGermanWarehouseTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._sapSalesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sapSalesAmostrasTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sapSalesCompostosTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sapSalesOldReservesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As CommercialSystemDataSet2, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sapSalesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SapSales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sapSalesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sapSalesAmostrasTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SapSalesAmostras.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sapSalesAmostrasTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sapSalesCompostosTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SapSalesCompostos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sapSalesCompostosTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sapSalesOldReservesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SapSalesOldReserves.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sapSalesOldReservesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SapSalesGermanWarehouse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sapSalesGermanWarehouseTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As CommercialSystemDataSet2, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sapSalesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SapSales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sapSalesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sapSalesAmostrasTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SapSalesAmostras.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sapSalesAmostrasTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sapSalesCompostosTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SapSalesCompostos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sapSalesCompostosTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sapSalesOldReservesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SapSalesOldReserves.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sapSalesOldReservesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SapSalesGermanWarehouse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sapSalesGermanWarehouseTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As CommercialSystemDataSet2, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SapSalesGermanWarehouse.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sapSalesGermanWarehouseTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sapSalesOldReservesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SapSalesOldReserves.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sapSalesOldReservesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sapSalesCompostosTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SapSalesCompostos.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sapSalesCompostosTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sapSalesAmostrasTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SapSalesAmostras.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sapSalesAmostrasTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sapSalesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SapSales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sapSalesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As CommercialSystemDataSet2) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._sapSalesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sapSalesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sapSalesAmostrasTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sapSalesAmostrasTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sapSalesCompostosTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sapSalesCompostosTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sapSalesOldReservesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sapSalesOldReservesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sapSalesGermanWarehouseTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._sapSalesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sapSalesTableAdapter, Me._sapSalesTableAdapter.Connection)
                    Me._sapSalesTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._sapSalesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sapSalesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sapSalesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sapSalesAmostrasTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sapSalesAmostrasTableAdapter, Me._sapSalesAmostrasTableAdapter.Connection)
                    Me._sapSalesAmostrasTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesAmostrasTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._sapSalesAmostrasTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sapSalesAmostrasTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sapSalesAmostrasTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sapSalesCompostosTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sapSalesCompostosTableAdapter, Me._sapSalesCompostosTableAdapter.Connection)
                    Me._sapSalesCompostosTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesCompostosTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._sapSalesCompostosTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sapSalesCompostosTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sapSalesCompostosTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sapSalesOldReservesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sapSalesOldReservesTableAdapter, Me._sapSalesOldReservesTableAdapter.Connection)
                    Me._sapSalesOldReservesTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesOldReservesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._sapSalesOldReservesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sapSalesOldReservesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sapSalesOldReservesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sapSalesGermanWarehouseTableAdapter, Me._sapSalesGermanWarehouseTableAdapter.Connection)
                    Me._sapSalesGermanWarehouseTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesGermanWarehouseTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._sapSalesGermanWarehouseTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sapSalesGermanWarehouseTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sapSalesGermanWarehouseTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._sapSalesTableAdapter) Is Nothing) Then
                    Me._sapSalesTableAdapter.Connection = CType(revertConnections(Me._sapSalesTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sapSalesAmostrasTableAdapter) Is Nothing) Then
                    Me._sapSalesAmostrasTableAdapter.Connection = CType(revertConnections(Me._sapSalesAmostrasTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesAmostrasTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sapSalesCompostosTableAdapter) Is Nothing) Then
                    Me._sapSalesCompostosTableAdapter.Connection = CType(revertConnections(Me._sapSalesCompostosTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesCompostosTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sapSalesOldReservesTableAdapter) Is Nothing) Then
                    Me._sapSalesOldReservesTableAdapter.Connection = CType(revertConnections(Me._sapSalesOldReservesTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesOldReservesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sapSalesGermanWarehouseTableAdapter) Is Nothing) Then
                    Me._sapSalesGermanWarehouseTableAdapter.Connection = CType(revertConnections(Me._sapSalesGermanWarehouseTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._sapSalesGermanWarehouseTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
