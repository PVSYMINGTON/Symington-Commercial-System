Imports System.Data.Entity
Imports DevExpress.XtraEditors
Imports DevExpress.XtraEditors.Controls
Imports DevExpress.XtraGrid.Columns
Imports DevExpress.XtraGrid.Views.BandedGrid
Imports DevExpress.XtraGrid.Views.Base
Imports Microsoft.VisualBasic



Public Class Form1
    Dim change As Boolean = False
    Dim SavedChangedValue As String
    Dim dbContext As Global.SymFit.SymFITEntities
    Dim dbContext2 As Global.SymFit.SymFITEntities
    Dim dbContext3 As Global.SymFit.SymFITEntities
    Sub New()

        InitializeComponent()
    End Sub
    Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown
        Try


            dbContext = New Global.SymFit.SymFITEntities()

            Dim clientesma = From p In dbContext.Customer_MDMMMA Select p.CustomerCodeMA, p.MA Distinct

            Customer_MDMMMABindingSource.DataSource = clientesma.ToList

            RepositoryItemLookUpEdit1.ValueMember = "CustomerCodeMA"
            RepositoryItemLookUpEdit1.DisplayMember = "MA"
            RepositoryItemLookUpEdit1.PopulateColumns()
            RepositoryItemLookUpEdit1.Columns(0).Caption = "Cod.MA"


            ' Dim clientes = From p In dbContext.Customer_MDMMMA Select p.CustomerCode, p.CustomerName, p.CustomerMarket
            ' SapClientsBindingSource.DataSource = clientes.ToList
            'RepositoryItemLookUpEdit3.ValueMember = "CustomerCode"
            'RepositoryItemLookUpEdit3.DisplayMember = "CustomerName"



            dbContext.Forecast_Product.Load
            forecast_ProductBindingSource.DataSource = dbContext.Forecast_Product.ToList

            'dbContext.Forecast.Load
            'GridControl1.DataSource = dbContext.Forecast.Local.ToBindingList

            'forecastBindingSource.DataSource = dbContext.Forecast.ToList

        Catch ex As Exception

            MsgBox("Erro de ligação ao servidor! Saindo....", MsgBoxStyle.Critical)
            MsgBox(ex.Message, MsgBoxStyle.Critical)
            Close()


        End Try
    End Sub
    Private Sub SymFIT_Form_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        ' This line of code is generated by Data Source Configuration Wizard
        ' Instantiate a new DBContext

        '' BarStaticItemVersion.Caption = "Versão: " & Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString

        If Now.Month > 1 Then colAjustJan.Visible = False : colAjustJan.Visible = False
        If Now.Month > 2 Then colAjustFeb.Visible = False : colAjustFeb.Visible = False
        If Now.Month > 3 Then colAjustMar.Visible = False : colAjustMar.Visible = False
        If Now.Month > 4 Then colAjustApr.Visible = False : colAjustApr.Visible = False
        If Now.Month > 5 Then colAjustMay.Visible = False : colAjustMay.Visible = False
        If Now.Month > 6 Then colAjustJun.Visible = False : colAjustJun.Visible = False
        If Now.Month > 7 Then colAjustJul.Visible = False : colAjustJul.Visible = False
        If Now.Month > 8 Then colAjustAug.Visible = False : colAjustAug.Visible = False
        If Now.Month > 9 Then colAjustSep.Visible = False : colAjustSep.Visible = False
        If Now.Month > 10 Then colAjustOct.Visible = False : colAjustOct.Visible = False
        If Now.Month > 11 Then colAjustNov.Visible = False : colAjustNov.Visible = False



        colAjustJan.AppearanceCell.BackColor = Color.Wheat
        colAjustFeb.AppearanceCell.BackColor = Color.Wheat
        colAjustMar.AppearanceCell.BackColor = Color.Wheat
        colAjustApr.AppearanceCell.BackColor = Color.Wheat
        colAjustMay.AppearanceCell.BackColor = Color.Wheat
        colAjustJun.AppearanceCell.BackColor = Color.Wheat
        colAjustJul.AppearanceCell.BackColor = Color.Wheat
        colAjustAug.AppearanceCell.BackColor = Color.Wheat
        colAjustSep.AppearanceCell.BackColor = Color.Wheat
        colAjustOct.AppearanceCell.BackColor = Color.Wheat
        colAjustNov.AppearanceCell.BackColor = Color.Wheat
        colAjustDec.AppearanceCell.BackColor = Color.Wheat
        colAdjustedForecast.AppearanceCell.BackColor = Color.Wheat
        colA_.AppearanceCell.BackColor = Color.Wheat
        colNotes.AppearanceCell.BackColor = Color.Wheat

        Me.Show()
        RibbonControl1.Refresh()
        GridControl1.Refresh()



        Initbands()
        InitFixedStyle()

        If IO.File.Exists("c:\commercialsystem\dados\symfit_defaultlayout.xml") Then
            Dim layoutxml As New DevExpress.Utils.OptionsLayoutGrid With {
               .StoreAllOptions = True,
                .StoreAppearance = True,
                .StoreFormatRules = True,
                .StoreVisualOptions = True,
                .StoreDataSettings = True
            }


            BandedGridView1.RestoreLayoutFromXml("c:\commercialsystem\dados\symfit_defaultlayout.xml", layoutxml)
        End If

    End Sub

    Private Sub BandedGridView1_RowUpdated(sender As Object, e As DevExpress.XtraGrid.Views.Base.RowObjectEventArgs) Handles BandedGridView1.RowUpdated
        ' dbContext.SaveChanges()
    End Sub

    Private Sub BandedGridView1_DoubleClick(sender As Object, e As EventArgs) Handles BandedGridView1.DoubleClick


        Dim mouseArgs As MouseEventArgs = CType(e, MouseEventArgs)
        Dim hitInfo = BandedGridView1.CalcHitInfo(mouseArgs.Location)
        If hitInfo.InBandPanel Then
            If hitInfo.RowHandle < 0 Then
                'MessageBox.Show("band click")
                'your code
                Dim newWidgth = hitInfo.Band.Tag
                Dim oldWidgth = hitInfo.Band.Width
                hitInfo.Band.Width = CInt(newWidgth)
                hitInfo.Band.Tag = oldWidgth


            End If
        End If
    End Sub

    Private Sub BandedGridView1_CellValueChanging(sender As Object, e As CellValueChangedEventArgs) Handles BandedGridView1.CellValueChanging


        If e.Column.Name = "colAdjustedForecast" Then
            Cursor.Current = Cursors.WaitCursor
            Dim view As BandedGridView = sender
            If view Is Nothing Then
                Return
            End If

            If view.GetRowCellValue(e.RowHandle, view.Columns("A_")) Then
                BandedGridView1.CloseEditor()
            Else
                SavedChangedValue = (BandedGridView1.ActiveEditor.OldEditValue)
            End If
            Cursor.Current = Cursors.Default
        ElseIf e.Column.Name = "colA_" Or e.Column.Name = "colAjustJan" Or e.Column.Name = "colAjustFeb" Or e.Column.Name = "colAjustMar" Or e.Column.Name = "colAjustApr" Or e.Column.Name = "colAjustMay" _
            Or e.Column.Name = "colAjustJun" Or e.Column.Name = "colAjustJul" Or e.Column.Name = "colAjustAug" Or e.Column.Name = "colAjustSep" Or e.Column.Name = "colAjustOct" _
            Or e.Column.Name = "colAjustNov" Or e.Column.Name = "colAjustDec" Then
            Cursor.Current = Cursors.WaitCursor
            SavedChangedValue = (BandedGridView1.ActiveEditor.OldEditValue)
            Cursor.Current = Cursors.Default
        End If


    End Sub

    Private Sub BandedGridView1_CellValueChanged(sender As Object, e As DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs) Handles BandedGridView1.CellValueChanged

        Dim view As BandedGridView = sender
        If view Is Nothing Then
            Return
        End If

        If e.Column.Name = "colAdjustedForecast" Then

            Cursor.Current = Cursors.WaitCursor
            If Not view.GetRowCellValue(e.RowHandle, colA_) Then
                view.SetRowCellValue(e.RowHandle, view.Columns("FinalForecast"), e.Value)
                Dim datarow As Object = view.GetRow(e.RowHandle)
                Dim Adjust_i(11) As String
                If Not IsNothing(datarow.AjustJan) Then Adjust_i(0) = datarow.AjustJan.ToString Else Adjust_i(0) = ""
                If Not IsNothing(datarow.AjustFeb) Then Adjust_i(1) = datarow.AjustFeb.ToString Else Adjust_i(1) = ""
                If Not IsNothing(datarow.AjustMar) Then Adjust_i(2) = datarow.AjustMar.ToString Else Adjust_i(2) = ""
                If Not IsNothing(datarow.AjustApr) Then Adjust_i(3) = datarow.AjustApr.ToString Else Adjust_i(3) = ""
                If Not IsNothing(datarow.AjustMay) Then Adjust_i(4) = datarow.AjustMay.ToString Else Adjust_i(4) = ""
                If Not IsNothing(datarow.AjustJun) Then Adjust_i(5) = datarow.AjustJun.ToString Else Adjust_i(5) = ""
                If Not IsNothing(datarow.AjustJul) Then Adjust_i(6) = datarow.AjustJul.ToString Else Adjust_i(6) = ""
                If Not IsNothing(datarow.AjustAug) Then Adjust_i(7) = datarow.AjustAug.ToString Else Adjust_i(7) = ""
                If Not IsNothing(datarow.AjustSep) Then Adjust_i(8) = datarow.AjustSep.ToString Else Adjust_i(8) = ""
                If Not IsNothing(datarow.AjustOct) Then Adjust_i(9) = datarow.AjustOct.ToString Else Adjust_i(9) = ""
                If Not IsNothing(datarow.AjustNov) Then Adjust_i(10) = datarow.AjustNov.ToString Else Adjust_i(10) = ""
                If Not IsNothing(datarow.AjustDec) Then Adjust_i(11) = datarow.AjustDec.ToString Else Adjust_i(11) = ""


                Dim Forecast_i(11) As String
                If Not IsNothing(datarow.ForecastJan) Then Forecast_i(0) = datarow.ForecastJan.ToString Else Forecast_i(0) = ""
                If Not IsNothing(datarow.ForecastFeb) Then Forecast_i(1) = datarow.ForecastFeb.ToString Else Forecast_i(1) = ""
                If Not IsNothing(datarow.ForecastMar) Then Forecast_i(2) = datarow.ForecastMar.ToString Else Forecast_i(2) = ""
                If Not IsNothing(datarow.ForecastApr) Then Forecast_i(3) = datarow.ForecastApr.ToString Else Forecast_i(3) = ""
                If Not IsNothing(datarow.ForecastMay) Then Forecast_i(4) = datarow.ForecastMay.ToString Else Forecast_i(4) = ""
                If Not IsNothing(datarow.ForecastJun) Then Forecast_i(5) = datarow.ForecastJun.ToString Else Forecast_i(5) = ""
                If Not IsNothing(datarow.ForecastJul) Then Forecast_i(6) = datarow.ForecastJul.ToString Else Forecast_i(6) = ""
                If Not IsNothing(datarow.ForecastAug) Then Forecast_i(7) = datarow.ForecastAug.ToString Else Forecast_i(7) = ""
                If Not IsNothing(datarow.ForecastSep) Then Forecast_i(8) = datarow.ForecastSep.ToString Else Forecast_i(8) = ""
                If Not IsNothing(datarow.ForecastOct) Then Forecast_i(9) = datarow.ForecastOct.ToString Else Forecast_i(9) = ""
                If Not IsNothing(datarow.ForecastNov) Then Forecast_i(10) = datarow.ForecastNov.ToString Else Forecast_i(10) = ""
                If Not IsNothing(datarow.ForecastDec) Then Forecast_i(11) = datarow.ForecastDec.ToString Else Forecast_i(11) = ""

                Dim Weights_i(11) As String
                If Not IsNothing(datarow.WeightsJan) Then Weights_i(0) = datarow.WeightsJan.ToString Else Weights_i(0) = ""
                If Not IsNothing(datarow.WeightsFeb) Then Weights_i(1) = datarow.WeightsFeb.ToString Else Weights_i(1) = ""
                If Not IsNothing(datarow.WeightsMar) Then Weights_i(2) = datarow.WeightsMar.ToString Else Weights_i(2) = ""
                If Not IsNothing(datarow.WeightsApr) Then Weights_i(3) = datarow.WeightsApr.ToString Else Weights_i(3) = ""
                If Not IsNothing(datarow.WeightsMay) Then Weights_i(4) = datarow.WeightsMay.ToString Else Weights_i(4) = ""
                If Not IsNothing(datarow.WeightsJun) Then Weights_i(5) = datarow.WeightsJun.ToString Else Weights_i(5) = ""
                If Not IsNothing(datarow.WeightsJul) Then Weights_i(6) = datarow.WeightsJul.ToString Else Weights_i(6) = ""
                If Not IsNothing(datarow.WeightsAug) Then Weights_i(7) = datarow.WeightsAug.ToString Else Weights_i(7) = ""
                If Not IsNothing(datarow.WeightsSep) Then Weights_i(8) = datarow.WeightsSep.ToString Else Weights_i(8) = ""
                If Not IsNothing(datarow.WeightsOct) Then Weights_i(9) = datarow.WeightsOct.ToString Else Weights_i(9) = ""
                If Not IsNothing(datarow.WeightsNov) Then Weights_i(10) = datarow.WeightsNov.ToString Else Weights_i(10) = ""
                If Not IsNothing(datarow.WeightsDec) Then Weights_i(11) = datarow.WeightsDec.ToString Else Weights_i(11) = ""



                Dim FinalForecast_i As Double
                If Not IsNothing(datarow.FinalForecast) Then FinalForecast_i = datarow.FinalForecast Else FinalForecast_i = 0

                Dim MOQ_i As Double
                If Not IsNothing(datarow.MOQ) Then MOQ_i = datarow.MOQ Else MOQ_i = 0




                If AnnualforecastDistribution(Adjust_i, Forecast_i, Weights_i, FinalForecast_i, MOQ_i) Then
                    datarow.ForecastJan = Forecast_i(0)
                    datarow.ForecastFeb = Forecast_i(1)
                    datarow.ForecastMar = Forecast_i(2)
                    datarow.ForecastApr = Forecast_i(3)
                    datarow.ForecastMay = Forecast_i(4)
                    datarow.ForecastJun = Forecast_i(5)
                    datarow.ForecastJul = Forecast_i(6)
                    datarow.ForecastAug = Forecast_i(7)
                    datarow.ForecastSep = Forecast_i(8)
                    datarow.ForecastOct = Forecast_i(9)
                    datarow.ForecastNov = Forecast_i(10)
                    datarow.ForecastDec = Forecast_i(11)
                    datarow.Finalforecast = CDec(Forecast_i(0)) + CDec(Forecast_i(1)) + CDec(Forecast_i(2)) + CDec(Forecast_i(3)) + CDec(Forecast_i(4)) + CDec(Forecast_i(5)) + CDec(Forecast_i(6)) + CDec(Forecast_i(7)) + CDec(Forecast_i(8)) + CDec(Forecast_i(9)) + CDec(Forecast_i(10)) + CDec(Forecast_i(11))
                    datarow.finalforecast9L = datarow.Finalforecast * datarow.packagecapacity / 9


                    change = True
                Else
                    view.SetRowCellValue(e.RowHandle, colAdjustedForecast, SavedChangedValue)
                    MsgBox("Erro de introdução de dados. Verifique o Forecast Anual e os valores mensais", MsgBoxStyle.Critical)
                End If
                'dbContext.SaveChanges()


                'dbContext.Dispose()
                'dbContext = New SymFITEntities
                'dbContext.Forecast.Load

                'forecastBindingSource.DataSource = dbContext.Forecast.ToList


                Cursor.Current = Cursors.Default
                Exit Sub

            End If


        End If

        If e.Column.Name = "colA_" Then

            Cursor.Current = Cursors.WaitCursor

            Dim cellValue As Object
            If e.Value Then cellValue = view.GetRowCellValue(e.RowHandle, view.Columns("AutomaticForecast")) Else cellValue = view.GetRowCellValue(e.RowHandle, view.Columns("AdjustedForecast"))
            view.SetRowCellValue(e.RowHandle, view.Columns("FinalForecast"), cellValue)


            Dim datarow As Object = view.GetRow(e.RowHandle)

            Dim Adjust_i(11) As String
            If Not IsNothing(datarow.AjustJan) Then Adjust_i(0) = datarow.AjustJan.ToString Else Adjust_i(0) = ""
            If Not IsNothing(datarow.AjustFeb) Then Adjust_i(1) = datarow.AjustFeb.ToString Else Adjust_i(1) = ""
            If Not IsNothing(datarow.AjustMar) Then Adjust_i(2) = datarow.AjustMar.ToString Else Adjust_i(2) = ""
            If Not IsNothing(datarow.AjustApr) Then Adjust_i(3) = datarow.AjustApr.ToString Else Adjust_i(3) = ""
            If Not IsNothing(datarow.AjustMay) Then Adjust_i(4) = datarow.AjustMay.ToString Else Adjust_i(4) = ""
            If Not IsNothing(datarow.AjustJun) Then Adjust_i(5) = datarow.AjustJun.ToString Else Adjust_i(5) = ""
            If Not IsNothing(datarow.AjustJul) Then Adjust_i(6) = datarow.AjustJul.ToString Else Adjust_i(6) = ""
            If Not IsNothing(datarow.AjustAug) Then Adjust_i(7) = datarow.AjustAug.ToString Else Adjust_i(7) = ""
            If Not IsNothing(datarow.AjustSep) Then Adjust_i(8) = datarow.AjustSep.ToString Else Adjust_i(8) = ""
            If Not IsNothing(datarow.AjustOct) Then Adjust_i(9) = datarow.AjustOct.ToString Else Adjust_i(9) = ""
            If Not IsNothing(datarow.AjustNov) Then Adjust_i(10) = datarow.AjustNov.ToString Else Adjust_i(10) = ""
            If Not IsNothing(datarow.AjustDec) Then Adjust_i(11) = datarow.AjustDec.ToString Else Adjust_i(11) = ""


            Dim Forecast_i(11) As String
            If Not IsNothing(datarow.ForecastJan) Then Forecast_i(0) = datarow.ForecastJan.ToString Else Forecast_i(0) = ""
            If Not IsNothing(datarow.ForecastFeb) Then Forecast_i(1) = datarow.ForecastFeb.ToString Else Forecast_i(1) = ""
            If Not IsNothing(datarow.ForecastMar) Then Forecast_i(2) = datarow.ForecastMar.ToString Else Forecast_i(2) = ""
            If Not IsNothing(datarow.ForecastApr) Then Forecast_i(3) = datarow.ForecastApr.ToString Else Forecast_i(3) = ""
            If Not IsNothing(datarow.ForecastMay) Then Forecast_i(4) = datarow.ForecastMay.ToString Else Forecast_i(4) = ""
            If Not IsNothing(datarow.ForecastJun) Then Forecast_i(5) = datarow.ForecastJun.ToString Else Forecast_i(5) = ""
            If Not IsNothing(datarow.ForecastJul) Then Forecast_i(6) = datarow.ForecastJul.ToString Else Forecast_i(6) = ""
            If Not IsNothing(datarow.ForecastAug) Then Forecast_i(7) = datarow.ForecastAug.ToString Else Forecast_i(7) = ""
            If Not IsNothing(datarow.ForecastSep) Then Forecast_i(8) = datarow.ForecastSep.ToString Else Forecast_i(8) = ""
            If Not IsNothing(datarow.ForecastOct) Then Forecast_i(9) = datarow.ForecastOct.ToString Else Forecast_i(9) = ""
            If Not IsNothing(datarow.ForecastNov) Then Forecast_i(10) = datarow.ForecastNov.ToString Else Forecast_i(10) = ""
            If Not IsNothing(datarow.ForecastDec) Then Forecast_i(11) = datarow.ForecastDec.ToString Else Forecast_i(11) = ""

            Dim Weights_i(11) As String
            If Not IsNothing(datarow.WeightsJan) Then Weights_i(0) = datarow.WeightsJan.ToString Else Weights_i(0) = ""
            If Not IsNothing(datarow.WeightsFeb) Then Weights_i(1) = datarow.WeightsFeb.ToString Else Weights_i(1) = ""
            If Not IsNothing(datarow.WeightsMar) Then Weights_i(2) = datarow.WeightsMar.ToString Else Weights_i(2) = ""
            If Not IsNothing(datarow.WeightsApr) Then Weights_i(3) = datarow.WeightsApr.ToString Else Weights_i(3) = ""
            If Not IsNothing(datarow.WeightsMay) Then Weights_i(4) = datarow.WeightsMay.ToString Else Weights_i(4) = ""
            If Not IsNothing(datarow.WeightsJun) Then Weights_i(5) = datarow.WeightsJun.ToString Else Weights_i(5) = ""
            If Not IsNothing(datarow.WeightsJul) Then Weights_i(6) = datarow.WeightsJul.ToString Else Weights_i(6) = ""
            If Not IsNothing(datarow.WeightsAug) Then Weights_i(7) = datarow.WeightsAug.ToString Else Weights_i(7) = ""
            If Not IsNothing(datarow.WeightsSep) Then Weights_i(8) = datarow.WeightsSep.ToString Else Weights_i(8) = ""
            If Not IsNothing(datarow.WeightsOct) Then Weights_i(9) = datarow.WeightsOct.ToString Else Weights_i(9) = ""
            If Not IsNothing(datarow.WeightsNov) Then Weights_i(10) = datarow.WeightsNov.ToString Else Weights_i(10) = ""
            If Not IsNothing(datarow.WeightsDec) Then Weights_i(11) = datarow.WeightsDec.ToString Else Weights_i(11) = ""



            Dim FinalForecast_i As Double
            If Not IsNothing(datarow.FinalForecast) Then FinalForecast_i = datarow.FinalForecast Else FinalForecast_i = 0


            Dim MOQ_i As Double
            If Not IsNothing(datarow.MOQ) Then MOQ_i = datarow.MOQ Else MOQ_i = 0

            If AnnualforecastDistribution(Adjust_i, Forecast_i, Weights_i, FinalForecast_i, MOQ_i) Then




                datarow.ForecastJan = Forecast_i(0)
                datarow.ForecastFeb = Forecast_i(1)
                datarow.ForecastMar = Forecast_i(2)
                datarow.ForecastApr = Forecast_i(3)
                datarow.ForecastMay = Forecast_i(4)
                datarow.ForecastJun = Forecast_i(5)
                datarow.ForecastJul = Forecast_i(6)
                datarow.ForecastAug = Forecast_i(7)
                datarow.ForecastSep = Forecast_i(8)
                datarow.ForecastOct = Forecast_i(9)
                datarow.ForecastNov = Forecast_i(10)
                datarow.ForecastDec = Forecast_i(11)
                datarow.Finalforecast = CDec(Forecast_i(0)) + CDec(Forecast_i(1)) + CDec(Forecast_i(2)) + CDec(Forecast_i(3)) + CDec(Forecast_i(4)) + CDec(Forecast_i(5)) + CDec(Forecast_i(6)) + CDec(Forecast_i(7)) + CDec(Forecast_i(8)) + CDec(Forecast_i(9)) + CDec(Forecast_i(10)) + CDec(Forecast_i(11))

                datarow.finalforecast9L = datarow.Finalforecast * datarow.packagecapacity / 9
                change = True
            Else

                view.SetRowCellValue(e.RowHandle, colA_, SavedChangedValue)
                MsgBox("Erro de introdução de dados. Verifique o Forecast Anual e os valores mensais", MsgBoxStyle.Critical)

            End If
            'dbContext.SaveChanges()

            'dbContext.Dispose()
            'dbContext = New SymFITEntities
            'dbContext.Forecast.Load

            'forecastBindingSource.DataSource = dbContext.Forecast.ToList

            Cursor.Current = Cursors.Default
            Exit Sub
        End If

        If e.Column.Name = "colAjustJan" Or e.Column.Name = "colAjustFeb" Or e.Column.Name = "colAjustMar" Or e.Column.Name = "colAjustApr" Or e.Column.Name = "colAjustMay" _
            Or e.Column.Name = "colAjustJun" Or e.Column.Name = "colAjustJul" Or e.Column.Name = "colAjustAug" Or e.Column.Name = "colAjustSep" Or e.Column.Name = "colAjustOct" _
            Or e.Column.Name = "colAjustNov" Or e.Column.Name = "colAjustDec" Then



            Dim datarow As Object = view.GetRow(e.RowHandle)

            Dim Adjust_i(11) As String
            If Not IsNothing(datarow.AjustJan) Then Adjust_i(0) = datarow.AjustJan.ToString Else Adjust_i(0) = ""
            If Not IsNothing(datarow.AjustFeb) Then Adjust_i(1) = datarow.AjustFeb.ToString Else Adjust_i(1) = ""
            If Not IsNothing(datarow.AjustMar) Then Adjust_i(2) = datarow.AjustMar.ToString Else Adjust_i(2) = ""
            If Not IsNothing(datarow.AjustApr) Then Adjust_i(3) = datarow.AjustApr.ToString Else Adjust_i(3) = ""
            If Not IsNothing(datarow.AjustMay) Then Adjust_i(4) = datarow.AjustMay.ToString Else Adjust_i(4) = ""
            If Not IsNothing(datarow.AjustJun) Then Adjust_i(5) = datarow.AjustJun.ToString Else Adjust_i(5) = ""
            If Not IsNothing(datarow.AjustJul) Then Adjust_i(6) = datarow.AjustJul.ToString Else Adjust_i(6) = ""
            If Not IsNothing(datarow.AjustAug) Then Adjust_i(7) = datarow.AjustAug.ToString Else Adjust_i(7) = ""
            If Not IsNothing(datarow.AjustSep) Then Adjust_i(8) = datarow.AjustSep.ToString Else Adjust_i(8) = ""
            If Not IsNothing(datarow.AjustOct) Then Adjust_i(9) = datarow.AjustOct.ToString Else Adjust_i(9) = ""
            If Not IsNothing(datarow.AjustNov) Then Adjust_i(10) = datarow.AjustNov.ToString Else Adjust_i(10) = ""
            If Not IsNothing(datarow.AjustDec) Then Adjust_i(11) = datarow.AjustDec.ToString Else Adjust_i(11) = ""


            Dim Forecast_i(11) As String
            If Not IsNothing(datarow.ForecastJan) Then Forecast_i(0) = datarow.ForecastJan.ToString Else Forecast_i(0) = ""
            If Not IsNothing(datarow.ForecastFeb) Then Forecast_i(1) = datarow.ForecastFeb.ToString Else Forecast_i(1) = ""
            If Not IsNothing(datarow.ForecastMar) Then Forecast_i(2) = datarow.ForecastMar.ToString Else Forecast_i(2) = ""
            If Not IsNothing(datarow.ForecastApr) Then Forecast_i(3) = datarow.ForecastApr.ToString Else Forecast_i(3) = ""
            If Not IsNothing(datarow.ForecastMay) Then Forecast_i(4) = datarow.ForecastMay.ToString Else Forecast_i(4) = ""
            If Not IsNothing(datarow.ForecastJun) Then Forecast_i(5) = datarow.ForecastJun.ToString Else Forecast_i(5) = ""
            If Not IsNothing(datarow.ForecastJul) Then Forecast_i(6) = datarow.ForecastJul.ToString Else Forecast_i(6) = ""
            If Not IsNothing(datarow.ForecastAug) Then Forecast_i(7) = datarow.ForecastAug.ToString Else Forecast_i(7) = ""
            If Not IsNothing(datarow.ForecastSep) Then Forecast_i(8) = datarow.ForecastSep.ToString Else Forecast_i(8) = ""
            If Not IsNothing(datarow.ForecastOct) Then Forecast_i(9) = datarow.ForecastOct.ToString Else Forecast_i(9) = ""
            If Not IsNothing(datarow.ForecastNov) Then Forecast_i(10) = datarow.ForecastNov.ToString Else Forecast_i(10) = ""
            If Not IsNothing(datarow.ForecastDec) Then Forecast_i(11) = datarow.ForecastDec.ToString Else Forecast_i(11) = ""

            Dim Weights_i(11) As String
            If Not IsNothing(datarow.WeightsJan) Then Weights_i(0) = datarow.WeightsJan.ToString Else Weights_i(0) = ""
            If Not IsNothing(datarow.WeightsFeb) Then Weights_i(1) = datarow.WeightsFeb.ToString Else Weights_i(1) = ""
            If Not IsNothing(datarow.WeightsMar) Then Weights_i(2) = datarow.WeightsMar.ToString Else Weights_i(2) = ""
            If Not IsNothing(datarow.WeightsApr) Then Weights_i(3) = datarow.WeightsApr.ToString Else Weights_i(3) = ""
            If Not IsNothing(datarow.WeightsMay) Then Weights_i(4) = datarow.WeightsMay.ToString Else Weights_i(4) = ""
            If Not IsNothing(datarow.WeightsJun) Then Weights_i(5) = datarow.WeightsJun.ToString Else Weights_i(5) = ""
            If Not IsNothing(datarow.WeightsJul) Then Weights_i(6) = datarow.WeightsJul.ToString Else Weights_i(6) = ""
            If Not IsNothing(datarow.WeightsAug) Then Weights_i(7) = datarow.WeightsAug.ToString Else Weights_i(7) = ""
            If Not IsNothing(datarow.WeightsSep) Then Weights_i(8) = datarow.WeightsSep.ToString Else Weights_i(8) = ""
            If Not IsNothing(datarow.WeightsOct) Then Weights_i(9) = datarow.WeightsOct.ToString Else Weights_i(9) = ""
            If Not IsNothing(datarow.WeightsNov) Then Weights_i(10) = datarow.WeightsNov.ToString Else Weights_i(10) = ""
            If Not IsNothing(datarow.WeightsDec) Then Weights_i(11) = datarow.WeightsDec.ToString Else Weights_i(11) = ""






            Dim FinalForecast_i As Double
            If view.GetRowCellValue(e.RowHandle, colA_) Then FinalForecast_i = view.GetRowCellValue(e.RowHandle, view.Columns("AutomaticForecast")) Else FinalForecast_i = view.GetRowCellValue(e.RowHandle, view.Columns("AdjustedForecast"))

            'If Not IsNothing(datarow.FinalForecast) Then FinalForecast_i = datarow.FinalForecast Else FinalForecast_i = 0
            If IsNothing(FinalForecast_i) Then FinalForecast_i = 0

            Dim MOQ_i As Double
            If Not IsNothing(datarow.MOQ) Then MOQ_i = datarow.MOQ Else MOQ_i = 0





            'Dim test = BandedGridView1.ActiveEditor.OldEditValue







            If AnnualforecastDistribution(Adjust_i, Forecast_i, Weights_i, FinalForecast_i, MOQ_i) Then


                datarow.ForecastJan = Forecast_i(0)
                datarow.ForecastFeb = Forecast_i(1)
                datarow.ForecastMar = Forecast_i(2)
                datarow.ForecastApr = Forecast_i(3)
                datarow.ForecastMay = Forecast_i(4)
                datarow.ForecastJun = Forecast_i(5)
                datarow.ForecastJul = Forecast_i(6)
                datarow.ForecastAug = Forecast_i(7)
                datarow.ForecastSep = Forecast_i(8)
                datarow.ForecastOct = Forecast_i(9)
                datarow.ForecastNov = Forecast_i(10)
                datarow.ForecastDec = Forecast_i(11)
                datarow.Finalforecast = CDec(Forecast_i(0)) + CDec(Forecast_i(1)) + CDec(Forecast_i(2)) + CDec(Forecast_i(3)) + CDec(Forecast_i(4)) + CDec(Forecast_i(5)) + CDec(Forecast_i(6)) + CDec(Forecast_i(7)) + CDec(Forecast_i(8)) + CDec(Forecast_i(9)) + CDec(Forecast_i(10)) + CDec(Forecast_i(11))
                datarow.finalforecast9L = datarow.Finalforecast * datarow.packagecapacity / 9

                change = True

            Else
                view.SetRowCellValue(e.RowHandle, e.Column, SavedChangedValue)
                MsgBox("Erro de introdução de dados. Verifique o Forecast Anual e os valores mensais", MsgBoxStyle.Critical)
            End If
            'dbContext.SaveChanges()


            'dbContext.Dispose()
            'dbContext = New SymFITEntities
            'dbContext.Forecast.Load

            'forecastBindingSource.DataSource = dbContext.Forecast.ToList

            Exit Sub
        End If


    End Sub

    Private Sub BandedGridView1_CustomDrawCell(sender As Object, e As RowCellCustomDrawEventArgs) Handles BandedGridView1.CustomDrawCell
        If (e.Column.FieldName = "colWarningProductCustomer") Then
            If (e.CellValue) Then
                Dim location = e.Bounds.Location
                location.X = location.X + (e.Bounds.Width / 2 - 8)
                location.Y = location.Y + (e.Bounds.Height / 2 - 8)
                e.Graphics.DrawImage(ImageCollection1.Images(0), location)
            End If
        End If
    End Sub

    Private Sub BandedGridView1_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles BandedGridView1.RowCellStyle


        If e.Column.FieldName = "MOQ" Then
            Dim View As BandedGridView = sender
            Dim Current_Month = Month(Today())
            Dim Forecast As Double
            For x = Current_Month To 12
                Try
                    Forecast = Forecast + View.GetRowCellDisplayText(e.RowHandle, View.Columns(x + 19))
                Catch
                End Try
            Next
            Dim MOQ As Double = e.CellValue
            If (Forecast < MOQ) And Forecast > 0 Then
                e.Appearance.BackColor = Color.LightPink
                e.Appearance.ForeColor = Color.Red
            End If
        ElseIf e.Column.FieldName = "colMATvsFinalForecast" Then
            'Dim View As BandedGridView = sender
            'Dim WarningProductCustomer As Short = View.GetRowCellValue(e.RowHandle, View.Columns("WarningProductCustomer"))
            'Dim MATvsFinalForecast As Double = View.GetRowCellValue(e.RowHandle, View.Columns("MATvsFinalForecast"))
            'If WarningProductCustomer = 1 And MATvsFinalForecast < 0.7 Then
            'If MATvsFinalForecast < 0.7 Then
            Dim View As BandedGridView = sender
            Dim datarow As Object = View.GetRow(e.RowHandle)
            If Not IsNothing(e.CellValue) And (e.CellValue < datarow.MATFORmin Or e.CellValue > datarow.MATFORmax) Then
                e.Appearance.BackColor = Color.LightPink
                e.Appearance.ForeColor = Color.Red
            End If

        ElseIf e.Column.FieldName = "colForecastAccomplishment" Then
            ' Dim View As BandedGridView = sender
            'Dim WarningProductCustomer As Short = View.GetRowCellValue(e.RowHandle, View.Columns("WarningProductCustomer"))
            'Dim ForecastAccomplishment As Double = View.GetRowCellValue(e.RowHandle, View.Columns("ForecastAccomplishment"))
            'If WarningProductCustomer = 1 And ForecastAccomplishment < 0.7 Then
            'If ForecastAccomplishment < 0.7 Then
            Dim View As BandedGridView = sender
            Dim datarow As Object = View.GetRow(e.RowHandle)
            If Not IsNothing(e.CellValue) And (e.CellValue < datarow.FAmin Or e.CellValue > datarow.FAmax) Then
                e.Appearance.BackColor = Color.LightPink
                e.Appearance.ForeColor = Color.Red
            End If

        ElseIf e.Column.FieldName = "AvailableAllocation" Then
            Dim View As BandedGridView = sender
            Dim datarow As Object = View.GetRow(e.RowHandle)

            If Not IsNothing(datarow) Then
                Dim WarningAllocation As Boolean = datarow.WarningAllocation
                If WarningAllocation Then
                    e.Appearance.BackColor = Color.LightPink
                    e.Appearance.ForeColor = Color.Red
                End If
            End If

        ElseIf e.Column.FieldName = "AdjustedForecast" Then
            Dim View As BandedGridView = sender
            If View.GetRowCellValue(e.RowHandle, colA_) Then
                e.Appearance.Reset()
                e.Appearance.ForeColor = Color.Transparent
            Else
                If View.GetRowCellValue(e.RowHandle, View.Columns("Target")) > 0 Then
                    Dim vendas As Double = View.GetRowCellValue(e.RowHandle, colShipHand)
                    vendas = vendas * View.GetRowCellValue(e.RowHandle, colPackageCapacity) / 9
                    If e.CellValue < vendas Then
                        e.Appearance.BackColor = Color.LightPink
                        e.Appearance.ForeColor = Color.Red
                    End If
                End If
            End If



        End If




    End Sub

    Private Sub BandedGridView1_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles BandedGridView1.CustomUnboundColumnData
        ''calcular WarningProductCustomer
        If e.Column.FieldName = "colWarningProductCustomer" AndAlso e.IsGetData Then
            Dim view As BandedGridView = TryCast(sender, BandedGridView)
            Dim datarow As Object = e.Row
            'Dim WarningAllocation As Boolean
            'If Not IsNothing(datarow) Then WarningAllocation = datarow.WarningAllocation
            Dim ForecastAccomplishment As Decimal = Convert.ToDecimal(view.GetListSourceRowCellValue(e.ListSourceRowIndex, colForecastAccomplishment))
            ' Dim MATvsFinalForecast As Decimal = Convert.ToDecimal(view.GetListSourceRowCellValue(e.ListSourceRowIndex, colMATvsFinalForecast))
            ' Dim MOQ As Decimal = Convert.ToDecimal(view.GetListSourceRowCellValue(e.ListSourceRowIndex, colMOQ))
            Dim Finalforecast As Decimal = Convert.ToDecimal(view.GetListSourceRowCellValue(e.ListSourceRowIndex, colFinalForecast))
            ' Dim Current_Month = Month(Today())
            'Dim Forecast As Double
            'For x = Current_Month To 12
            ' Try
            ' Forecast = Forecast + view.GetListSourceRowCellValue(e.ListSourceRowIndex, view.Columns(x + 19))
            ' Catch
            ' End Try
            ' Next


            ''(e.CellValue < datarow.MATFORmin Or e.CellValue > datarow.MATFORmax)

            If (Finalforecast > 0) Then
                'If WarningAllocation Or (ForecastAccomplishment < datarow.FAmin Or ForecastAccomplishment > datarow.FAmax) Or (MATvsFinalForecast < datarow.MATFORmin Or MATvsFinalForecast > datarow.MATFORmax) Or (Forecast < MOQ) Then
                If (ForecastAccomplishment < datarow.FAmin Or ForecastAccomplishment > datarow.FAmax) Then
                    e.Value = True
                End If
            Else
                e.Value = False
            End If




        End If
    End Sub


    Private Sub RepositoryItemCheckEditColA__EditValueChanged(sender As Object, e As EventArgs) Handles RepositoryItemCheckEditColA_.EditValueChanged
        BandedGridView1.PostEditor()

    End Sub

    Private Sub RepositoryItemMemoExEditNotes_EditValueChanged(sender As Object, e As EventArgs) Handles RepositoryItemMemoExEditNotes.EditValueChanged
        BandedGridView1.PostEditor()
        change = True
    End Sub

    Private Sub RepositoryItemTextEditCustumerType_CustomDisplayText(sender As Object, e As Controls.CustomDisplayTextEventArgs) Handles RepositoryItemTextEditCustumerType.CustomDisplayText
        If e.Value Then e.DisplayText = "Statistic" Else e.DisplayText = "Final"
    End Sub

    Private Sub RepositoryItemTextEditWarningProductCustomer_CustomDisplayText(sender As Object, e As Controls.CustomDisplayTextEventArgs) Handles RepositoryItemTextEditWarningProductCustomer.CustomDisplayText
        '''Column.FieldName = "WarningProductCustomer
        e.DisplayText = ""
    End Sub


    Private Sub IClientsMA_EditValueChanged(sender As Object, e As EventArgs) Handles iClientsMA.EditValueChanged
        If change = True Then
            MsgBox("Grave ou cancele as alterações", MsgBoxStyle.Critical)

        Else

            Dim codigo As String = ""
            Try
                codigo = iClientsMA.EditValue
                If codigo <> String.Empty Then

                    Cursor = Cursors.WaitCursor
                    'SplashScreenManager.ShowForm(GetType(SplashScreen1))

                    Dim pedidos = From p In dbContext.Customer_MDMMMA Where p.CustomerCodeMA = codigo Select p.CustomerCode, p.CustomerName, p.CustomerMarket
                    ' SapClientsBindingSource.DataSource = pedidos.ToList

                    'Dim cmdstring = "[ForecastCustomerCode] IN ('"
                    Dim cmdstring = "'"
                    For Each pedido In pedidos
                        cmdstring = cmdstring & pedido.CustomerCode & "','"
                    Next
                    'cmdstring = cmdstring.Remove(cmdstring.Length - 3, 2) & ")"
                    cmdstring = cmdstring.Remove(cmdstring.Length - 3, 2)

                    'BandedGridView1.ActiveFilterString = cmdstring

                    Dim ForecastConsulta = From p In dbContext.Forecast Where cmdstring.Contains(p.ForecastCustomerCode) Select p


                    forecastBindingSource.DataSource = ForecastConsulta.ToList
                    Cursor = Cursors.Default
                    BandedGridView1.ClearColumnsFilter()
                    ' SplashScreenManager.CloseForm()

                End If


            Catch ex As Exception
                MessageBox.Show("Erro : " & ex.Message)
            End Try

        End If




    End Sub
    Private Sub iClientsMA_ShowingEditor(sender As Object, e As DevExpress.XtraBars.ItemCancelEventArgs) Handles iClientsMA.ShowingEditor
        If change = True Then
            MsgBox("Grave ou cancele as alterações", MsgBoxStyle.Critical)
            e.Cancel = True
        End If
    End Sub
    Private Sub BarButtonItemAllClientes_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItemAllClientes.ItemClick

        If change = True Then
            MsgBox("Grave ou cancele as alterações", MsgBoxStyle.Critical)

        Else
            Cursor = Cursors.WaitCursor

            iClientsMA.EditValue = ""

            forecastBindingSource.DataSource = dbContext.Forecast.ToList
            Cursor = Cursors.Default
            BandedGridView1.ClearColumnsFilter()


        End If
    End Sub

    Private Sub IExcel_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles iExcel.ItemClick
        Dim filename As New FolderBrowserDialog
        filename.ShowDialog()
        Dim str As String
        str = filename.SelectedPath & "\Forecast" & Now.Hour & Now.Minute & Now.Second & ".xlsx"

        If NavigationFrame1.SelectedPage Is NavigationPageEditForecast Then
            Try
                GridControl1.ExportToXlsx(str)
                Process.Start(str)
            Catch
            End Try
        ElseIf NavigationFrame1.SelectedPage Is NavigationPageViewForecastProduct Then
            Try
                GridControlViewForecast.ExportToXlsx(str)
                Process.Start(str)
            Catch
            End Try
        ElseIf NavigationFrame1.SelectedPage Is NavigationPageEditAlerts Then
            Try
                GridControlEditAlerts.ExportToXlsx(str)
                Process.Start(str)
            Catch
            End Try


        End If


    End Sub


    Private Sub BarButtonItemSave_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItemSave.ItemClick
        If MsgBox("Pretende gravar?", MsgBoxStyle.OkCancel) = MsgBoxResult.Ok Then
            Dim View = GridControl1.FocusedView
            If Not (View.PostEditor() And View.UpdateCurrentRow()) Then Return
            If change = True Then
                Try
                    Dim registrosAfetados As Integer = dbContext.SaveChanges()
                    MsgBox(registrosAfetados.ToString() + " alterações feitas")
                    change = False
                Catch ex As Exception
                    MsgBox("error!! " & ex.Message)
                End Try



            Else
                MsgBox("Não houve alteração")

            End If
        End If
    End Sub

    Private Sub BarButtonItemCancel_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItemCancel.ItemClick
        If MsgBox("Quer cancelar as alterações?", MsgBoxStyle.OkCancel) = MsgBoxResult.Ok Then

            GridControl1.BeginUpdate()
            BandedGridView1.BeginDataUpdate()

            Dim codigo As String = ""
            Try
                codigo = iClientsMA.EditValue
                If codigo <> String.Empty Then
                    Cursor = Cursors.WaitCursor

                    dbContext.Dispose()
                    dbContext = New Global.SymFit.SymFITEntities()

                    Dim pedidos = From p In dbContext.Customer_MDMMMA Where p.CustomerCodeMA = codigo Select p.CustomerCode, p.CustomerName, p.CustomerMarket
                    'SapClientsBindingSource.DataSource = pedidos.ToList

                    'Dim cmdstring = "[ForecastCustomerCode] IN ('"
                    Dim cmdstring = "'"
                    For Each pedido In pedidos
                        cmdstring = cmdstring & pedido.CustomerCode & "','"
                    Next
                    'cmdstring = cmdstring.Remove(cmdstring.Length - 3, 2) & ")"
                    cmdstring = cmdstring.Remove(cmdstring.Length - 3, 2)

                    'BandedGridView1.ActiveFilterString = cmdstring

                    Dim ForecastConsulta = From p In dbContext.Forecast Where cmdstring.Contains(p.ForecastCustomerCode) Select p


                    forecastBindingSource.DataSource = ForecastConsulta.ToList

                    BandedGridView1.ClearColumnsFilter()
                    ' SplashScreenManager.CloseForm()



                    change = False
                    Cursor = Cursors.Default
                Else
                    Cursor = Cursors.WaitCursor

                    dbContext.Dispose()
                    dbContext = New Global.SymFit.SymFITEntities()
                    forecastBindingSource.DataSource = dbContext.Forecast.ToList
                    BandedGridView1.ClearColumnsFilter()
                    change = False
                    Cursor = Cursors.Default

                End If
            Catch ex As Exception
                MessageBox.Show("Erro : " & ex.Message)
            End Try
            BandedGridView1.EndDataUpdate()
            GridControl1.RefreshDataSource()
            GridControl1.EndUpdate()
        End If
    End Sub


    Private Sub BarButtonItemEditForecast_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItemEditForecast.ItemClick
        NavigationFrame1.SelectedPage = NavigationPageEditForecast
        RibbonPageGroup2.Visible = True

        BarStaticItem1.Caption = "Edit Forecast Customer"

        Me.BarButtonItemEditForecast.ItemAppearance.Normal.FontStyleDelta = System.Drawing.FontStyle.Bold
        Me.BarButtonItemEditForecast.ItemAppearance.Normal.ForeColor = System.Drawing.Color.Red
        Me.BarButtonItemEditForecast.ItemAppearance.Normal.Options.UseFont = True
        Me.BarButtonItemEditForecast.ItemAppearance.Normal.Options.UseForeColor = True

        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.Options.UseFont = False
        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.Options.UseForeColor = False

        Me.BarButtonItemEditAlert.ItemAppearance.Normal.Options.UseFont = False
        Me.BarButtonItemEditAlert.ItemAppearance.Normal.Options.UseForeColor = False



        Me.BarButtonItemCancel.Enabled = True
        Me.BarButtonItemSave.Enabled = True
        RibbonPageGroupLayout.Enabled = True
        RibbonPageGroup4.Enabled = True
        BarButtonItem5.Enabled = True
    End Sub

    Private Sub BarButtonItemViewForecastProduct_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItemViewForecastProduct.ItemClick
        NavigationFrame1.SelectedPage = NavigationPageViewForecastProduct
        RibbonPageGroup2.Visible = False
        BarStaticItem1.Caption = "View Forecast Product"

        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.FontStyleDelta = System.Drawing.FontStyle.Bold
        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.ForeColor = System.Drawing.Color.Red
        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.Options.UseFont = True
        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.Options.UseForeColor = True

        Me.BarButtonItemEditForecast.ItemAppearance.Normal.Options.UseFont = False
        Me.BarButtonItemEditForecast.ItemAppearance.Normal.Options.UseForeColor = False

        Me.BarButtonItemEditAlert.ItemAppearance.Normal.Options.UseFont = False
        Me.BarButtonItemEditAlert.ItemAppearance.Normal.Options.UseForeColor = False


        Me.BarButtonItemCancel.Enabled = False
        Me.BarButtonItemSave.Enabled = False
        RibbonPageGroupLayout.Enabled = False
        RibbonPageGroup4.Enabled = False
        BarButtonItem5.Enabled = False
        If Not IsNothing(BandedGridView1.CustomizationForm) Then
            BandedGridView1.CustomizationForm.Close()
        End If
    End Sub



    Public Function AnnualforecastDistribution(ByRef Adjust_i As Array, ByRef Forecast_i As Array, ByVal Weight_i As Array, ByRef FinalForecast_i As Double, ByRef MOQ_i As Integer) As Boolean
        Cursor.Current = Cursors.WaitCursor


        Dim Weights_Adjust As Double    'Somatório dos pesos dos meses com ajust
        Dim Weights As Double       'Somatório dos pesos dos meses que faltam distribuir
        Dim Current_Month As Integer    'Mês atual
        Dim Forecast_Remaining As Double 'Somatório do forecast remanescente do ano civil atual
        Dim Adjust_Remaining As Double  'Somatório dos ajustes remanescentes do ano civil atual
        Dim ytd_sales As Double
        Dim Faux As Double
        Dim FReman As Double
        Dim Qtd_excesso(11) As Double
        Dim flagaux As Boolean = False 'verficação se todos as colunas dos adjustes estão prenchidas


        'Definição do mês atual
        Current_Month = Month(Today())

        'Somatório das vendas até ao momento
        For i = 0 To Current_Month - 2
            ytd_sales = ytd_sales + Forecast_i(i)
        Next

        'Cálculo do Forecast Remanescente a distribuir pelo resto do ano
        Forecast_Remaining = Math.Max(0, FinalForecast_i - ytd_sales)

        'If Forecast_Remaining < 0 Then Forecast_Remaining = 0

        'Ciclo que verifica se ocorreram novas alterações a nível dos ajustes mensais
        For i = Current_Month - 1 To 11

            'Verificar se o mês atual tem ajuste
            If Adjust_i(i) <> "" Then '' then
                'Forecast do mês i assum ajuste do mês i
                Forecast_i(i) = Adjust_i(i)

                'Soma o peso desse mês com ajuste
                Weights_Adjust = Weights_Adjust + Weight_i(i)

                'Soma o ajuste desse mês
                Adjust_Remaining = Adjust_Remaining + Adjust_i(i)
            Else
                flagaux = True
                'Não tem valor ajustado para assumir
            End If
            'Soma o forecast desse mês

            Weights = Weights + Weight_i(i)
        Next

        If flagaux Then
            If Adjust_Remaining > Forecast_Remaining Then
                Return False
                Exit Function
            End If
        Else
            If Adjust_Remaining <> Forecast_Remaining Then
                Return False
                Exit Function
            End If
        End If


        'Ciclo que passa por todos os meses para a frente
        For i = Current_Month - 1 To 11

            'Verificar se o mês atual tem ajuste
            If Adjust_i(i) <> "" Then '' then
                'Não precisa de distribuir nada, o valor assumido já é o ajustado
            Else
                'Valor do forecast remanescente deve ser distribuido
                If Weights - Weights_Adjust <> 0 Then Forecast_i(i) = (Forecast_Remaining - Adjust_Remaining) * Weight_i(i) / (Weights - Weights_Adjust)
            End If

        Next


        For i = Current_Month - 1 To 11
            If Forecast_i(i) = 0 Then

            Else
                Faux = 0
                For j = 0 To i - 1
                    Faux = Faux + Forecast_i(j)
                Next

                FReman = FinalForecast_i - Faux



                If i = Current_Month - 1 Then

                    If Adjust_i(i) <> "" Then
                        Qtd_excesso(i) = 0
                    Else

                        Qtd_excesso(i) = Math.Min(FReman, Math.Max(MOQ_i, Math.Ceiling(CDbl(Forecast_i(i))))) - Forecast_i(i)
                        Forecast_i(i) = Math.Min(FReman, Math.Max(MOQ_i, Math.Ceiling((CDbl(Forecast_i(i))))))
                    End If
                Else

                    If Adjust_i(i) <> "" Then
                        Qtd_excesso(i) = Qtd_excesso(i - 1)
                    Else

                        Qtd_excesso(i) = Math.Min(FReman, Math.Max(MOQ_i, Math.Ceiling(CDbl(Forecast_i(i)) - Qtd_excesso(i - 1)))) - Forecast_i(i) + Qtd_excesso(i - 1)
                        Forecast_i(i) = Math.Min(FReman, Math.Max(MOQ_i, Math.Ceiling(Math.Round(CDbl(Forecast_i(i)) - Qtd_excesso(i - 1), 5))))
                    End If
                End If



            End If
        Next

        Return True
        Cursor.Current = Cursors.Default
    End Function

    Private Sub SymFIT_Form_FormClosing(sender As Object, e As FormClosingEventArgs) Handles MyBase.FormClosing
        If change = True Then
            If MsgBox("Existem alterações!! Pretende sair?", MsgBoxStyle.YesNo) = MsgBoxResult.No Then
                e.Cancel = True
            End If
        End If
    End Sub



    '''gridviewForecastProduct
    '''
    Private Sub BandedGridView2_CustomDrawCell(sender As Object, e As RowCellCustomDrawEventArgs) Handles BandedGridView2.CustomDrawCell
        If (e.Column.FieldName = "Warning") Then
            If (e.CellValue) Then
                Dim location = e.Bounds.Location
                location.X = location.X + (e.Bounds.Width / 2 - 8)
                location.Y = location.Y + (e.Bounds.Height / 2 - 8)
                e.Graphics.DrawImage(ImageCollection1.Images(0), location)
            End If
        End If
    End Sub


    Private Sub RepositoryItemTextEditWarningViewProduct_CustomDisplayText(sender As Object, e As Controls.CustomDisplayTextEventArgs) Handles RepositoryItemTextEditWarningViewProduct.CustomDisplayText

        e.DisplayText = ""
    End Sub


    Private Sub BandedGridView2_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles BandedGridView2.RowCellStyle



        If e.Column.Name = "ColViewProductMATvsForecast" Then

            If Not IsNothing(e.CellValue) And e.CellValue < 0.7 Then
                e.Appearance.BackColor = Color.LightPink
                e.Appearance.ForeColor = Color.Red
            End If

        ElseIf e.Column.Name = "ColViewProductForecastAccomplishment" Then

            If Not IsNothing(e.CellValue) And e.CellValue < 0.7 Then
                e.Appearance.BackColor = Color.LightPink
                e.Appearance.ForeColor = Color.Red
            End If

        End If
    End Sub


    '''gridviewEditAlerts
    '''

    Private Sub BarButtonItemEditAlert_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItemEditAlert.ItemClick
        NavigationFrame1.SelectedPage = NavigationPageEditAlerts
        RibbonPageGroup2.Visible = False
        BarStaticItem1.Caption = "Edit Alerts"


        dbContext2 = New Global.SymFit.SymFITEntities()
        dbContext2.Alertas_limites.Load
        alertas_limitesBindingSource.DataSource = dbContext2.Alertas_limites.ToList

        dbContext3 = New Global.SymFit.SymFITEntities()
        dbContext3.Alertas_ABC.Load
        alertas_ABCBindingSource.DataSource = dbContext3.Alertas_ABC.ToList



        Me.BarButtonItemEditAlert.ItemAppearance.Normal.FontStyleDelta = System.Drawing.FontStyle.Bold
        Me.BarButtonItemEditAlert.ItemAppearance.Normal.ForeColor = System.Drawing.Color.Red
        Me.BarButtonItemEditAlert.ItemAppearance.Normal.Options.UseFont = True
        Me.BarButtonItemEditAlert.ItemAppearance.Normal.Options.UseForeColor = True

        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.Options.UseFont = False
        Me.BarButtonItemViewForecastProduct.ItemAppearance.Normal.Options.UseForeColor = False


        Me.BarButtonItemEditForecast.ItemAppearance.Normal.Options.UseFont = False
        Me.BarButtonItemEditForecast.ItemAppearance.Normal.Options.UseForeColor = False

        Me.BarButtonItemCancel.Enabled = False
        Me.BarButtonItemSave.Enabled = False
        RibbonPageGroupLayout.Enabled = False
        RibbonPageGroup4.Enabled = False
        BarButtonItem5.Enabled = False
        If Not IsNothing(BandedGridView1.CustomizationForm) Then
            BandedGridView1.CustomizationForm.Close()
        End If

    End Sub

    Private Sub GridViewEditAlerts_RowUpdated(sender As Object, e As RowObjectEventArgs) Handles GridViewEditAlerts.RowUpdated
        dbContext2.SaveChanges()
    End Sub
    Private Sub GridViewEditAlerts2_RowUpdated(sender As Object, e As RowObjectEventArgs) Handles GridViewEditAlerts2.RowUpdated
        dbContext3.SaveChanges()
    End Sub



#Region "freezecolumns"

    Private Sub icbColumn_SelectedIndexChanged(sender As Object, e As EventArgs) Handles icbColumn.SelectedIndexChanged
        UpdateColumnFixed()
    End Sub
    Private Sub UpdateColumnFixed()
        Dim col As GridBand = TryCast(Bar_icbColumn.EditValue, GridBand)
        If col Is Nothing Then
            Return
        End If
        Bar_icbFixedStyle.EditValue = col.Fixed
    End Sub

    Private Sub icbFixedStyle_SelectedValueChanged(sender As Object, e As EventArgs) Handles icbFixedStyle.SelectedValueChanged
        Dim col As GridBand = TryCast(Bar_icbColumn.EditValue, GridBand)
        If col Is Nothing Then
            Return
        End If
        col.Fixed = CType(Bar_icbFixedStyle.EditValue, FixedStyle)
    End Sub

    Private Sub InitBands()
        icbColumn.Properties.SmallImages = BandedGridView1.Images
        icbColumn.Properties.Sorted = True
        For Each col As GridBand In BandedGridView1.Bands
            If col.Visible Then
                icbColumn.Properties.Items.Add(New ImageComboBoxItem(col.GetTextCaption(), col, col.ImageIndex))
            End If
        Next col
        Bar_icbColumn.EditValue = GridBandForecast
    End Sub
    Private Sub InitFixedStyle()

        icbFixedStyle.Properties.Items.Add(New ImageComboBoxItem("Not Fixed", FixedStyle.None, -1))
        icbFixedStyle.Properties.Items.Add(New ImageComboBoxItem("Fixed Left", FixedStyle.Left, -1))
        icbFixedStyle.Properties.Items.Add(New ImageComboBoxItem("Fixed Right", FixedStyle.Right, -1))
    End Sub

#End Region


    Private Sub BarButtonItem3_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem3.ItemClick
        If MsgBox("Are you sure?", MsgBoxStyle.YesNo) = MsgBoxResult.No Then Exit Sub
        Dim layoutxml As New DevExpress.Utils.OptionsLayoutGrid With {
                .StoreAllOptions = True,
                .StoreAppearance = True,
                .StoreFormatRules = True,
                .StoreVisualOptions = True,
                .StoreDataSettings = True
            }
        BandedGridView1.SaveLayoutToXml("c:\commercialsystem\dados\symfit_defaultlayout.xml", layoutxml)



        MsgBox("OK. New default layout set.")
    End Sub

    Private Sub BarButtonItem1_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem1.ItemClick
        MsgBox("O nome do ficheiro deve começar por 'SYMFIT'." & vbCrLf & "The name of the file must start with 'SYMFIT'.", MsgBoxStyle.Information, "Commercial System")
        If XtraSaveFileDialog1.ShowDialog() = DialogResult.OK Then
            Dim str As String
            str = XtraSaveFileDialog1.FileName
            If str = "" Then Return

            Dim layoutxml As New DevExpress.Utils.OptionsLayoutGrid With {
                .StoreAllOptions = True,
                .StoreAppearance = True,
                .StoreFormatRules = True,
                .StoreVisualOptions = True,
                .StoreDataSettings = True
            }
            BandedGridView1.SaveLayoutToXml(str, layoutxml)

        End If
    End Sub

    Private Sub BarButtonItem2_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem2.ItemClick
        If XtraOpenFileDialog1.ShowDialog() = DialogResult.OK Then
            Dim str As String
            str = XtraOpenFileDialog1.FileName
            If str = "" Then Return

            Dim layoutxml As New DevExpress.Utils.OptionsLayoutGrid With {
               .StoreAllOptions = True,
                .StoreAppearance = True,
                .StoreFormatRules = True,
                .StoreVisualOptions = True,
                .StoreDataSettings = True
            }
            BandedGridView1.RestoreLayoutFromXml(str, layoutxml)

        End If
    End Sub

    Private Sub BarButtonItem4_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem4.ItemClick
        If MsgBox("Are you sure?", MsgBoxStyle.YesNo) = MsgBoxResult.No Then Exit Sub

        IO.File.Delete("c:\commercialsystem\dados\symfit_defaultlayout.xml")

        MsgBox("OK. Default layout reseted. Exit to see the changes.")
    End Sub

    Private Sub BarButtonItem5_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem5.ItemClick
        BandedGridView1.ColumnsCustomization()
    End Sub
End Class
